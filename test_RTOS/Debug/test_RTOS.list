
test_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006298  08006298  00007298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006424  08006424  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006424  08006424  00007424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800642c  0800642c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800642c  0800642c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006430  08006430  00007430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006434  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004214  20000070  080064a4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004284  080064a4  00008284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150e5  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f4  00000000  00000000  0001d185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00020380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e36  00000000  00000000  000215d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190dd  00000000  00000000  0002240e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001498d  00000000  00000000  0003b4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ff6  00000000  00000000  0004fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8e6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d0  00000000  00000000  000e8eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ee284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006280 	.word	0x08006280

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006280 	.word	0x08006280

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	2000012c 	.word	0x2000012c

080005a4 <__io_putchar>:
#define INC_MYLIB_H_

extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	230a      	movs	r3, #10
 80005b0:	2201      	movs	r2, #1
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <__io_putchar+0x20>)
 80005b4:	f001 ff20 	bl	80023f8 <HAL_UART_Transmit>
	return ch;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000032c 	.word	0x2000032c

080005c8 <Outs>:

void Outs(char *s)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
			s++;
		}
		else break;
	}
	*/
	while(*s)(*s =='\r') ? __io_putchar(*s++), __io_putchar('\n') : __io_putchar(*s++);
 80005d0:	e015      	b.n	80005fe <Outs+0x36>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b0d      	cmp	r3, #13
 80005d8:	d10a      	bne.n	80005f0 <Outs+0x28>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ffde 	bl	80005a4 <__io_putchar>
 80005e8:	200a      	movs	r0, #10
 80005ea:	f7ff ffdb 	bl	80005a4 <__io_putchar>
 80005ee:	e006      	b.n	80005fe <Outs+0x36>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	607a      	str	r2, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffd3 	bl	80005a4 <__io_putchar>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1e5      	bne.n	80005d2 <Outs+0xa>
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int IsHolding = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B4_Pin)
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	2b10      	cmp	r3, #16
 800061e:	d11f      	bne.n	8000660 <HAL_GPIO_EXTI_Callback+0x50>
	{
		if(IsHolding)
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x58>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d010      	beq.n	800064a <HAL_GPIO_EXTI_Callback+0x3a>
		{
			while(osSemaphoreWait(myBinarySem01Handle, 10) != osOK);
 8000628:	bf00      	nop
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <HAL_GPIO_EXTI_Callback+0x5c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	210a      	movs	r1, #10
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fb61 	bl	8002cf8 <osSemaphoreWait>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f6      	bne.n	800062a <HAL_GPIO_EXTI_Callback+0x1a>
			IsHolding = 1;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x58>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
			Outs("Semaphore Holded\r");
 8000642:	480b      	ldr	r0, [pc, #44]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x60>)
 8000644:	f7ff ffc0 	bl	80005c8 <Outs>
			osSemaphoreRelease(myBinarySem01Handle);
			IsHolding = 0;
			Outs("Semaphore Released\r");
		}
	}
}
 8000648:	e00a      	b.n	8000660 <HAL_GPIO_EXTI_Callback+0x50>
			osSemaphoreRelease(myBinarySem01Handle);
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <HAL_GPIO_EXTI_Callback+0x5c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fba0 	bl	8002d94 <osSemaphoreRelease>
			IsHolding = 0;
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
			Outs("Semaphore Released\r");
 800065a:	4806      	ldr	r0, [pc, #24]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x64>)
 800065c:	f7ff ffb4 	bl	80005c8 <Outs>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000384 	.word	0x20000384
 800066c:	20000380 	.word	0x20000380
 8000670:	080062dc 	.word	0x080062dc
 8000674:	080062f0 	.word	0x080062f0

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b098      	sub	sp, #96	@ 0x60
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fc39 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f85b 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f8ed 	bl	8000864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800068a:	f000 f8c1 	bl	8000810 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800068e:	2300      	movs	r3, #0
 8000690:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000692:	2300      	movs	r3, #0
 8000694:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000696:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f002 faf8 	bl	8002c92 <osSemaphoreCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000720 <main+0xa8>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 80006a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <main+0xac>)
 80006aa:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80006ae:	461d      	mov	r5, r3
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 80006bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fa85 	bl	8002bd2 <osThreadCreate>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <main+0xb0>)
 80006cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityLow, 0, 128);
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <main+0xb4>)
 80006d0:	f107 0420 	add.w	r4, r7, #32
 80006d4:	461d      	mov	r5, r3
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fa72 	bl	8002bd2 <osThreadCreate>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <main+0xb8>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <main+0xbc>)
 80006f6:	1d3c      	adds	r4, r7, #4
 80006f8:	461d      	mov	r5, r3
 80006fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000702:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fa61 	bl	8002bd2 <osThreadCreate>
 8000710:	4603      	mov	r3, r0
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <main+0xc0>)
 8000714:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000716:	f002 fa55 	bl	8002bc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071a:	bf00      	nop
 800071c:	e7fd      	b.n	800071a <main+0xa2>
 800071e:	bf00      	nop
 8000720:	20000380 	.word	0x20000380
 8000724:	08006310 	.word	0x08006310
 8000728:	20000374 	.word	0x20000374
 800072c:	08006338 	.word	0x08006338
 8000730:	20000378 	.word	0x20000378
 8000734:	08006360 	.word	0x08006360
 8000738:	2000037c 	.word	0x2000037c

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	@ 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f004 ffb0 	bl	80056b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a27      	ldr	r2, [pc, #156]	@ (8000808 <SystemClock_Config+0xcc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000770:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a21      	ldr	r2, [pc, #132]	@ (800080c <SystemClock_Config+0xd0>)
 8000786:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ac:	2310      	movs	r3, #16
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fe8a 	bl	80014dc <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ce:	f000 f999 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2302      	movs	r3, #2
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f8ec 	bl	80019cc <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007fa:	f000 f983 	bl	8000b04 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f001 fd86 	bl	8002358 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f957 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000032c 	.word	0x2000032c
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b43      	ldr	r3, [pc, #268]	@ (800098c <MX_GPIO_Init+0x128>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a42      	ldr	r2, [pc, #264]	@ (800098c <MX_GPIO_Init+0x128>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b40      	ldr	r3, [pc, #256]	@ (800098c <MX_GPIO_Init+0x128>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b3c      	ldr	r3, [pc, #240]	@ (800098c <MX_GPIO_Init+0x128>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a3b      	ldr	r2, [pc, #236]	@ (800098c <MX_GPIO_Init+0x128>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b39      	ldr	r3, [pc, #228]	@ (800098c <MX_GPIO_Init+0x128>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b35      	ldr	r3, [pc, #212]	@ (800098c <MX_GPIO_Init+0x128>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <MX_GPIO_Init+0x128>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b32      	ldr	r3, [pc, #200]	@ (800098c <MX_GPIO_Init+0x128>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b2e      	ldr	r3, [pc, #184]	@ (800098c <MX_GPIO_Init+0x128>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a2d      	ldr	r2, [pc, #180]	@ (800098c <MX_GPIO_Init+0x128>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <MX_GPIO_Init+0x128>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80008f0:	4827      	ldr	r0, [pc, #156]	@ (8000990 <MX_GPIO_Init+0x12c>)
 80008f2:	f000 fda7 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008fc:	4825      	ldr	r0, [pc, #148]	@ (8000994 <MX_GPIO_Init+0x130>)
 80008fe:	f000 fda1 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000908:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	481f      	ldr	r0, [pc, #124]	@ (8000998 <MX_GPIO_Init+0x134>)
 800091a:	f000 fc0f 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800091e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4816      	ldr	r0, [pc, #88]	@ (8000990 <MX_GPIO_Init+0x12c>)
 8000938:	f000 fc00 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800093c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480f      	ldr	r0, [pc, #60]	@ (8000994 <MX_GPIO_Init+0x130>)
 8000956:	f000 fbf1 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : B4_Pin */
  GPIO_InitStruct.Pin = B4_Pin;
 800095a:	2310      	movs	r3, #16
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B4_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4809      	ldr	r0, [pc, #36]	@ (8000994 <MX_GPIO_Init+0x130>)
 8000970:	f000 fbe4 	bl	800113c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2105      	movs	r1, #5
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fbb5 	bl	80010e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800097e:	200a      	movs	r0, #10
 8000980:	f000 fbce 	bl	8001120 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	@ 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000
 8000994:	40020400 	.word	0x40020400
 8000998:	40020800 	.word	0x40020800

0800099c <StartTask01>:
  * @retval None
  */
int tn1 = 0;
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009a4:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <StartTask01+0x4c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 f9a4 	bl	8002cf8 <osSemaphoreWait>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d112      	bne.n	80009dc <StartTask01+0x40>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80009b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ba:	480c      	ldr	r0, [pc, #48]	@ (80009ec <StartTask01+0x50>)
 80009bc:	f000 fd5b 	bl	8001476 <HAL_GPIO_TogglePin>
		  printf("Process in Task01 : %d\r\n",tn1++);
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <StartTask01+0x54>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	490a      	ldr	r1, [pc, #40]	@ (80009f0 <StartTask01+0x54>)
 80009c8:	600a      	str	r2, [r1, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4809      	ldr	r0, [pc, #36]	@ (80009f4 <StartTask01+0x58>)
 80009ce:	f004 fd85 	bl	80054dc <iprintf>
		  osSemaphoreRelease(myBinarySem01Handle);
 80009d2:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <StartTask01+0x4c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 f9dc 	bl	8002d94 <osSemaphoreRelease>
	  }
	  osDelay(300);
 80009dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009e0:	f002 f943 	bl	8002c6a <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009e4:	e7de      	b.n	80009a4 <StartTask01+0x8>
 80009e6:	bf00      	nop
 80009e8:	20000380 	.word	0x20000380
 80009ec:	40020000 	.word	0x40020000
 80009f0:	20000388 	.word	0x20000388
 80009f4:	0800637c 	.word	0x0800637c

080009f8 <StartTask02>:
*/
int tn2 = 0;
char i2=1;
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <StartTask02+0x60>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 f976 	bl	8002cf8 <osSemaphoreWait>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d11c      	bne.n	8000a4c <StartTask02+0x54>
	  {
		  if(i2){
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <StartTask02+0x64>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d005      	beq.n	8000a26 <StartTask02+0x2e>
			  osDelay(100);
 8000a1a:	2064      	movs	r0, #100	@ 0x64
 8000a1c:	f002 f925 	bl	8002c6a <osDelay>
			  i2=0;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <StartTask02+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000a26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <StartTask02+0x68>)
 8000a2c:	f000 fd23 	bl	8001476 <HAL_GPIO_TogglePin>
		  printf("Process in Task02 : %d\r\n",tn2++);
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <StartTask02+0x6c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	490b      	ldr	r1, [pc, #44]	@ (8000a64 <StartTask02+0x6c>)
 8000a38:	600a      	str	r2, [r1, #0]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480a      	ldr	r0, [pc, #40]	@ (8000a68 <StartTask02+0x70>)
 8000a3e:	f004 fd4d 	bl	80054dc <iprintf>
		  osSemaphoreRelease(myBinarySem01Handle);
 8000a42:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <StartTask02+0x60>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 f9a4 	bl	8002d94 <osSemaphoreRelease>
	  }
    osDelay(300);
 8000a4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a50:	f002 f90b 	bl	8002c6a <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a54:	e7d4      	b.n	8000a00 <StartTask02+0x8>
 8000a56:	bf00      	nop
 8000a58:	20000380 	.word	0x20000380
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	40020000 	.word	0x40020000
 8000a64:	2000038c 	.word	0x2000038c
 8000a68:	08006398 	.word	0x08006398

08000a6c <StartTask03>:
*/
int tn3 = 0;
char i3=1;
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK){
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <StartTask03+0x60>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f93c 	bl	8002cf8 <osSemaphoreWait>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d11c      	bne.n	8000ac0 <StartTask03+0x54>
		  if(i3){
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <StartTask03+0x64>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d005      	beq.n	8000a9a <StartTask03+0x2e>
			  osDelay(200);
 8000a8e:	20c8      	movs	r0, #200	@ 0xc8
 8000a90:	f002 f8eb 	bl	8002c6a <osDelay>
			  i3=0;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <StartTask03+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000a9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a9e:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <StartTask03+0x68>)
 8000aa0:	f000 fce9 	bl	8001476 <HAL_GPIO_TogglePin>
		  printf("Process in Task03 : %d\r\n",tn3++);
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <StartTask03+0x6c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	490b      	ldr	r1, [pc, #44]	@ (8000ad8 <StartTask03+0x6c>)
 8000aac:	600a      	str	r2, [r1, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480a      	ldr	r0, [pc, #40]	@ (8000adc <StartTask03+0x70>)
 8000ab2:	f004 fd13 	bl	80054dc <iprintf>
		  osSemaphoreRelease(myBinarySem01Handle);
 8000ab6:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <StartTask03+0x60>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 f96a 	bl	8002d94 <osSemaphoreRelease>
	  }
	  osDelay(300);
 8000ac0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ac4:	f002 f8d1 	bl	8002c6a <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK){
 8000ac8:	e7d4      	b.n	8000a74 <StartTask03+0x8>
 8000aca:	bf00      	nop
 8000acc:	20000380 	.word	0x20000380
 8000ad0:	20000001 	.word	0x20000001
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	20000390 	.word	0x20000390
 8000adc:	080063b4 	.word	0x080063b4

08000ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000af2:	f000 fa21 	bl	8000f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40014000 	.word	0x40014000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_MspInit+0x54>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	4a11      	ldr	r2, [pc, #68]	@ (8000b64 <HAL_MspInit+0x54>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_MspInit+0x54>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_MspInit+0x54>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_MspInit+0x54>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_MspInit+0x54>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	210f      	movs	r1, #15
 8000b52:	f06f 0001 	mvn.w	r0, #1
 8000b56:	f000 fac7 	bl	80010e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	@ (8000bec <HAL_UART_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12b      	bne.n	8000be2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a10      	ldr	r2, [pc, #64]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <HAL_UART_MspInit+0x8c>)
 8000bde:	f000 faad 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	@ 0x30
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c10:	4a2d      	ldr	r2, [pc, #180]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c16:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c18:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c24:	f107 020c 	add.w	r2, r7, #12
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f8ec 	bl	8001e0c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c34:	f001 f8d6 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 8000c38:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c3c:	4a23      	ldr	r2, [pc, #140]	@ (8000ccc <HAL_InitTick+0xd4>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	0c9b      	lsrs	r3, r3, #18
 8000c44:	3b01      	subs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <HAL_InitTick+0xd8>)
 8000c4a:	4a22      	ldr	r2, [pc, #136]	@ (8000cd4 <HAL_InitTick+0xdc>)
 8000c4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <HAL_InitTick+0xd8>)
 8000c50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c54:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000c56:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd0 <HAL_InitTick+0xd8>)
 8000c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_InitTick+0xd8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <HAL_InitTick+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_InitTick+0xd8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000c6e:	4818      	ldr	r0, [pc, #96]	@ (8000cd0 <HAL_InitTick+0xd8>)
 8000c70:	f001 f8fe 	bl	8001e70 <HAL_TIM_Base_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d11b      	bne.n	8000cba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000c82:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <HAL_InitTick+0xd8>)
 8000c84:	f001 f94e 	bl	8001f24 <HAL_TIM_Base_Start_IT>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d111      	bne.n	8000cba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c96:	2018      	movs	r0, #24
 8000c98:	f000 fa42 	bl	8001120 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	d808      	bhi.n	8000cb4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	2018      	movs	r0, #24
 8000ca8:	f000 fa1e 	bl	80010e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_InitTick+0xe0>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e002      	b.n	8000cba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3730      	adds	r7, #48	@ 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	431bde83 	.word	0x431bde83
 8000cd0:	20000394 	.word	0x20000394
 8000cd4:	40014000 	.word	0x40014000
 8000cd8:	20000008 	.word	0x20000008

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 8000d16:	2010      	movs	r0, #16
 8000d18:	f000 fbc8 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d26:	f001 f95f 	bl	8001fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000394 	.word	0x20000394

08000d34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
  }

  return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e009      	b.n	8000d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fc0b 	bl	80005a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf1      	blt.n	8000d80 <_write+0x12>
  }
  return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_close>:

int _close(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dce:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_isatty>:

int _isatty(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f004 fcda 	bl	80057f8 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20020000 	.word	0x20020000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	200003dc 	.word	0x200003dc
 8000e78:	20004288 	.word	0x20004288

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ea4:	f7ff ffea 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	@ (8000edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	@ (8000ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8000eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ece:	f004 fc99 	bl	8005804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fbd1 	bl	8000678 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ee4:	08006434 	.word	0x08006434
  ldr r2, =_sbss
 8000ee8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eec:	20004284 	.word	0x20004284

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f8d8 	bl	80010d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f7ff fe68 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fdf2 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	200003e0 	.word	0x200003e0

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200003e0 	.word	0x200003e0

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	@ (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	@ (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	@ 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff4c 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fa:	f7ff ff61 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 80010fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	6978      	ldr	r0, [r7, #20]
 8001106:	f7ff ffb1 	bl	800106c <NVIC_EncodePriority>
 800110a:	4602      	mov	r2, r0
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff80 	bl	8001018 <__NVIC_SetPriority>
}
 8001118:	bf00      	nop
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff54 	bl	8000fdc <__NVIC_EnableIRQ>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e159      	b.n	800140c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8148 	bne.w	8001406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80a2 	beq.w	8001406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b57      	ldr	r3, [pc, #348]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a56      	ldr	r2, [pc, #344]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b54      	ldr	r3, [pc, #336]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a52      	ldr	r2, [pc, #328]	@ (8001428 <HAL_GPIO_Init+0x2ec>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a49      	ldr	r2, [pc, #292]	@ (800142c <HAL_GPIO_Init+0x2f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x202>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a48      	ldr	r2, [pc, #288]	@ (8001430 <HAL_GPIO_Init+0x2f4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1fe>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a47      	ldr	r2, [pc, #284]	@ (8001434 <HAL_GPIO_Init+0x2f8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1fa>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a46      	ldr	r2, [pc, #280]	@ (8001438 <HAL_GPIO_Init+0x2fc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1f6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a45      	ldr	r2, [pc, #276]	@ (800143c <HAL_GPIO_Init+0x300>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1f2>
 800132a:	2304      	movs	r3, #4
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800132e:	2307      	movs	r3, #7
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	@ (8001428 <HAL_GPIO_Init+0x2ec>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a2f      	ldr	r2, [pc, #188]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <HAL_GPIO_Init+0x304>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a24      	ldr	r2, [pc, #144]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f aea2 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	041a      	lsls	r2, r3, #16
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43d9      	mvns	r1, r3
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	400b      	ands	r3, r1
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	619a      	str	r2, [r3, #24]
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f8a0 	bl	8000610 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e267      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d075      	beq.n	80015e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fa:	4b88      	ldr	r3, [pc, #544]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b04      	cmp	r3, #4
 8001504:	d00c      	beq.n	8001520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001506:	4b85      	ldr	r3, [pc, #532]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150e:	2b08      	cmp	r3, #8
 8001510:	d112      	bne.n	8001538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001512:	4b82      	ldr	r3, [pc, #520]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800151e:	d10b      	bne.n	8001538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	4b7e      	ldr	r3, [pc, #504]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d05b      	beq.n	80015e4 <HAL_RCC_OscConfig+0x108>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d157      	bne.n	80015e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e242      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001540:	d106      	bne.n	8001550 <HAL_RCC_OscConfig+0x74>
 8001542:	4b76      	ldr	r3, [pc, #472]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a75      	ldr	r2, [pc, #468]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e01d      	b.n	800158c <HAL_RCC_OscConfig+0xb0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x98>
 800155a:	4b70      	ldr	r3, [pc, #448]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6f      	ldr	r2, [pc, #444]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b6d      	ldr	r3, [pc, #436]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a6c      	ldr	r2, [pc, #432]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0xb0>
 8001574:	4b69      	ldr	r3, [pc, #420]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a68      	ldr	r2, [pc, #416]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800157a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b66      	ldr	r3, [pc, #408]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a65      	ldr	r2, [pc, #404]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800158a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fce4 	bl	8000f60 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fce0 	bl	8000f60 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	@ 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e207      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b5b      	ldr	r3, [pc, #364]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0xc0>
 80015ba:	e014      	b.n	80015e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fcd0 	bl	8000f60 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fccc 	bl	8000f60 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1f3      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	4b51      	ldr	r3, [pc, #324]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0xe8>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d063      	beq.n	80016ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f2:	4b4a      	ldr	r3, [pc, #296]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fe:	4b47      	ldr	r3, [pc, #284]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001606:	2b08      	cmp	r3, #8
 8001608:	d11c      	bne.n	8001644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160a:	4b44      	ldr	r3, [pc, #272]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	4b41      	ldr	r3, [pc, #260]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x152>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e1c7      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b3b      	ldr	r3, [pc, #236]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4937      	ldr	r1, [pc, #220]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	e03a      	b.n	80016ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_RCC_OscConfig+0x244>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fc85 	bl	8000f60 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fc81 	bl	8000f60 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1a8      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001678:	4b28      	ldr	r3, [pc, #160]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4925      	ldr	r1, [pc, #148]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
 800168c:	e015      	b.n	80016ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <HAL_RCC_OscConfig+0x244>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fc64 	bl	8000f60 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff fc60 	bl	8000f60 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e187      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d036      	beq.n	8001734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d016      	beq.n	80016fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_RCC_OscConfig+0x248>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fc44 	bl	8000f60 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fc40 	bl	8000f60 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e167      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80016f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x200>
 80016fa:	e01b      	b.n	8001734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_RCC_OscConfig+0x248>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fc2d 	bl	8000f60 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	e00e      	b.n	8001728 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fc29 	bl	8000f60 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d907      	bls.n	8001728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e150      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
 800171c:	40023800 	.word	0x40023800
 8001720:	42470000 	.word	0x42470000
 8001724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	4b88      	ldr	r3, [pc, #544]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 800172a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ea      	bne.n	800170a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8097 	beq.w	8001870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4b81      	ldr	r3, [pc, #516]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10f      	bne.n	8001772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b7d      	ldr	r3, [pc, #500]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a7c      	ldr	r2, [pc, #496]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b7a      	ldr	r3, [pc, #488]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	4b77      	ldr	r3, [pc, #476]	@ (8001950 <HAL_RCC_OscConfig+0x474>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d118      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177e:	4b74      	ldr	r3, [pc, #464]	@ (8001950 <HAL_RCC_OscConfig+0x474>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a73      	ldr	r2, [pc, #460]	@ (8001950 <HAL_RCC_OscConfig+0x474>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178a:	f7ff fbe9 	bl	8000f60 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001792:	f7ff fbe5 	bl	8000f60 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e10c      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001950 <HAL_RCC_OscConfig+0x474>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2ea>
 80017b8:	4b64      	ldr	r3, [pc, #400]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	4a63      	ldr	r2, [pc, #396]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c4:	e01c      	b.n	8001800 <HAL_RCC_OscConfig+0x324>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b05      	cmp	r3, #5
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x30c>
 80017ce:	4b5f      	ldr	r3, [pc, #380]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d2:	4a5e      	ldr	r2, [pc, #376]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017da:	4b5c      	ldr	r3, [pc, #368]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017de:	4a5b      	ldr	r2, [pc, #364]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0x324>
 80017e8:	4b58      	ldr	r3, [pc, #352]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ec:	4a57      	ldr	r2, [pc, #348]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f4:	4b55      	ldr	r3, [pc, #340]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f8:	4a54      	ldr	r2, [pc, #336]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d015      	beq.n	8001834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fbaa 	bl	8000f60 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff fba6 	bl	8000f60 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0cb      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	4b49      	ldr	r3, [pc, #292]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0ee      	beq.n	8001810 <HAL_RCC_OscConfig+0x334>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fb94 	bl	8000f60 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff fb90 	bl	8000f60 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0b5      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001852:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ee      	bne.n	800183c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4b39      	ldr	r3, [pc, #228]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a38      	ldr	r2, [pc, #224]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a1 	beq.w	80019bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800187a:	4b34      	ldr	r3, [pc, #208]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	d05c      	beq.n	8001940 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d141      	bne.n	8001912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <HAL_RCC_OscConfig+0x478>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fb64 	bl	8000f60 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fb60 	bl	8000f60 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e087      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	4b27      	ldr	r3, [pc, #156]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	3b01      	subs	r3, #1
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	491b      	ldr	r1, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <HAL_RCC_OscConfig+0x478>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb39 	bl	8000f60 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff fb35 	bl	8000f60 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e05c      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x416>
 8001910:	e054      	b.n	80019bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <HAL_RCC_OscConfig+0x478>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fb22 	bl	8000f60 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff fb1e 	bl	8000f60 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e045      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x444>
 800193e:	e03d      	b.n	80019bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d107      	bne.n	8001958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e038      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000
 8001954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001958:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <HAL_RCC_OscConfig+0x4ec>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d028      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d121      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d11a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001988:	4013      	ands	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800198e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001990:	4293      	cmp	r3, r2
 8001992:	d111      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	3b01      	subs	r3, #1
 80019a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0cc      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b68      	ldr	r3, [pc, #416]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d90c      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b65      	ldr	r3, [pc, #404]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b63      	ldr	r3, [pc, #396]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0b8      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4b59      	ldr	r3, [pc, #356]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a58      	ldr	r2, [pc, #352]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4b53      	ldr	r3, [pc, #332]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b50      	ldr	r3, [pc, #320]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	494d      	ldr	r1, [pc, #308]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d044      	beq.n	8001aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b47      	ldr	r3, [pc, #284]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d119      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e06f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e067      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 0203 	bic.w	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4934      	ldr	r1, [pc, #208]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abc:	f7ff fa50 	bl	8000f60 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff fa4c 	bl	8000f60 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e04f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 020c 	and.w	r2, r3, #12
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d20c      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e032      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4916      	ldr	r1, [pc, #88]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	490e      	ldr	r1, [pc, #56]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b52:	f000 f821 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	490a      	ldr	r1, [pc, #40]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	5ccb      	ldrb	r3, [r1, r3]
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f840 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	080063d8 	.word	0x080063d8
 8001b90:	20000004 	.word	0x20000004
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b9c:	b094      	sub	sp, #80	@ 0x50
 8001b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ba8:	2300      	movs	r3, #0
 8001baa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb0:	4b79      	ldr	r3, [pc, #484]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d00d      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	f200 80e1 	bhi.w	8001d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x34>
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bca:	e0db      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bcc:	4b73      	ldr	r3, [pc, #460]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001bd0:	e0db      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bd2:	4b73      	ldr	r3, [pc, #460]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bd6:	e0d8      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001be0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bee:	4b6a      	ldr	r3, [pc, #424]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	099b      	lsrs	r3, r3, #6
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	f04f 0000 	mov.w	r0, #0
 8001c12:	f04f 0100 	mov.w	r1, #0
 8001c16:	0159      	lsls	r1, r3, #5
 8001c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1c:	0150      	lsls	r0, r2, #5
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4621      	mov	r1, r4
 8001c24:	1a51      	subs	r1, r2, r1
 8001c26:	6139      	str	r1, [r7, #16]
 8001c28:	4629      	mov	r1, r5
 8001c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c3c:	4659      	mov	r1, fp
 8001c3e:	018b      	lsls	r3, r1, #6
 8001c40:	4651      	mov	r1, sl
 8001c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c46:	4651      	mov	r1, sl
 8001c48:	018a      	lsls	r2, r1, #6
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c50:	4659      	mov	r1, fp
 8001c52:	eb63 0901 	sbc.w	r9, r3, r1
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4699      	mov	r9, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	eb18 0303 	adds.w	r3, r8, r3
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	462b      	mov	r3, r5
 8001c78:	eb49 0303 	adc.w	r3, r9, r3
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	024b      	lsls	r3, r1, #9
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c94:	4621      	mov	r1, r4
 8001c96:	024a      	lsls	r2, r1, #9
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ca8:	f7fe faea 	bl	8000280 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb4:	e058      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cd0:	4642      	mov	r2, r8
 8001cd2:	464b      	mov	r3, r9
 8001cd4:	f04f 0000 	mov.w	r0, #0
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	0159      	lsls	r1, r3, #5
 8001cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce2:	0150      	lsls	r0, r2, #5
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4641      	mov	r1, r8
 8001cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cee:	4649      	mov	r1, r9
 8001cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d08:	ebb2 040a 	subs.w	r4, r2, sl
 8001d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	00eb      	lsls	r3, r5, #3
 8001d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d1e:	00e2      	lsls	r2, r4, #3
 8001d20:	4614      	mov	r4, r2
 8001d22:	461d      	mov	r5, r3
 8001d24:	4643      	mov	r3, r8
 8001d26:	18e3      	adds	r3, r4, r3
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	eb45 0303 	adc.w	r3, r5, r3
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	028b      	lsls	r3, r1, #10
 8001d42:	4621      	mov	r1, r4
 8001d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d48:	4621      	mov	r1, r4
 8001d4a:	028a      	lsls	r2, r1, #10
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d52:	2200      	movs	r2, #0
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	61fa      	str	r2, [r7, #28]
 8001d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5c:	f7fe fa90 	bl	8000280 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d82:	e002      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3750      	adds	r7, #80	@ 0x50
 8001d90:	46bd      	mov	sp, r7
 8001d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	007a1200 	.word	0x007a1200

08001da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0a9b      	lsrs	r3, r3, #10
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4903      	ldr	r1, [pc, #12]	@ (8001de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	080063e8 	.word	0x080063e8

08001de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001de8:	f7ff ffdc 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0b5b      	lsrs	r3, r3, #13
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4903      	ldr	r1, [pc, #12]	@ (8001e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	080063e8 	.word	0x080063e8

08001e0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	220f      	movs	r2, #15
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_RCC_GetClockConfig+0x5c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_RCC_GetClockConfig+0x5c>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <HAL_RCC_GetClockConfig+0x60>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0207 	and.w	r2, r3, #7
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	601a      	str	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40023c00 	.word	0x40023c00

08001e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e041      	b.n	8001f06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f839 	bl	8001f0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f000 f9b2 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d001      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e044      	b.n	8001fc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d018      	beq.n	8001f90 <HAL_TIM_Base_Start_IT+0x6c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f66:	d013      	beq.n	8001f90 <HAL_TIM_Base_Start_IT+0x6c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00e      	beq.n	8001f90 <HAL_TIM_Base_Start_IT+0x6c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <HAL_TIM_Base_Start_IT+0xb8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_TIM_Base_Start_IT+0x6c>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_TIM_Base_Start_IT+0x6c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a16      	ldr	r2, [pc, #88]	@ (8001fe4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d111      	bne.n	8001fb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d010      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb2:	e007      	b.n	8001fc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	40000c00 	.word	0x40000c00
 8001fe4:	40014000 	.word	0x40014000

08001fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d020      	beq.n	800204c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0202 	mvn.w	r2, #2
 800201c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8d2 	bl	80021dc <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8c4 	bl	80021c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f8d5 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d020      	beq.n	8002098 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01b      	beq.n	8002098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0204 	mvn.w	r2, #4
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8ac 	bl	80021dc <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f89e 	bl	80021c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8af 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d020      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0208 	mvn.w	r2, #8
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2204      	movs	r2, #4
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f886 	bl	80021dc <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f878 	bl	80021c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f889 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d020      	beq.n	8002130 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01b      	beq.n	8002130 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0210 	mvn.w	r2, #16
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2208      	movs	r2, #8
 8002106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f860 	bl	80021dc <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f852 	bl	80021c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f863 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00c      	beq.n	8002154 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0201 	mvn.w	r2, #1
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fcc6 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f8e6 	bl	8002344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f834 	bl	8002204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0220 	mvn.w	r2, #32
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8b8 	bl	8002330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3a      	ldr	r2, [pc, #232]	@ (8002314 <TIM_Base_SetConfig+0xfc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00f      	beq.n	8002250 <TIM_Base_SetConfig+0x38>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002236:	d00b      	beq.n	8002250 <TIM_Base_SetConfig+0x38>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a37      	ldr	r2, [pc, #220]	@ (8002318 <TIM_Base_SetConfig+0x100>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d007      	beq.n	8002250 <TIM_Base_SetConfig+0x38>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a36      	ldr	r2, [pc, #216]	@ (800231c <TIM_Base_SetConfig+0x104>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_Base_SetConfig+0x38>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a35      	ldr	r2, [pc, #212]	@ (8002320 <TIM_Base_SetConfig+0x108>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d108      	bne.n	8002262 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2b      	ldr	r2, [pc, #172]	@ (8002314 <TIM_Base_SetConfig+0xfc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01b      	beq.n	80022a2 <TIM_Base_SetConfig+0x8a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002270:	d017      	beq.n	80022a2 <TIM_Base_SetConfig+0x8a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a28      	ldr	r2, [pc, #160]	@ (8002318 <TIM_Base_SetConfig+0x100>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <TIM_Base_SetConfig+0x8a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a27      	ldr	r2, [pc, #156]	@ (800231c <TIM_Base_SetConfig+0x104>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00f      	beq.n	80022a2 <TIM_Base_SetConfig+0x8a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a26      	ldr	r2, [pc, #152]	@ (8002320 <TIM_Base_SetConfig+0x108>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00b      	beq.n	80022a2 <TIM_Base_SetConfig+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a25      	ldr	r2, [pc, #148]	@ (8002324 <TIM_Base_SetConfig+0x10c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <TIM_Base_SetConfig+0x8a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a24      	ldr	r2, [pc, #144]	@ (8002328 <TIM_Base_SetConfig+0x110>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d003      	beq.n	80022a2 <TIM_Base_SetConfig+0x8a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a23      	ldr	r2, [pc, #140]	@ (800232c <TIM_Base_SetConfig+0x114>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d108      	bne.n	80022b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a0e      	ldr	r2, [pc, #56]	@ (8002314 <TIM_Base_SetConfig+0xfc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d103      	bne.n	80022e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f023 0201 	bic.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	611a      	str	r2, [r3, #16]
  }
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40014000 	.word	0x40014000
 8002328:	40014400 	.word	0x40014400
 800232c:	40014800 	.word	0x40014800

08002330 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e042      	b.n	80023f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fbf2 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	@ 0x24
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800239a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f973 	bl	8002688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b20      	cmp	r3, #32
 8002416:	d175      	bne.n	8002504 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_UART_Transmit+0x2c>
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e06e      	b.n	8002506 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2221      	movs	r2, #33	@ 0x21
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002436:	f7fe fd93 	bl	8000f60 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002450:	d108      	bne.n	8002464 <HAL_UART_Transmit+0x6c>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d104      	bne.n	8002464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	e003      	b.n	800246c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800246c:	e02e      	b.n	80024cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	2180      	movs	r1, #128	@ 0x80
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f848 	bl	800250e <UART_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e03a      	b.n	8002506 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	3302      	adds	r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e007      	b.n	80024be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	3301      	adds	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1cb      	bne.n	800246e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	2140      	movs	r1, #64	@ 0x40
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f814 	bl	800250e <UART_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e006      	b.n	8002506 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002504:	2302      	movs	r3, #2
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4613      	mov	r3, r2
 800251c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800251e:	e03b      	b.n	8002598 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d037      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002528:	f7fe fd1a 	bl	8000f60 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	6a3a      	ldr	r2, [r7, #32]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <UART_WaitOnFlagUntilTimeout+0x30>
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e03a      	b.n	80025b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d023      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b80      	cmp	r3, #128	@ 0x80
 8002554:	d020      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b40      	cmp	r3, #64	@ 0x40
 800255a:	d01d      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d116      	bne.n	8002598 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f81d 	bl	80025c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2208      	movs	r2, #8
 800258a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e00f      	b.n	80025b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4013      	ands	r3, r2
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d0b4      	beq.n	8002520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b095      	sub	sp, #84	@ 0x54
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d2:	e853 3f00 	ldrex	r3, [r3]
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025f0:	e841 2300 	strex	r3, r2, [r1]
 80025f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1e5      	bne.n	80025c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3314      	adds	r3, #20
 8002602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	e853 3f00 	ldrex	r3, [r3]
 800260a:	61fb      	str	r3, [r7, #28]
   return(result);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3314      	adds	r3, #20
 800261a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800261c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002624:	e841 2300 	strex	r3, r2, [r1]
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e5      	bne.n	80025fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002634:	2b01      	cmp	r3, #1
 8002636:	d119      	bne.n	800266c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	60bb      	str	r3, [r7, #8]
   return(result);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	330c      	adds	r3, #12
 8002656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002658:	61ba      	str	r2, [r7, #24]
 800265a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265c:	6979      	ldr	r1, [r7, #20]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	e841 2300 	strex	r3, r2, [r1]
 8002664:	613b      	str	r3, [r7, #16]
   return(result);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e5      	bne.n	8002638 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800267a:	bf00      	nop
 800267c:	3754      	adds	r7, #84	@ 0x54
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800268c:	b0c0      	sub	sp, #256	@ 0x100
 800268e:	af00      	add	r7, sp, #0
 8002690:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	ea40 0301 	orr.w	r3, r0, r1
 80026b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	431a      	orrs	r2, r3
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026e0:	f021 010c 	bic.w	r1, r1, #12
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026ee:	430b      	orrs	r3, r1
 80026f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002702:	6999      	ldr	r1, [r3, #24]
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	ea40 0301 	orr.w	r3, r0, r1
 800270e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b8f      	ldr	r3, [pc, #572]	@ (8002954 <UART_SetConfig+0x2cc>)
 8002718:	429a      	cmp	r2, r3
 800271a:	d005      	beq.n	8002728 <UART_SetConfig+0xa0>
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b8d      	ldr	r3, [pc, #564]	@ (8002958 <UART_SetConfig+0x2d0>)
 8002724:	429a      	cmp	r2, r3
 8002726:	d104      	bne.n	8002732 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002728:	f7ff fb5c 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 800272c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002730:	e003      	b.n	800273a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002732:	f7ff fb43 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002736:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002744:	f040 810c 	bne.w	8002960 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800274c:	2200      	movs	r2, #0
 800274e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002752:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002756:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800275a:	4622      	mov	r2, r4
 800275c:	462b      	mov	r3, r5
 800275e:	1891      	adds	r1, r2, r2
 8002760:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002762:	415b      	adcs	r3, r3
 8002764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002766:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800276a:	4621      	mov	r1, r4
 800276c:	eb12 0801 	adds.w	r8, r2, r1
 8002770:	4629      	mov	r1, r5
 8002772:	eb43 0901 	adc.w	r9, r3, r1
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800278a:	4690      	mov	r8, r2
 800278c:	4699      	mov	r9, r3
 800278e:	4623      	mov	r3, r4
 8002790:	eb18 0303 	adds.w	r3, r8, r3
 8002794:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002798:	462b      	mov	r3, r5
 800279a:	eb49 0303 	adc.w	r3, r9, r3
 800279e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027b6:	460b      	mov	r3, r1
 80027b8:	18db      	adds	r3, r3, r3
 80027ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80027bc:	4613      	mov	r3, r2
 80027be:	eb42 0303 	adc.w	r3, r2, r3
 80027c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027cc:	f7fd fd58 	bl	8000280 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4b61      	ldr	r3, [pc, #388]	@ (800295c <UART_SetConfig+0x2d4>)
 80027d6:	fba3 2302 	umull	r2, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	011c      	lsls	r4, r3, #4
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80027f8:	415b      	adcs	r3, r3
 80027fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002800:	4641      	mov	r1, r8
 8002802:	eb12 0a01 	adds.w	sl, r2, r1
 8002806:	4649      	mov	r1, r9
 8002808:	eb43 0b01 	adc.w	fp, r3, r1
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002818:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800281c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002820:	4692      	mov	sl, r2
 8002822:	469b      	mov	fp, r3
 8002824:	4643      	mov	r3, r8
 8002826:	eb1a 0303 	adds.w	r3, sl, r3
 800282a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800282e:	464b      	mov	r3, r9
 8002830:	eb4b 0303 	adc.w	r3, fp, r3
 8002834:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002844:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002848:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800284c:	460b      	mov	r3, r1
 800284e:	18db      	adds	r3, r3, r3
 8002850:	643b      	str	r3, [r7, #64]	@ 0x40
 8002852:	4613      	mov	r3, r2
 8002854:	eb42 0303 	adc.w	r3, r2, r3
 8002858:	647b      	str	r3, [r7, #68]	@ 0x44
 800285a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800285e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002862:	f7fd fd0d 	bl	8000280 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4611      	mov	r1, r2
 800286c:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <UART_SetConfig+0x2d4>)
 800286e:	fba3 2301 	umull	r2, r3, r3, r1
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2264      	movs	r2, #100	@ 0x64
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	1acb      	subs	r3, r1, r3
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002882:	4b36      	ldr	r3, [pc, #216]	@ (800295c <UART_SetConfig+0x2d4>)
 8002884:	fba3 2302 	umull	r2, r3, r3, r2
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002890:	441c      	add	r4, r3
 8002892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002896:	2200      	movs	r2, #0
 8002898:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800289c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028a4:	4642      	mov	r2, r8
 80028a6:	464b      	mov	r3, r9
 80028a8:	1891      	adds	r1, r2, r2
 80028aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028ac:	415b      	adcs	r3, r3
 80028ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028b4:	4641      	mov	r1, r8
 80028b6:	1851      	adds	r1, r2, r1
 80028b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028ba:	4649      	mov	r1, r9
 80028bc:	414b      	adcs	r3, r1
 80028be:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028cc:	4659      	mov	r1, fp
 80028ce:	00cb      	lsls	r3, r1, #3
 80028d0:	4651      	mov	r1, sl
 80028d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d6:	4651      	mov	r1, sl
 80028d8:	00ca      	lsls	r2, r1, #3
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	4642      	mov	r2, r8
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028e8:	464b      	mov	r3, r9
 80028ea:	460a      	mov	r2, r1
 80028ec:	eb42 0303 	adc.w	r3, r2, r3
 80028f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002900:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002908:	460b      	mov	r3, r1
 800290a:	18db      	adds	r3, r3, r3
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800290e:	4613      	mov	r3, r2
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800291a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800291e:	f7fd fcaf 	bl	8000280 <__aeabi_uldivmod>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <UART_SetConfig+0x2d4>)
 8002928:	fba3 1302 	umull	r1, r3, r3, r2
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	2164      	movs	r1, #100	@ 0x64
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	3332      	adds	r3, #50	@ 0x32
 800293a:	4a08      	ldr	r2, [pc, #32]	@ (800295c <UART_SetConfig+0x2d4>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	f003 0207 	and.w	r2, r3, #7
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4422      	add	r2, r4
 800294e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002950:	e106      	b.n	8002b60 <UART_SetConfig+0x4d8>
 8002952:	bf00      	nop
 8002954:	40011000 	.word	0x40011000
 8002958:	40011400 	.word	0x40011400
 800295c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800296a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800296e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002972:	4642      	mov	r2, r8
 8002974:	464b      	mov	r3, r9
 8002976:	1891      	adds	r1, r2, r2
 8002978:	6239      	str	r1, [r7, #32]
 800297a:	415b      	adcs	r3, r3
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
 800297e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002982:	4641      	mov	r1, r8
 8002984:	1854      	adds	r4, r2, r1
 8002986:	4649      	mov	r1, r9
 8002988:	eb43 0501 	adc.w	r5, r3, r1
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	00eb      	lsls	r3, r5, #3
 8002996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800299a:	00e2      	lsls	r2, r4, #3
 800299c:	4614      	mov	r4, r2
 800299e:	461d      	mov	r5, r3
 80029a0:	4643      	mov	r3, r8
 80029a2:	18e3      	adds	r3, r4, r3
 80029a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029a8:	464b      	mov	r3, r9
 80029aa:	eb45 0303 	adc.w	r3, r5, r3
 80029ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029ce:	4629      	mov	r1, r5
 80029d0:	008b      	lsls	r3, r1, #2
 80029d2:	4621      	mov	r1, r4
 80029d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d8:	4621      	mov	r1, r4
 80029da:	008a      	lsls	r2, r1, #2
 80029dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029e0:	f7fd fc4e 	bl	8000280 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4b60      	ldr	r3, [pc, #384]	@ (8002b6c <UART_SetConfig+0x4e4>)
 80029ea:	fba3 2302 	umull	r2, r3, r3, r2
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	011c      	lsls	r4, r3, #4
 80029f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a04:	4642      	mov	r2, r8
 8002a06:	464b      	mov	r3, r9
 8002a08:	1891      	adds	r1, r2, r2
 8002a0a:	61b9      	str	r1, [r7, #24]
 8002a0c:	415b      	adcs	r3, r3
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a14:	4641      	mov	r1, r8
 8002a16:	1851      	adds	r1, r2, r1
 8002a18:	6139      	str	r1, [r7, #16]
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	414b      	adcs	r3, r1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	00cb      	lsls	r3, r1, #3
 8002a30:	4651      	mov	r1, sl
 8002a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a36:	4651      	mov	r1, sl
 8002a38:	00ca      	lsls	r2, r1, #3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4642      	mov	r2, r8
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a48:	464b      	mov	r3, r9
 8002a4a:	460a      	mov	r2, r1
 8002a4c:	eb42 0303 	adc.w	r3, r2, r3
 8002a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	008b      	lsls	r3, r1, #2
 8002a70:	4641      	mov	r1, r8
 8002a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a76:	4641      	mov	r1, r8
 8002a78:	008a      	lsls	r2, r1, #2
 8002a7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a7e:	f7fd fbff 	bl	8000280 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	4b38      	ldr	r3, [pc, #224]	@ (8002b6c <UART_SetConfig+0x4e4>)
 8002a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2264      	movs	r2, #100	@ 0x64
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	1acb      	subs	r3, r1, r3
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	3332      	adds	r3, #50	@ 0x32
 8002a9c:	4a33      	ldr	r2, [pc, #204]	@ (8002b6c <UART_SetConfig+0x4e4>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aa8:	441c      	add	r4, r3
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ab2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ab4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ab8:	4642      	mov	r2, r8
 8002aba:	464b      	mov	r3, r9
 8002abc:	1891      	adds	r1, r2, r2
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	415b      	adcs	r3, r3
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ac8:	4641      	mov	r1, r8
 8002aca:	1851      	adds	r1, r2, r1
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	4649      	mov	r1, r9
 8002ad0:	414b      	adcs	r3, r1
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ae0:	4659      	mov	r1, fp
 8002ae2:	00cb      	lsls	r3, r1, #3
 8002ae4:	4651      	mov	r1, sl
 8002ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aea:	4651      	mov	r1, sl
 8002aec:	00ca      	lsls	r2, r1, #3
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	4642      	mov	r2, r8
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002afa:	464b      	mov	r3, r9
 8002afc:	460a      	mov	r2, r1
 8002afe:	eb42 0303 	adc.w	r3, r2, r3
 8002b02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	008b      	lsls	r3, r1, #2
 8002b20:	4641      	mov	r1, r8
 8002b22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b26:	4641      	mov	r1, r8
 8002b28:	008a      	lsls	r2, r1, #2
 8002b2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b2e:	f7fd fba7 	bl	8000280 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <UART_SetConfig+0x4e4>)
 8002b38:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	2164      	movs	r1, #100	@ 0x64
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	3332      	adds	r3, #50	@ 0x32
 8002b4a:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <UART_SetConfig+0x4e4>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4422      	add	r2, r4
 8002b5e:	609a      	str	r2, [r3, #8]
}
 8002b60:	bf00      	nop
 8002b62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b66:	46bd      	mov	sp, r7
 8002b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6c:	51eb851f 	.word	0x51eb851f

08002b70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b82:	2b84      	cmp	r3, #132	@ 0x84
 8002b84:	d005      	beq.n	8002b92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3303      	adds	r3, #3
 8002b90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba6:	f3ef 8305 	mrs	r3, IPSR
 8002baa:	607b      	str	r3, [r7, #4]
  return(result);
 8002bac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002bc8:	f001 f942 	bl	8003e50 <vTaskStartScheduler>
  
  return osOK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd4:	b089      	sub	sp, #36	@ 0x24
 8002bd6:	af04      	add	r7, sp, #16
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <osThreadCreate+0x54>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01c      	beq.n	8002c26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685c      	ldr	r4, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691e      	ldr	r6, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ffb6 	bl	8002b70 <makeFreeRtosPriority>
 8002c04:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c0e:	9202      	str	r2, [sp, #8]
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	9100      	str	r1, [sp, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4632      	mov	r2, r6
 8002c18:	4629      	mov	r1, r5
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f000 ff32 	bl	8003a84 <xTaskCreateStatic>
 8002c20:	4603      	mov	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e01c      	b.n	8002c60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685c      	ldr	r4, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c32:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff98 	bl	8002b70 <makeFreeRtosPriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	9200      	str	r2, [sp, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	4632      	mov	r2, r6
 8002c4e:	4629      	mov	r1, r5
 8002c50:	4620      	mov	r0, r4
 8002c52:	f000 ff77 	bl	8003b44 <xTaskCreate>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d001      	beq.n	8002c60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c60:	68fb      	ldr	r3, [r7, #12]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <osDelay+0x16>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	e000      	b.n	8002c82 <osDelay+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 f8ae 	bl	8003de4 <vTaskDelay>
  
  return osOK;
 8002c88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af02      	add	r7, sp, #8
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00f      	beq.n	8002cc4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10a      	bne.n	8002cc0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2203      	movs	r2, #3
 8002cb0:	9200      	str	r2, [sp, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f000 f9c0 	bl	800303c <xQueueGenericCreateStatic>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	e016      	b.n	8002cee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e014      	b.n	8002cee <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d110      	bne.n	8002cec <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002cca:	2203      	movs	r2, #3
 8002ccc:	2100      	movs	r1, #0
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f000 fa31 	bl	8003136 <xQueueGenericCreate>
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <osSemaphoreCreate+0x56>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa82 	bl	80031ec <xQueueGenericSend>
      return sema;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	e000      	b.n	8002cee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002cec:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	e03a      	b.n	8002d86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d103      	bne.n	8002d24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e009      	b.n	8002d38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d006      	beq.n	8002d38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <osSemaphoreWait+0x40>
      ticks = 1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002d38:	f7ff ff32 	bl	8002ba0 <inHandlerMode>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d017      	beq.n	8002d72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	461a      	mov	r2, r3
 8002d48:	2100      	movs	r1, #0
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fcf0 	bl	8003730 <xQueueReceiveFromISR>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <osSemaphoreWait+0x62>
      return osErrorOS;
 8002d56:	23ff      	movs	r3, #255	@ 0xff
 8002d58:	e015      	b.n	8002d86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d011      	beq.n	8002d84 <osSemaphoreWait+0x8c>
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <osSemaphoreWait+0x98>)
 8002d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	e008      	b.n	8002d84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fbcb 	bl	8003510 <xQueueSemaphoreTake>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002d80:	23ff      	movs	r3, #255	@ 0xff
 8002d82:	e000      	b.n	8002d86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000ed04 	.word	0xe000ed04

08002d94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002da4:	f7ff fefc 	bl	8002ba0 <inHandlerMode>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002dae:	f107 0308 	add.w	r3, r7, #8
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fb1b 	bl	80033f0 <xQueueGiveFromISR>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d001      	beq.n	8002dc4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002dc0:	23ff      	movs	r3, #255	@ 0xff
 8002dc2:	e017      	b.n	8002df4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d013      	beq.n	8002df2 <osSemaphoreRelease+0x5e>
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <osSemaphoreRelease+0x68>)
 8002dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	e00a      	b.n	8002df2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fa02 	bl	80031ec <xQueueGenericSend>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002dee:	23ff      	movs	r3, #255	@ 0xff
 8002df0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f103 0208 	add.w	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295
 8002e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f103 0208 	add.w	r2, r3, #8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f103 0208 	add.w	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d103      	bne.n	8002ec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e00c      	b.n	8002edc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e002      	b.n	8002ed0 <vListInsert+0x2e>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d2f6      	bcs.n	8002eca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6892      	ldr	r2, [r2, #8]
 8002f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6852      	ldr	r2, [r2, #4]
 8002f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d103      	bne.n	8002f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1e5a      	subs	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f94:	f001 fed0 	bl	8004d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	441a      	add	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	22ff      	movs	r2, #255	@ 0xff
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	22ff      	movs	r2, #255	@ 0xff
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d114      	bne.n	8003014 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01a      	beq.n	8003028 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3310      	adds	r3, #16
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 f984 	bl	8004304 <xTaskRemoveFromEventList>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d012      	beq.n	8003028 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <xQueueGenericReset+0xd0>)
 8003004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	e009      	b.n	8003028 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3310      	adds	r3, #16
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fef1 	bl	8002e00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3324      	adds	r3, #36	@ 0x24
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff feec 	bl	8002e00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003028:	f001 feb8 	bl	8004d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800302c:	2301      	movs	r3, #1
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	@ 0x38
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	e7fd      	b.n	8003082 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <xQueueGenericCreateStatic+0x56>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <xQueueGenericCreateStatic+0x5a>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <xQueueGenericCreateStatic+0x5c>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	623b      	str	r3, [r7, #32]
}
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <xQueueGenericCreateStatic+0x84>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <xQueueGenericCreateStatic+0x88>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <xQueueGenericCreateStatic+0x8a>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	61fb      	str	r3, [r7, #28]
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	e7fd      	b.n	80030de <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030e2:	2348      	movs	r3, #72	@ 0x48
 80030e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b48      	cmp	r3, #72	@ 0x48
 80030ea:	d00b      	beq.n	8003104 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	61bb      	str	r3, [r7, #24]
}
 80030fe:	bf00      	nop
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003104:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800310a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003118:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f840 	bl	80031ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800312e:	4618      	mov	r0, r3
 8003130:	3730      	adds	r7, #48	@ 0x30
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003136:	b580      	push	{r7, lr}
 8003138:	b08a      	sub	sp, #40	@ 0x28
 800313a:	af02      	add	r7, sp, #8
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	4613      	mov	r3, r2
 8003142:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <xQueueGenericCreate+0x2c>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	613b      	str	r3, [r7, #16]
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	e7fd      	b.n	800315e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3348      	adds	r3, #72	@ 0x48
 8003170:	4618      	mov	r0, r3
 8003172:	f001 ff03 	bl	8004f7c <pvPortMalloc>
 8003176:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3348      	adds	r3, #72	@ 0x48
 8003186:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003190:	79fa      	ldrb	r2, [r7, #7]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f805 	bl	80031ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031a2:	69bb      	ldr	r3, [r7, #24]
	}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d103      	bne.n	80031c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e002      	b.n	80031ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031da:	2101      	movs	r1, #1
 80031dc:	69b8      	ldr	r0, [r7, #24]
 80031de:	f7ff fec3 	bl	8002f68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08e      	sub	sp, #56	@ 0x38
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031fa:	2300      	movs	r3, #0
 80031fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <xQueueGenericSend+0x34>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <xQueueGenericSend+0x42>
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <xQueueGenericSend+0x46>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <xQueueGenericSend+0x48>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <xQueueGenericSend+0x64>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d103      	bne.n	800325e <xQueueGenericSend+0x72>
 8003256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <xQueueGenericSend+0x76>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <xQueueGenericSend+0x78>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <xQueueGenericSend+0x94>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	623b      	str	r3, [r7, #32]
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003280:	f001 fa06 	bl	8004690 <xTaskGetSchedulerState>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <xQueueGenericSend+0xa4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <xQueueGenericSend+0xa8>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <xQueueGenericSend+0xaa>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	61fb      	str	r3, [r7, #28]
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	e7fd      	b.n	80032ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032b2:	f001 fd41 	bl	8004d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <xQueueGenericSend+0xdc>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d129      	bne.n	800331c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032ce:	f000 fac9 	bl	8003864 <prvCopyDataToQueue>
 80032d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	3324      	adds	r3, #36	@ 0x24
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f80f 	bl	8004304 <xTaskRemoveFromEventList>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032ec:	4b3f      	ldr	r3, [pc, #252]	@ (80033ec <xQueueGenericSend+0x200>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	e00a      	b.n	8003314 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003304:	4b39      	ldr	r3, [pc, #228]	@ (80033ec <xQueueGenericSend+0x200>)
 8003306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003314:	f001 fd42 	bl	8004d9c <vPortExitCritical>
				return pdPASS;
 8003318:	2301      	movs	r3, #1
 800331a:	e063      	b.n	80033e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003322:	f001 fd3b 	bl	8004d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003326:	2300      	movs	r3, #0
 8003328:	e05c      	b.n	80033e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800332a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4618      	mov	r0, r3
 8003336:	f001 f849 	bl	80043cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800333a:	2301      	movs	r3, #1
 800333c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800333e:	f001 fd2d 	bl	8004d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003342:	f000 fdef 	bl	8003f24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003346:	f001 fcf7 	bl	8004d38 <vPortEnterCritical>
 800334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003350:	b25b      	sxtb	r3, r3
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d103      	bne.n	8003360 <xQueueGenericSend+0x174>
 8003358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003366:	b25b      	sxtb	r3, r3
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d103      	bne.n	8003376 <xQueueGenericSend+0x18a>
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003376:	f001 fd11 	bl	8004d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800337a:	1d3a      	adds	r2, r7, #4
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f001 f838 	bl	80043f8 <xTaskCheckForTimeOut>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d124      	bne.n	80033d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800338e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003390:	f000 fb60 	bl	8003a54 <prvIsQueueFull>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339c:	3310      	adds	r3, #16
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 ff88 	bl	80042b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033aa:	f000 faeb 	bl	8003984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033ae:	f000 fdc7 	bl	8003f40 <xTaskResumeAll>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f47f af7c 	bne.w	80032b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80033ba:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <xQueueGenericSend+0x200>)
 80033bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	e772      	b.n	80032b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ce:	f000 fad9 	bl	8003984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033d2:	f000 fdb5 	bl	8003f40 <xTaskResumeAll>
 80033d6:	e76c      	b.n	80032b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033da:	f000 fad3 	bl	8003984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033de:	f000 fdaf 	bl	8003f40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3738      	adds	r7, #56	@ 0x38
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	e000ed04 	.word	0xe000ed04

080033f0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08e      	sub	sp, #56	@ 0x38
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	623b      	str	r3, [r7, #32]
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800341c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	61fb      	str	r3, [r7, #28]
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800343c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <xQueueGiveFromISR+0x5c>
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <xQueueGiveFromISR+0x60>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <xQueueGiveFromISR+0x62>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	61bb      	str	r3, [r7, #24]
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	e7fd      	b.n	800346a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800346e:	f001 fd43 	bl	8004ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003472:	f3ef 8211 	mrs	r2, BASEPRI
 8003476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	617a      	str	r2, [r7, #20]
 8003488:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800348a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800349a:	429a      	cmp	r2, r3
 800349c:	d22b      	bcs.n	80034f6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d112      	bne.n	80034e0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	3324      	adds	r3, #36	@ 0x24
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 ff1c 	bl	8004304 <xTaskRemoveFromEventList>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00e      	beq.n	80034f0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e007      	b.n	80034f0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	b25a      	sxtb	r2, r3
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80034f0:	2301      	movs	r3, #1
 80034f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034f4:	e001      	b.n	80034fa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003504:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003508:	4618      	mov	r0, r3
 800350a:	3738      	adds	r7, #56	@ 0x38
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08e      	sub	sp, #56	@ 0x38
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003522:	2300      	movs	r3, #0
 8003524:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	623b      	str	r3, [r7, #32]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	61fb      	str	r3, [r7, #28]
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003564:	f001 f894 	bl	8004690 <xTaskGetSchedulerState>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <xQueueSemaphoreTake+0x64>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <xQueueSemaphoreTake+0x68>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <xQueueSemaphoreTake+0x6a>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	61bb      	str	r3, [r7, #24]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003596:	f001 fbcf 	bl	8004d38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d024      	beq.n	80035f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	1e5a      	subs	r2, r3, #1
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80035b6:	f001 fa17 	bl	80049e8 <pvTaskIncrementMutexHeldCount>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00f      	beq.n	80035e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ca:	3310      	adds	r3, #16
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fe99 	bl	8004304 <xTaskRemoveFromEventList>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035d8:	4b54      	ldr	r3, [pc, #336]	@ (800372c <xQueueSemaphoreTake+0x21c>)
 80035da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035e8:	f001 fbd8 	bl	8004d9c <vPortExitCritical>
				return pdPASS;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e098      	b.n	8003722 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d112      	bne.n	800361c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	617b      	str	r3, [r7, #20]
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003614:	f001 fbc2 	bl	8004d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003618:	2300      	movs	r3, #0
 800361a:	e082      	b.n	8003722 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003622:	f107 030c 	add.w	r3, r7, #12
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fed0 	bl	80043cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003630:	f001 fbb4 	bl	8004d9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003634:	f000 fc76 	bl	8003f24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003638:	f001 fb7e 	bl	8004d38 <vPortEnterCritical>
 800363c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003642:	b25b      	sxtb	r3, r3
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d103      	bne.n	8003652 <xQueueSemaphoreTake+0x142>
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003658:	b25b      	sxtb	r3, r3
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d103      	bne.n	8003668 <xQueueSemaphoreTake+0x158>
 8003660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003668:	f001 fb98 	bl	8004d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800366c:	463a      	mov	r2, r7
 800366e:	f107 030c 	add.w	r3, r7, #12
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f000 febf 	bl	80043f8 <xTaskCheckForTimeOut>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d132      	bne.n	80036e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003682:	f000 f9d1 	bl	8003a28 <prvIsQueueEmpty>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d026      	beq.n	80036da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003694:	f001 fb50 	bl	8004d38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f815 	bl	80046cc <xTaskPriorityInherit>
 80036a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80036a4:	f001 fb7a 	bl	8004d9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	3324      	adds	r3, #36	@ 0x24
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fe01 	bl	80042b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036b8:	f000 f964 	bl	8003984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036bc:	f000 fc40 	bl	8003f40 <xTaskResumeAll>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f47f af67 	bne.w	8003596 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80036c8:	4b18      	ldr	r3, [pc, #96]	@ (800372c <xQueueSemaphoreTake+0x21c>)
 80036ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	e75d      	b.n	8003596 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80036da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036dc:	f000 f952 	bl	8003984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036e0:	f000 fc2e 	bl	8003f40 <xTaskResumeAll>
 80036e4:	e757      	b.n	8003596 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80036e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036e8:	f000 f94c 	bl	8003984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036ec:	f000 fc28 	bl	8003f40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036f2:	f000 f999 	bl	8003a28 <prvIsQueueEmpty>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f43f af4c 	beq.w	8003596 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003704:	f001 fb18 	bl	8004d38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800370a:	f000 f893 	bl	8003834 <prvGetDisinheritPriorityAfterTimeout>
 800370e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f8d6 	bl	80048c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800371c:	f001 fb3e 	bl	8004d9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003722:	4618      	mov	r0, r3
 8003724:	3738      	adds	r7, #56	@ 0x38
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000ed04 	.word	0xe000ed04

08003730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08e      	sub	sp, #56	@ 0x38
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10b      	bne.n	800375e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	623b      	str	r3, [r7, #32]
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	e7fd      	b.n	800375a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <xQueueReceiveFromISR+0x3c>
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <xQueueReceiveFromISR+0x40>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <xQueueReceiveFromISR+0x42>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	61fb      	str	r3, [r7, #28]
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	e7fd      	b.n	800378a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800378e:	f001 fbb3 	bl	8004ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8003792:	f3ef 8211 	mrs	r2, BASEPRI
 8003796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	61ba      	str	r2, [r7, #24]
 80037a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80037aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d02f      	beq.n	800381a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037c8:	f000 f8b6 	bl	8003938 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	1e5a      	subs	r2, r3, #1
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80037d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d112      	bne.n	8003804 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	3310      	adds	r3, #16
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd8a 	bl	8004304 <xTaskRemoveFromEventList>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e007      	b.n	8003814 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003808:	3301      	adds	r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	b25a      	sxtb	r2, r3
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003814:	2301      	movs	r3, #1
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
 8003818:	e001      	b.n	800381e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800381a:	2300      	movs	r3, #0
 800381c:	637b      	str	r3, [r7, #52]	@ 0x34
 800381e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003820:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f383 8811 	msr	BASEPRI, r3
}
 8003828:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800382a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800382c:	4618      	mov	r0, r3
 800382e:	3738      	adds	r7, #56	@ 0x38
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f1c3 0307 	rsb	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e001      	b.n	8003856 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003856:	68fb      	ldr	r3, [r7, #12]
	}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d14d      	bne.n	8003926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 ff92 	bl	80047b8 <xTaskPriorityDisinherit>
 8003894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	e043      	b.n	8003926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d119      	bne.n	80038d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6858      	ldr	r0, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	461a      	mov	r2, r3
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	f001 ffcf 	bl	8005852 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	441a      	add	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d32b      	bcc.n	8003926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e026      	b.n	8003926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68d8      	ldr	r0, [r3, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	461a      	mov	r2, r3
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	f001 ffb5 	bl	8005852 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	425b      	negs	r3, r3
 80038f2:	441a      	add	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d207      	bcs.n	8003914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	425b      	negs	r3, r3
 800390e:	441a      	add	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d105      	bne.n	8003926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3b01      	subs	r3, #1
 8003924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800392e:	697b      	ldr	r3, [r7, #20]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	441a      	add	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	d303      	bcc.n	800396c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68d9      	ldr	r1, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	461a      	mov	r2, r3
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f001 ff6b 	bl	8005852 <memcpy>
	}
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800398c:	f001 f9d4 	bl	8004d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003998:	e011      	b.n	80039be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d012      	beq.n	80039c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3324      	adds	r3, #36	@ 0x24
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fcac 	bl	8004304 <xTaskRemoveFromEventList>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039b2:	f000 fd85 	bl	80044c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dce9      	bgt.n	800399a <prvUnlockQueue+0x16>
 80039c6:	e000      	b.n	80039ca <prvUnlockQueue+0x46>
					break;
 80039c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	22ff      	movs	r2, #255	@ 0xff
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80039d2:	f001 f9e3 	bl	8004d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039d6:	f001 f9af 	bl	8004d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039e2:	e011      	b.n	8003a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d012      	beq.n	8003a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3310      	adds	r3, #16
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fc87 	bl	8004304 <xTaskRemoveFromEventList>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039fc:	f000 fd60 	bl	80044c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a00:	7bbb      	ldrb	r3, [r7, #14]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	dce9      	bgt.n	80039e4 <prvUnlockQueue+0x60>
 8003a10:	e000      	b.n	8003a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	22ff      	movs	r2, #255	@ 0xff
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a1c:	f001 f9be 	bl	8004d9c <vPortExitCritical>
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a30:	f001 f982 	bl	8004d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e001      	b.n	8003a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a46:	f001 f9a9 	bl	8004d9c <vPortExitCritical>

	return xReturn;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a5c:	f001 f96c 	bl	8004d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d102      	bne.n	8003a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e001      	b.n	8003a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a76:	f001 f991 	bl	8004d9c <vPortExitCritical>

	return xReturn;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08e      	sub	sp, #56	@ 0x38
 8003a88:	af04      	add	r7, sp, #16
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	623b      	str	r3, [r7, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	61fb      	str	r3, [r7, #28]
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	e7fd      	b.n	8003aca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ace:	23a0      	movs	r3, #160	@ 0xa0
 8003ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ad6:	d00b      	beq.n	8003af0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61bb      	str	r3, [r7, #24]
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	e7fd      	b.n	8003aec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003af0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01e      	beq.n	8003b36 <xTaskCreateStatic+0xb2>
 8003af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01b      	beq.n	8003b36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b10:	2300      	movs	r3, #0
 8003b12:	9303      	str	r3, [sp, #12]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	9302      	str	r3, [sp, #8]
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f851 	bl	8003bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b30:	f000 f8ee 	bl	8003d10 <prvAddNewTaskToReadyList>
 8003b34:	e001      	b.n	8003b3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b3a:	697b      	ldr	r3, [r7, #20]
	}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3728      	adds	r7, #40	@ 0x28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08c      	sub	sp, #48	@ 0x30
 8003b48:	af04      	add	r7, sp, #16
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	4613      	mov	r3, r2
 8003b52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 fa0f 	bl	8004f7c <pvPortMalloc>
 8003b5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b66:	20a0      	movs	r0, #160	@ 0xa0
 8003b68:	f001 fa08 	bl	8004f7c <pvPortMalloc>
 8003b6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b7a:	e005      	b.n	8003b88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f001 facb 	bl	8005118 <vPortFree>
 8003b82:	e001      	b.n	8003b88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9303      	str	r3, [sp, #12]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	9302      	str	r3, [sp, #8]
 8003ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f80f 	bl	8003bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bb2:	69f8      	ldr	r0, [r7, #28]
 8003bb4:	f000 f8ac 	bl	8003d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	e002      	b.n	8003bc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
	}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003be8:	3b01      	subs	r3, #1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f023 0307 	bic.w	r3, r3, #7
 8003bf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	617b      	str	r3, [r7, #20]
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01f      	beq.n	8003c60 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	e012      	b.n	8003c4c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	7819      	ldrb	r1, [r3, #0]
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	4413      	add	r3, r2
 8003c34:	3334      	adds	r3, #52	@ 0x34
 8003c36:	460a      	mov	r2, r1
 8003c38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	d9e9      	bls.n	8003c26 <prvInitialiseNewTask+0x56>
 8003c52:	e000      	b.n	8003c56 <prvInitialiseNewTask+0x86>
			{
				break;
 8003c54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c5e:	e003      	b.n	8003c68 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d901      	bls.n	8003c72 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c6e:	2306      	movs	r3, #6
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c7c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	3304      	adds	r3, #4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff f8d9 	bl	8002e40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	3318      	adds	r3, #24
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff f8d4 	bl	8002e40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	f1c3 0207 	rsb	r2, r3, #7
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	334c      	adds	r3, #76	@ 0x4c
 8003cc2:	224c      	movs	r2, #76	@ 0x4c
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 fcf2 	bl	80056b0 <memset>
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	4a0d      	ldr	r2, [pc, #52]	@ (8003d04 <prvInitialiseNewTask+0x134>)
 8003cd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003d08 <prvInitialiseNewTask+0x138>)
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	4a0c      	ldr	r2, [pc, #48]	@ (8003d0c <prvInitialiseNewTask+0x13c>)
 8003cdc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	69b8      	ldr	r0, [r7, #24]
 8003ce4:	f000 fefa 	bl	8004adc <pxPortInitialiseStack>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cfa:	bf00      	nop
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20004138 	.word	0x20004138
 8003d08:	200041a0 	.word	0x200041a0
 8003d0c:	20004208 	.word	0x20004208

08003d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d18:	f001 f80e 	bl	8004d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <prvAddNewTaskToReadyList+0xb8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	4a29      	ldr	r2, [pc, #164]	@ (8003dc8 <prvAddNewTaskToReadyList+0xb8>)
 8003d24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d26:	4b29      	ldr	r3, [pc, #164]	@ (8003dcc <prvAddNewTaskToReadyList+0xbc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d2e:	4a27      	ldr	r2, [pc, #156]	@ (8003dcc <prvAddNewTaskToReadyList+0xbc>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d34:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <prvAddNewTaskToReadyList+0xb8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d110      	bne.n	8003d5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d3c:	f000 fbe4 	bl	8004508 <prvInitialiseTaskLists>
 8003d40:	e00d      	b.n	8003d5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d42:	4b23      	ldr	r3, [pc, #140]	@ (8003dd0 <prvAddNewTaskToReadyList+0xc0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d4a:	4b20      	ldr	r3, [pc, #128]	@ (8003dcc <prvAddNewTaskToReadyList+0xbc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d802      	bhi.n	8003d5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d58:	4a1c      	ldr	r2, [pc, #112]	@ (8003dcc <prvAddNewTaskToReadyList+0xbc>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <prvAddNewTaskToReadyList+0xc4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd4 <prvAddNewTaskToReadyList+0xc4>)
 8003d66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <prvAddNewTaskToReadyList+0xc8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	4a18      	ldr	r2, [pc, #96]	@ (8003dd8 <prvAddNewTaskToReadyList+0xc8>)
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4a15      	ldr	r2, [pc, #84]	@ (8003ddc <prvAddNewTaskToReadyList+0xcc>)
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4610      	mov	r0, r2
 8003d92:	f7ff f862 	bl	8002e5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d96:	f001 f801 	bl	8004d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <prvAddNewTaskToReadyList+0xc0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003da2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <prvAddNewTaskToReadyList+0xbc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d207      	bcs.n	8003dc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <prvAddNewTaskToReadyList+0xd0>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200004e4 	.word	0x200004e4
 8003dcc:	200003e4 	.word	0x200003e4
 8003dd0:	200004f0 	.word	0x200004f0
 8003dd4:	20000500 	.word	0x20000500
 8003dd8:	200004ec 	.word	0x200004ec
 8003ddc:	200003e8 	.word	0x200003e8
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d018      	beq.n	8003e28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003df6:	4b14      	ldr	r3, [pc, #80]	@ (8003e48 <vTaskDelay+0x64>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <vTaskDelay+0x32>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	60bb      	str	r3, [r7, #8]
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e16:	f000 f885 	bl	8003f24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fdf7 	bl	8004a10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e22:	f000 f88d 	bl	8003f40 <xTaskResumeAll>
 8003e26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d107      	bne.n	8003e3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e2e:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <vTaskDelay+0x68>)
 8003e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	2000050c 	.word	0x2000050c
 8003e4c:	e000ed04 	.word	0xe000ed04

08003e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	@ 0x28
 8003e54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e5e:	463a      	mov	r2, r7
 8003e60:	1d39      	adds	r1, r7, #4
 8003e62:	f107 0308 	add.w	r3, r7, #8
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc fb82 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	9202      	str	r2, [sp, #8]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	2300      	movs	r3, #0
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	460a      	mov	r2, r1
 8003e7e:	4921      	ldr	r1, [pc, #132]	@ (8003f04 <vTaskStartScheduler+0xb4>)
 8003e80:	4821      	ldr	r0, [pc, #132]	@ (8003f08 <vTaskStartScheduler+0xb8>)
 8003e82:	f7ff fdff 	bl	8003a84 <xTaskCreateStatic>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4a20      	ldr	r2, [pc, #128]	@ (8003f0c <vTaskStartScheduler+0xbc>)
 8003e8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <vTaskStartScheduler+0xbc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e94:	2301      	movs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e001      	b.n	8003e9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d11b      	bne.n	8003edc <vTaskStartScheduler+0x8c>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	613b      	str	r3, [r7, #16]
}
 8003eb6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003eb8:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <vTaskStartScheduler+0xc0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	334c      	adds	r3, #76	@ 0x4c
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <vTaskStartScheduler+0xc4>)
 8003ec0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ec2:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <vTaskStartScheduler+0xc8>)
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003eca:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <vTaskStartScheduler+0xcc>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ed0:	4b13      	ldr	r3, [pc, #76]	@ (8003f20 <vTaskStartScheduler+0xd0>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ed6:	f000 fe8b 	bl	8004bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003eda:	e00f      	b.n	8003efc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d10b      	bne.n	8003efc <vTaskStartScheduler+0xac>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	60fb      	str	r3, [r7, #12]
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <vTaskStartScheduler+0xa8>
}
 8003efc:	bf00      	nop
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	080063d0 	.word	0x080063d0
 8003f08:	080044d9 	.word	0x080044d9
 8003f0c:	20000508 	.word	0x20000508
 8003f10:	200003e4 	.word	0x200003e4
 8003f14:	20000020 	.word	0x20000020
 8003f18:	20000504 	.word	0x20000504
 8003f1c:	200004f0 	.word	0x200004f0
 8003f20:	200004e8 	.word	0x200004e8

08003f24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f28:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <vTaskSuspendAll+0x18>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	4a03      	ldr	r2, [pc, #12]	@ (8003f3c <vTaskSuspendAll+0x18>)
 8003f30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f32:	bf00      	nop
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	2000050c 	.word	0x2000050c

08003f40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f4e:	4b42      	ldr	r3, [pc, #264]	@ (8004058 <xTaskResumeAll+0x118>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <xTaskResumeAll+0x2e>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	603b      	str	r3, [r7, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	e7fd      	b.n	8003f6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f6e:	f000 fee3 	bl	8004d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f72:	4b39      	ldr	r3, [pc, #228]	@ (8004058 <xTaskResumeAll+0x118>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	4a37      	ldr	r2, [pc, #220]	@ (8004058 <xTaskResumeAll+0x118>)
 8003f7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f7c:	4b36      	ldr	r3, [pc, #216]	@ (8004058 <xTaskResumeAll+0x118>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d161      	bne.n	8004048 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f84:	4b35      	ldr	r3, [pc, #212]	@ (800405c <xTaskResumeAll+0x11c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d05d      	beq.n	8004048 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f8c:	e02e      	b.n	8003fec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f8e:	4b34      	ldr	r3, [pc, #208]	@ (8004060 <xTaskResumeAll+0x120>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3318      	adds	r3, #24
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe ffba 	bl	8002f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe ffb5 	bl	8002f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	2201      	movs	r2, #1
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8004064 <xTaskResumeAll+0x124>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8004064 <xTaskResumeAll+0x124>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4a27      	ldr	r2, [pc, #156]	@ (8004068 <xTaskResumeAll+0x128>)
 8003fca:	441a      	add	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7fe ff41 	bl	8002e5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fdc:	4b23      	ldr	r3, [pc, #140]	@ (800406c <xTaskResumeAll+0x12c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003fe6:	4b22      	ldr	r3, [pc, #136]	@ (8004070 <xTaskResumeAll+0x130>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fec:	4b1c      	ldr	r3, [pc, #112]	@ (8004060 <xTaskResumeAll+0x120>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1cc      	bne.n	8003f8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ffa:	f000 fb29 	bl	8004650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <xTaskResumeAll+0x134>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800400a:	f000 f837 	bl	800407c <xTaskIncrementTick>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004014:	4b16      	ldr	r3, [pc, #88]	@ (8004070 <xTaskResumeAll+0x130>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3b01      	subs	r3, #1
 800401e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f1      	bne.n	800400a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004026:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <xTaskResumeAll+0x134>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800402c:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <xTaskResumeAll+0x130>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004038:	4b0f      	ldr	r3, [pc, #60]	@ (8004078 <xTaskResumeAll+0x138>)
 800403a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004048:	f000 fea8 	bl	8004d9c <vPortExitCritical>

	return xAlreadyYielded;
 800404c:	68bb      	ldr	r3, [r7, #8]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	2000050c 	.word	0x2000050c
 800405c:	200004e4 	.word	0x200004e4
 8004060:	200004a4 	.word	0x200004a4
 8004064:	200004ec 	.word	0x200004ec
 8004068:	200003e8 	.word	0x200003e8
 800406c:	200003e4 	.word	0x200003e4
 8004070:	200004f8 	.word	0x200004f8
 8004074:	200004f4 	.word	0x200004f4
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004086:	4b4f      	ldr	r3, [pc, #316]	@ (80041c4 <xTaskIncrementTick+0x148>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 808f 	bne.w	80041ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004090:	4b4d      	ldr	r3, [pc, #308]	@ (80041c8 <xTaskIncrementTick+0x14c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004098:	4a4b      	ldr	r2, [pc, #300]	@ (80041c8 <xTaskIncrementTick+0x14c>)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d121      	bne.n	80040e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040a4:	4b49      	ldr	r3, [pc, #292]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	603b      	str	r3, [r7, #0]
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <xTaskIncrementTick+0x46>
 80040c6:	4b41      	ldr	r3, [pc, #260]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	4b40      	ldr	r3, [pc, #256]	@ (80041d0 <xTaskIncrementTick+0x154>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a3e      	ldr	r2, [pc, #248]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4a3e      	ldr	r2, [pc, #248]	@ (80041d0 <xTaskIncrementTick+0x154>)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b3e      	ldr	r3, [pc, #248]	@ (80041d4 <xTaskIncrementTick+0x158>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	4a3c      	ldr	r2, [pc, #240]	@ (80041d4 <xTaskIncrementTick+0x158>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	f000 fab4 	bl	8004650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040e8:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d348      	bcc.n	8004184 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f2:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fc:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	601a      	str	r2, [r3, #0]
					break;
 8004104:	e03e      	b.n	8004184 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004106:	4b31      	ldr	r3, [pc, #196]	@ (80041cc <xTaskIncrementTick+0x150>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d203      	bcs.n	8004126 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800411e:	4a2e      	ldr	r2, [pc, #184]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004124:	e02e      	b.n	8004184 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fef2 	bl	8002f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	3318      	adds	r3, #24
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe fee9 	bl	8002f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	2201      	movs	r2, #1
 8004148:	409a      	lsls	r2, r3
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <xTaskIncrementTick+0x160>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	4a22      	ldr	r2, [pc, #136]	@ (80041dc <xTaskIncrementTick+0x160>)
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4a1f      	ldr	r2, [pc, #124]	@ (80041e0 <xTaskIncrementTick+0x164>)
 8004162:	441a      	add	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fe fe75 	bl	8002e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004174:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <xTaskIncrementTick+0x168>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d3b9      	bcc.n	80040f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004182:	e7b6      	b.n	80040f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004184:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <xTaskIncrementTick+0x168>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	4915      	ldr	r1, [pc, #84]	@ (80041e0 <xTaskIncrementTick+0x164>)
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d901      	bls.n	80041a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <xTaskIncrementTick+0x16c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e004      	b.n	80041b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041ae:	4b0f      	ldr	r3, [pc, #60]	@ (80041ec <xTaskIncrementTick+0x170>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	4a0d      	ldr	r2, [pc, #52]	@ (80041ec <xTaskIncrementTick+0x170>)
 80041b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041b8:	697b      	ldr	r3, [r7, #20]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	2000050c 	.word	0x2000050c
 80041c8:	200004e8 	.word	0x200004e8
 80041cc:	2000049c 	.word	0x2000049c
 80041d0:	200004a0 	.word	0x200004a0
 80041d4:	200004fc 	.word	0x200004fc
 80041d8:	20000504 	.word	0x20000504
 80041dc:	200004ec 	.word	0x200004ec
 80041e0:	200003e8 	.word	0x200003e8
 80041e4:	200003e4 	.word	0x200003e4
 80041e8:	200004f8 	.word	0x200004f8
 80041ec:	200004f4 	.word	0x200004f4

080041f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041f6:	4b2a      	ldr	r3, [pc, #168]	@ (80042a0 <vTaskSwitchContext+0xb0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041fe:	4b29      	ldr	r3, [pc, #164]	@ (80042a4 <vTaskSwitchContext+0xb4>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004204:	e045      	b.n	8004292 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004206:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <vTaskSwitchContext+0xb4>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	4b26      	ldr	r3, [pc, #152]	@ (80042a8 <vTaskSwitchContext+0xb8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800421a:	7afb      	ldrb	r3, [r7, #11]
 800421c:	f1c3 031f 	rsb	r3, r3, #31
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	4922      	ldr	r1, [pc, #136]	@ (80042ac <vTaskSwitchContext+0xbc>)
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	607b      	str	r3, [r7, #4]
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	e7fd      	b.n	800424a <vTaskSwitchContext+0x5a>
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4a14      	ldr	r2, [pc, #80]	@ (80042ac <vTaskSwitchContext+0xbc>)
 800425a:	4413      	add	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	3308      	adds	r3, #8
 8004270:	429a      	cmp	r2, r3
 8004272:	d104      	bne.n	800427e <vTaskSwitchContext+0x8e>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a0a      	ldr	r2, [pc, #40]	@ (80042b0 <vTaskSwitchContext+0xc0>)
 8004286:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <vTaskSwitchContext+0xc0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	334c      	adds	r3, #76	@ 0x4c
 800428e:	4a09      	ldr	r2, [pc, #36]	@ (80042b4 <vTaskSwitchContext+0xc4>)
 8004290:	6013      	str	r3, [r2, #0]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	2000050c 	.word	0x2000050c
 80042a4:	200004f8 	.word	0x200004f8
 80042a8:	200004ec 	.word	0x200004ec
 80042ac:	200003e8 	.word	0x200003e8
 80042b0:	200003e4 	.word	0x200003e4
 80042b4:	20000020 	.word	0x20000020

080042b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	60fb      	str	r3, [r7, #12]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042e0:	4b07      	ldr	r3, [pc, #28]	@ (8004300 <vTaskPlaceOnEventList+0x48>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3318      	adds	r3, #24
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7fe fdda 	bl	8002ea2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ee:	2101      	movs	r1, #1
 80042f0:	6838      	ldr	r0, [r7, #0]
 80042f2:	f000 fb8d 	bl	8004a10 <prvAddCurrentTaskToDelayedList>
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200003e4 	.word	0x200003e4

08004304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60fb      	str	r3, [r7, #12]
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	e7fd      	b.n	800432e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3318      	adds	r3, #24
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fdec 	bl	8002f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433c:	4b1d      	ldr	r3, [pc, #116]	@ (80043b4 <xTaskRemoveFromEventList+0xb0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11c      	bne.n	800437e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fde3 	bl	8002f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	2201      	movs	r2, #1
 8004354:	409a      	lsls	r2, r3
 8004356:	4b18      	ldr	r3, [pc, #96]	@ (80043b8 <xTaskRemoveFromEventList+0xb4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	4a16      	ldr	r2, [pc, #88]	@ (80043b8 <xTaskRemoveFromEventList+0xb4>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4a13      	ldr	r2, [pc, #76]	@ (80043bc <xTaskRemoveFromEventList+0xb8>)
 800436e:	441a      	add	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fe fd6f 	bl	8002e5a <vListInsertEnd>
 800437c:	e005      	b.n	800438a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	3318      	adds	r3, #24
 8004382:	4619      	mov	r1, r3
 8004384:	480e      	ldr	r0, [pc, #56]	@ (80043c0 <xTaskRemoveFromEventList+0xbc>)
 8004386:	f7fe fd68 	bl	8002e5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <xTaskRemoveFromEventList+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d905      	bls.n	80043a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800439c:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <xTaskRemoveFromEventList+0xc4>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e001      	b.n	80043a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043a8:	697b      	ldr	r3, [r7, #20]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	2000050c 	.word	0x2000050c
 80043b8:	200004ec 	.word	0x200004ec
 80043bc:	200003e8 	.word	0x200003e8
 80043c0:	200004a4 	.word	0x200004a4
 80043c4:	200003e4 	.word	0x200003e4
 80043c8:	200004f8 	.word	0x200004f8

080043cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043d4:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <vTaskInternalSetTimeOutState+0x24>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043dc:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <vTaskInternalSetTimeOutState+0x28>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	605a      	str	r2, [r3, #4]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	200004fc 	.word	0x200004fc
 80043f4:	200004e8 	.word	0x200004e8

080043f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	613b      	str	r3, [r7, #16]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60fb      	str	r3, [r7, #12]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800443e:	f000 fc7b 	bl	8004d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004442:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <xTaskCheckForTimeOut+0xc0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d102      	bne.n	8004462 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800445c:	2300      	movs	r3, #0
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e023      	b.n	80044aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <xTaskCheckForTimeOut+0xc4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d007      	beq.n	800447e <xTaskCheckForTimeOut+0x86>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004478:	2301      	movs	r3, #1
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e015      	b.n	80044aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	429a      	cmp	r2, r3
 8004486:	d20b      	bcs.n	80044a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff ff99 	bl	80043cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	e004      	b.n	80044aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044aa:	f000 fc77 	bl	8004d9c <vPortExitCritical>

	return xReturn;
 80044ae:	69fb      	ldr	r3, [r7, #28]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	200004e8 	.word	0x200004e8
 80044bc:	200004fc 	.word	0x200004fc

080044c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044c4:	4b03      	ldr	r3, [pc, #12]	@ (80044d4 <vTaskMissedYield+0x14>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
}
 80044ca:	bf00      	nop
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	200004f8 	.word	0x200004f8

080044d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044e0:	f000 f852 	bl	8004588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044e4:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <prvIdleTask+0x28>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d9f9      	bls.n	80044e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044ec:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <prvIdleTask+0x2c>)
 80044ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044fc:	e7f0      	b.n	80044e0 <prvIdleTask+0x8>
 80044fe:	bf00      	nop
 8004500:	200003e8 	.word	0x200003e8
 8004504:	e000ed04 	.word	0xe000ed04

08004508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	e00c      	b.n	800452e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4a12      	ldr	r2, [pc, #72]	@ (8004568 <prvInitialiseTaskLists+0x60>)
 8004520:	4413      	add	r3, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe fc6c 	bl	8002e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3301      	adds	r3, #1
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b06      	cmp	r3, #6
 8004532:	d9ef      	bls.n	8004514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004534:	480d      	ldr	r0, [pc, #52]	@ (800456c <prvInitialiseTaskLists+0x64>)
 8004536:	f7fe fc63 	bl	8002e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800453a:	480d      	ldr	r0, [pc, #52]	@ (8004570 <prvInitialiseTaskLists+0x68>)
 800453c:	f7fe fc60 	bl	8002e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004540:	480c      	ldr	r0, [pc, #48]	@ (8004574 <prvInitialiseTaskLists+0x6c>)
 8004542:	f7fe fc5d 	bl	8002e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004546:	480c      	ldr	r0, [pc, #48]	@ (8004578 <prvInitialiseTaskLists+0x70>)
 8004548:	f7fe fc5a 	bl	8002e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800454c:	480b      	ldr	r0, [pc, #44]	@ (800457c <prvInitialiseTaskLists+0x74>)
 800454e:	f7fe fc57 	bl	8002e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004552:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <prvInitialiseTaskLists+0x78>)
 8004554:	4a05      	ldr	r2, [pc, #20]	@ (800456c <prvInitialiseTaskLists+0x64>)
 8004556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004558:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <prvInitialiseTaskLists+0x7c>)
 800455a:	4a05      	ldr	r2, [pc, #20]	@ (8004570 <prvInitialiseTaskLists+0x68>)
 800455c:	601a      	str	r2, [r3, #0]
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	200003e8 	.word	0x200003e8
 800456c:	20000474 	.word	0x20000474
 8004570:	20000488 	.word	0x20000488
 8004574:	200004a4 	.word	0x200004a4
 8004578:	200004b8 	.word	0x200004b8
 800457c:	200004d0 	.word	0x200004d0
 8004580:	2000049c 	.word	0x2000049c
 8004584:	200004a0 	.word	0x200004a0

08004588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800458e:	e019      	b.n	80045c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004590:	f000 fbd2 	bl	8004d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004594:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <prvCheckTasksWaitingTermination+0x50>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fcb7 	bl	8002f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045a6:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <prvCheckTasksWaitingTermination+0x54>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	4a0b      	ldr	r2, [pc, #44]	@ (80045dc <prvCheckTasksWaitingTermination+0x54>)
 80045ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <prvCheckTasksWaitingTermination+0x58>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4a0a      	ldr	r2, [pc, #40]	@ (80045e0 <prvCheckTasksWaitingTermination+0x58>)
 80045b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045ba:	f000 fbef 	bl	8004d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f810 	bl	80045e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045c4:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <prvCheckTasksWaitingTermination+0x58>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e1      	bne.n	8004590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200004b8 	.word	0x200004b8
 80045dc:	200004e4 	.word	0x200004e4
 80045e0:	200004cc 	.word	0x200004cc

080045e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	334c      	adds	r3, #76	@ 0x4c
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 f875 	bl	80056e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fd87 	bl	8005118 <vPortFree>
				vPortFree( pxTCB );
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fd84 	bl	8005118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004610:	e019      	b.n	8004646 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004618:	2b01      	cmp	r3, #1
 800461a:	d103      	bne.n	8004624 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fd7b 	bl	8005118 <vPortFree>
	}
 8004622:	e010      	b.n	8004646 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800462a:	2b02      	cmp	r3, #2
 800462c:	d00b      	beq.n	8004646 <prvDeleteTCB+0x62>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60fb      	str	r3, [r7, #12]
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <prvDeleteTCB+0x5e>
	}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004656:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <prvResetNextTaskUnblockTime+0x38>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004660:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <prvResetNextTaskUnblockTime+0x3c>)
 8004662:	f04f 32ff 	mov.w	r2, #4294967295
 8004666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004668:	e008      	b.n	800467c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466a:	4b07      	ldr	r3, [pc, #28]	@ (8004688 <prvResetNextTaskUnblockTime+0x38>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a04      	ldr	r2, [pc, #16]	@ (800468c <prvResetNextTaskUnblockTime+0x3c>)
 800467a:	6013      	str	r3, [r2, #0]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	2000049c 	.word	0x2000049c
 800468c:	20000504 	.word	0x20000504

08004690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <xTaskGetSchedulerState+0x34>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800469e:	2301      	movs	r3, #1
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	e008      	b.n	80046b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046a4:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <xTaskGetSchedulerState+0x38>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046ac:	2302      	movs	r3, #2
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	e001      	b.n	80046b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046b6:	687b      	ldr	r3, [r7, #4]
	}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	200004f0 	.word	0x200004f0
 80046c8:	2000050c 	.word	0x2000050c

080046cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d05e      	beq.n	80047a0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e6:	4b31      	ldr	r3, [pc, #196]	@ (80047ac <xTaskPriorityInherit+0xe0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d24e      	bcs.n	800478e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	db06      	blt.n	8004706 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f8:	4b2c      	ldr	r3, [pc, #176]	@ (80047ac <xTaskPriorityInherit+0xe0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	f1c3 0207 	rsb	r2, r3, #7
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6959      	ldr	r1, [r3, #20]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <xTaskPriorityInherit+0xe4>)
 8004718:	4413      	add	r3, r2
 800471a:	4299      	cmp	r1, r3
 800471c:	d12f      	bne.n	800477e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fbf6 	bl	8002f14 <uxListRemove>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	2201      	movs	r2, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43da      	mvns	r2, r3
 800473a:	4b1e      	ldr	r3, [pc, #120]	@ (80047b4 <xTaskPriorityInherit+0xe8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4013      	ands	r3, r2
 8004740:	4a1c      	ldr	r2, [pc, #112]	@ (80047b4 <xTaskPriorityInherit+0xe8>)
 8004742:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <xTaskPriorityInherit+0xe0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	2201      	movs	r2, #1
 8004754:	409a      	lsls	r2, r3
 8004756:	4b17      	ldr	r3, [pc, #92]	@ (80047b4 <xTaskPriorityInherit+0xe8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	4a15      	ldr	r2, [pc, #84]	@ (80047b4 <xTaskPriorityInherit+0xe8>)
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4a10      	ldr	r2, [pc, #64]	@ (80047b0 <xTaskPriorityInherit+0xe4>)
 800476e:	441a      	add	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7fe fb6f 	bl	8002e5a <vListInsertEnd>
 800477c:	e004      	b.n	8004788 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <xTaskPriorityInherit+0xe0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004788:	2301      	movs	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e008      	b.n	80047a0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004792:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <xTaskPriorityInherit+0xe0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	429a      	cmp	r2, r3
 800479a:	d201      	bcs.n	80047a0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800479c:	2301      	movs	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047a0:	68fb      	ldr	r3, [r7, #12]
	}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200003e4 	.word	0x200003e4
 80047b0:	200003e8 	.word	0x200003e8
 80047b4:	200004ec 	.word	0x200004ec

080047b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d070      	beq.n	80048b0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047ce:	4b3b      	ldr	r3, [pc, #236]	@ (80048bc <xTaskPriorityDisinherit+0x104>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d00b      	beq.n	80047f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	60bb      	str	r3, [r7, #8]
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	e7fd      	b.n	800480c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004814:	1e5a      	subs	r2, r3, #1
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	429a      	cmp	r2, r3
 8004824:	d044      	beq.n	80048b0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800482a:	2b00      	cmp	r3, #0
 800482c:	d140      	bne.n	80048b0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fb6e 	bl	8002f14 <uxListRemove>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d115      	bne.n	800486a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004842:	491f      	ldr	r1, [pc, #124]	@ (80048c0 <xTaskPriorityDisinherit+0x108>)
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <xTaskPriorityDisinherit+0xb2>
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	2201      	movs	r2, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43da      	mvns	r2, r3
 8004860:	4b18      	ldr	r3, [pc, #96]	@ (80048c4 <xTaskPriorityDisinherit+0x10c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4013      	ands	r3, r2
 8004866:	4a17      	ldr	r2, [pc, #92]	@ (80048c4 <xTaskPriorityDisinherit+0x10c>)
 8004868:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	f1c3 0207 	rsb	r2, r3, #7
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	2201      	movs	r2, #1
 8004884:	409a      	lsls	r2, r3
 8004886:	4b0f      	ldr	r3, [pc, #60]	@ (80048c4 <xTaskPriorityDisinherit+0x10c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	4a0d      	ldr	r2, [pc, #52]	@ (80048c4 <xTaskPriorityDisinherit+0x10c>)
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4a08      	ldr	r2, [pc, #32]	@ (80048c0 <xTaskPriorityDisinherit+0x108>)
 800489e:	441a      	add	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f7fe fad7 	bl	8002e5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048b0:	697b      	ldr	r3, [r7, #20]
	}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200003e4 	.word	0x200003e4
 80048c0:	200003e8 	.word	0x200003e8
 80048c4:	200004ec 	.word	0x200004ec

080048c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d079      	beq.n	80049d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60fb      	str	r3, [r7, #12]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d902      	bls.n	8004910 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e002      	b.n	8004916 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004914:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	429a      	cmp	r2, r3
 800491e:	d059      	beq.n	80049d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	429a      	cmp	r2, r3
 8004928:	d154      	bne.n	80049d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800492a:	4b2c      	ldr	r3, [pc, #176]	@ (80049dc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d10b      	bne.n	800494c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	60bb      	str	r3, [r7, #8]
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	db04      	blt.n	800496a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f1c3 0207 	rsb	r2, r3, #7
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	6959      	ldr	r1, [r3, #20]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4a19      	ldr	r2, [pc, #100]	@ (80049e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800497a:	4413      	add	r3, r2
 800497c:	4299      	cmp	r1, r3
 800497e:	d129      	bne.n	80049d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fac5 	bl	8002f14 <uxListRemove>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	2201      	movs	r2, #1
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43da      	mvns	r2, r3
 800499c:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4013      	ands	r3, r2
 80049a2:	4a10      	ldr	r2, [pc, #64]	@ (80049e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	2201      	movs	r2, #1
 80049ac:	409a      	lsls	r2, r3
 80049ae:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	4a0b      	ldr	r2, [pc, #44]	@ (80049e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4a06      	ldr	r2, [pc, #24]	@ (80049e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049c6:	441a      	add	r2, r3
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f7fe fa43 	bl	8002e5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049d4:	bf00      	nop
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	200003e4 	.word	0x200003e4
 80049e0:	200003e8 	.word	0x200003e8
 80049e4:	200004ec 	.word	0x200004ec

080049e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80049ec:	4b07      	ldr	r3, [pc, #28]	@ (8004a0c <pvTaskIncrementMutexHeldCount+0x24>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <pvTaskIncrementMutexHeldCount+0x24>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049fa:	3201      	adds	r2, #1
 80049fc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80049fe:	4b03      	ldr	r3, [pc, #12]	@ (8004a0c <pvTaskIncrementMutexHeldCount+0x24>)
 8004a00:	681b      	ldr	r3, [r3, #0]
	}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	200003e4 	.word	0x200003e4

08004a10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a20:	4b28      	ldr	r3, [pc, #160]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe fa74 	bl	8002f14 <uxListRemove>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a32:	4b24      	ldr	r3, [pc, #144]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	2201      	movs	r2, #1
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	4b21      	ldr	r3, [pc, #132]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4013      	ands	r3, r2
 8004a46:	4a20      	ldr	r2, [pc, #128]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d10a      	bne.n	8004a68 <prvAddCurrentTaskToDelayedList+0x58>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a58:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4619      	mov	r1, r3
 8004a60:	481a      	ldr	r0, [pc, #104]	@ (8004acc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a62:	f7fe f9fa 	bl	8002e5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a66:	e026      	b.n	8004ab6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a70:	4b14      	ldr	r3, [pc, #80]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d209      	bcs.n	8004a94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a80:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7fe fa08 	bl	8002ea2 <vListInsert>
}
 8004a92:	e010      	b.n	8004ab6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a94:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f7fe f9fe 	bl	8002ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d202      	bcs.n	8004ab6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ab0:	4a09      	ldr	r2, [pc, #36]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6013      	str	r3, [r2, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	200004e8 	.word	0x200004e8
 8004ac4:	200003e4 	.word	0x200003e4
 8004ac8:	200004ec 	.word	0x200004ec
 8004acc:	200004d0 	.word	0x200004d0
 8004ad0:	200004a0 	.word	0x200004a0
 8004ad4:	2000049c 	.word	0x2000049c
 8004ad8:	20000504 	.word	0x20000504

08004adc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3b04      	subs	r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b04      	subs	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b40 <pxPortInitialiseStack+0x64>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3b14      	subs	r3, #20
 8004b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b04      	subs	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f06f 0202 	mvn.w	r2, #2
 8004b2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3b20      	subs	r3, #32
 8004b30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	08004b45 	.word	0x08004b45

08004b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b4e:	4b13      	ldr	r3, [pc, #76]	@ (8004b9c <prvTaskExitError+0x58>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d00b      	beq.n	8004b70 <prvTaskExitError+0x2c>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	60fb      	str	r3, [r7, #12]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <prvTaskExitError+0x28>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60bb      	str	r3, [r7, #8]
}
 8004b82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b84:	bf00      	nop
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0fc      	beq.n	8004b86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000010 	.word	0x20000010

08004ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ba0:	4b07      	ldr	r3, [pc, #28]	@ (8004bc0 <pxCurrentTCBConst2>)
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	f380 8809 	msr	PSP, r0
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	4770      	bx	lr
 8004bbc:	f3af 8000 	nop.w

08004bc0 <pxCurrentTCBConst2>:
 8004bc0:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bc8:	4808      	ldr	r0, [pc, #32]	@ (8004bec <prvPortStartFirstTask+0x24>)
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	6800      	ldr	r0, [r0, #0]
 8004bce:	f380 8808 	msr	MSP, r0
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8814 	msr	CONTROL, r0
 8004bda:	b662      	cpsie	i
 8004bdc:	b661      	cpsie	f
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	df00      	svc	0
 8004be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bea:	bf00      	nop
 8004bec:	e000ed08 	.word	0xe000ed08

08004bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bf6:	4b47      	ldr	r3, [pc, #284]	@ (8004d14 <xPortStartScheduler+0x124>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a47      	ldr	r2, [pc, #284]	@ (8004d18 <xPortStartScheduler+0x128>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10b      	bne.n	8004c18 <xPortStartScheduler+0x28>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
 8004c14:	bf00      	nop
 8004c16:	e7fd      	b.n	8004c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c18:	4b3e      	ldr	r3, [pc, #248]	@ (8004d14 <xPortStartScheduler+0x124>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d1c <xPortStartScheduler+0x12c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10b      	bne.n	8004c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60fb      	str	r3, [r7, #12]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c3a:	4b39      	ldr	r3, [pc, #228]	@ (8004d20 <xPortStartScheduler+0x130>)
 8004c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	22ff      	movs	r2, #255	@ 0xff
 8004c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4b31      	ldr	r3, [pc, #196]	@ (8004d24 <xPortStartScheduler+0x134>)
 8004c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c62:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004c64:	2207      	movs	r2, #7
 8004c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c68:	e009      	b.n	8004c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	4a2d      	ldr	r2, [pc, #180]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c86:	2b80      	cmp	r3, #128	@ 0x80
 8004c88:	d0ef      	beq.n	8004c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c8a:	4b27      	ldr	r3, [pc, #156]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1c3 0307 	rsb	r3, r3, #7
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d00b      	beq.n	8004cae <xPortStartScheduler+0xbe>
	__asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	60bb      	str	r3, [r7, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	e7fd      	b.n	8004caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cae:	4b1e      	ldr	r3, [pc, #120]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cc0:	4a19      	ldr	r2, [pc, #100]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ccc:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <xPortStartScheduler+0x13c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a16      	ldr	r2, [pc, #88]	@ (8004d2c <xPortStartScheduler+0x13c>)
 8004cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cd8:	4b14      	ldr	r3, [pc, #80]	@ (8004d2c <xPortStartScheduler+0x13c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a13      	ldr	r2, [pc, #76]	@ (8004d2c <xPortStartScheduler+0x13c>)
 8004cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ce4:	f000 f8da 	bl	8004e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	@ (8004d30 <xPortStartScheduler+0x140>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cee:	f000 f8f9 	bl	8004ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cf2:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <xPortStartScheduler+0x144>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d34 <xPortStartScheduler+0x144>)
 8004cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cfe:	f7ff ff63 	bl	8004bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d02:	f7ff fa75 	bl	80041f0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d06:	f7ff ff1d 	bl	8004b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	e000ed00 	.word	0xe000ed00
 8004d18:	410fc271 	.word	0x410fc271
 8004d1c:	410fc270 	.word	0x410fc270
 8004d20:	e000e400 	.word	0xe000e400
 8004d24:	20000510 	.word	0x20000510
 8004d28:	20000514 	.word	0x20000514
 8004d2c:	e000ed20 	.word	0xe000ed20
 8004d30:	20000010 	.word	0x20000010
 8004d34:	e000ef34 	.word	0xe000ef34

08004d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d52:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <vPortEnterCritical+0x5c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3301      	adds	r3, #1
 8004d58:	4a0e      	ldr	r2, [pc, #56]	@ (8004d94 <vPortEnterCritical+0x5c>)
 8004d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <vPortEnterCritical+0x5c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d110      	bne.n	8004d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d64:	4b0c      	ldr	r3, [pc, #48]	@ (8004d98 <vPortEnterCritical+0x60>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	603b      	str	r3, [r7, #0]
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <vPortEnterCritical+0x4a>
	}
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000010 	.word	0x20000010
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004da2:	4b12      	ldr	r3, [pc, #72]	@ (8004dec <vPortExitCritical+0x50>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <vPortExitCritical+0x26>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	607b      	str	r3, [r7, #4]
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	e7fd      	b.n	8004dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	4a08      	ldr	r2, [pc, #32]	@ (8004dec <vPortExitCritical+0x50>)
 8004dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dcc:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <vPortExitCritical+0x50>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <vPortExitCritical+0x44>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f383 8811 	msr	BASEPRI, r3
}
 8004dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	20000010 	.word	0x20000010

08004df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004df0:	f3ef 8009 	mrs	r0, PSP
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4b15      	ldr	r3, [pc, #84]	@ (8004e50 <pxCurrentTCBConst>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f01e 0f10 	tst.w	lr, #16
 8004e00:	bf08      	it	eq
 8004e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e14:	f380 8811 	msr	BASEPRI, r0
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f7ff f9e6 	bl	80041f0 <vTaskSwitchContext>
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f380 8811 	msr	BASEPRI, r0
 8004e2c:	bc09      	pop	{r0, r3}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	f01e 0f10 	tst.w	lr, #16
 8004e3a:	bf08      	it	eq
 8004e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e40:	f380 8809 	msr	PSP, r0
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e72:	f7ff f903 	bl	800407c <xTaskIncrementTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7c:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <SysTick_Handler+0x40>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
}
 8004e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <vPortSetupTimerInterrupt+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <vPortSetupTimerInterrupt+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004edc <vPortSetupTimerInterrupt+0x40>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	4a09      	ldr	r2, [pc, #36]	@ (8004ee0 <vPortSetupTimerInterrupt+0x44>)
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ebe:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e010 	.word	0xe000e010
 8004ed4:	e000e018 	.word	0xe000e018
 8004ed8:	20000004 	.word	0x20000004
 8004edc:	10624dd3 	.word	0x10624dd3
 8004ee0:	e000e014 	.word	0xe000e014

08004ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ef4 <vPortEnableVFP+0x10>
 8004ee8:	6801      	ldr	r1, [r0, #0]
 8004eea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004eee:	6001      	str	r1, [r0, #0]
 8004ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed88 	.word	0xe000ed88

08004ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004efe:	f3ef 8305 	mrs	r3, IPSR
 8004f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	d915      	bls.n	8004f36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f0a:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <vPortValidateInterruptPriority+0x74>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f14:	4b16      	ldr	r3, [pc, #88]	@ (8004f70 <vPortValidateInterruptPriority+0x78>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	7afa      	ldrb	r2, [r7, #11]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20b      	bcs.n	8004f36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f36:	4b0f      	ldr	r3, [pc, #60]	@ (8004f74 <vPortValidateInterruptPriority+0x7c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <vPortValidateInterruptPriority+0x80>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d90b      	bls.n	8004f5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	603b      	str	r3, [r7, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <vPortValidateInterruptPriority+0x62>
	}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	e000e3f0 	.word	0xe000e3f0
 8004f70:	20000510 	.word	0x20000510
 8004f74:	e000ed0c 	.word	0xe000ed0c
 8004f78:	20000514 	.word	0x20000514

08004f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	@ 0x28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f88:	f7fe ffcc 	bl	8003f24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8005100 <pvPortMalloc+0x184>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f94:	f000 f924 	bl	80051e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f98:	4b5a      	ldr	r3, [pc, #360]	@ (8005104 <pvPortMalloc+0x188>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 8095 	bne.w	80050d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01e      	beq.n	8004fea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004fac:	2208      	movs	r2, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d015      	beq.n	8004fea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f023 0307 	bic.w	r3, r3, #7
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <pvPortMalloc+0x6e>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	617b      	str	r3, [r7, #20]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d06f      	beq.n	80050d0 <pvPortMalloc+0x154>
 8004ff0:	4b45      	ldr	r3, [pc, #276]	@ (8005108 <pvPortMalloc+0x18c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d86a      	bhi.n	80050d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ffa:	4b44      	ldr	r3, [pc, #272]	@ (800510c <pvPortMalloc+0x190>)
 8004ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ffe:	4b43      	ldr	r3, [pc, #268]	@ (800510c <pvPortMalloc+0x190>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005004:	e004      	b.n	8005010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d903      	bls.n	8005022 <pvPortMalloc+0xa6>
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f1      	bne.n	8005006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005022:	4b37      	ldr	r3, [pc, #220]	@ (8005100 <pvPortMalloc+0x184>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005028:	429a      	cmp	r2, r3
 800502a:	d051      	beq.n	80050d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2208      	movs	r2, #8
 8005032:	4413      	add	r3, r2
 8005034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	1ad2      	subs	r2, r2, r3
 8005046:	2308      	movs	r3, #8
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	429a      	cmp	r2, r3
 800504c:	d920      	bls.n	8005090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800504e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00b      	beq.n	8005078 <pvPortMalloc+0xfc>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800508a:	69b8      	ldr	r0, [r7, #24]
 800508c:	f000 f90a 	bl	80052a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005090:	4b1d      	ldr	r3, [pc, #116]	@ (8005108 <pvPortMalloc+0x18c>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <pvPortMalloc+0x18c>)
 800509c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800509e:	4b1a      	ldr	r3, [pc, #104]	@ (8005108 <pvPortMalloc+0x18c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <pvPortMalloc+0x194>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d203      	bcs.n	80050b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050aa:	4b17      	ldr	r3, [pc, #92]	@ (8005108 <pvPortMalloc+0x18c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a18      	ldr	r2, [pc, #96]	@ (8005110 <pvPortMalloc+0x194>)
 80050b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <pvPortMalloc+0x188>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050c6:	4b13      	ldr	r3, [pc, #76]	@ (8005114 <pvPortMalloc+0x198>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	4a11      	ldr	r2, [pc, #68]	@ (8005114 <pvPortMalloc+0x198>)
 80050ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050d0:	f7fe ff36 	bl	8003f40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <pvPortMalloc+0x17a>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60fb      	str	r3, [r7, #12]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <pvPortMalloc+0x176>
	return pvReturn;
 80050f6:	69fb      	ldr	r3, [r7, #28]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3728      	adds	r7, #40	@ 0x28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20004120 	.word	0x20004120
 8005104:	20004134 	.word	0x20004134
 8005108:	20004124 	.word	0x20004124
 800510c:	20004118 	.word	0x20004118
 8005110:	20004128 	.word	0x20004128
 8005114:	2000412c 	.word	0x2000412c

08005118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d04f      	beq.n	80051ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800512a:	2308      	movs	r3, #8
 800512c:	425b      	negs	r3, r3
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4413      	add	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	4b25      	ldr	r3, [pc, #148]	@ (80051d4 <vPortFree+0xbc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <vPortFree+0x46>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60fb      	str	r3, [r7, #12]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <vPortFree+0x66>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60bb      	str	r3, [r7, #8]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	4b14      	ldr	r3, [pc, #80]	@ (80051d4 <vPortFree+0xbc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01e      	beq.n	80051ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11a      	bne.n	80051ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <vPortFree+0xbc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	43db      	mvns	r3, r3
 800519e:	401a      	ands	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051a4:	f7fe febe 	bl	8003f24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <vPortFree+0xc0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	4a09      	ldr	r2, [pc, #36]	@ (80051d8 <vPortFree+0xc0>)
 80051b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051b6:	6938      	ldr	r0, [r7, #16]
 80051b8:	f000 f874 	bl	80052a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051bc:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <vPortFree+0xc4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	4a06      	ldr	r2, [pc, #24]	@ (80051dc <vPortFree+0xc4>)
 80051c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051c6:	f7fe febb 	bl	8003f40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051ca:	bf00      	nop
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20004134 	.word	0x20004134
 80051d8:	20004124 	.word	0x20004124
 80051dc:	20004130 	.word	0x20004130

080051e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051ec:	4b27      	ldr	r3, [pc, #156]	@ (800528c <prvHeapInit+0xac>)
 80051ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3307      	adds	r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	4a1f      	ldr	r2, [pc, #124]	@ (800528c <prvHeapInit+0xac>)
 8005210:	4413      	add	r3, r2
 8005212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005218:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <prvHeapInit+0xb0>)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800521e:	4b1c      	ldr	r3, [pc, #112]	@ (8005290 <prvHeapInit+0xb0>)
 8005220:	2200      	movs	r2, #0
 8005222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4413      	add	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800522c:	2208      	movs	r2, #8
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a15      	ldr	r2, [pc, #84]	@ (8005294 <prvHeapInit+0xb4>)
 8005240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005242:	4b14      	ldr	r3, [pc, #80]	@ (8005294 <prvHeapInit+0xb4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800524a:	4b12      	ldr	r3, [pc, #72]	@ (8005294 <prvHeapInit+0xb4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <prvHeapInit+0xb4>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <prvHeapInit+0xb8>)
 800526e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a09      	ldr	r2, [pc, #36]	@ (800529c <prvHeapInit+0xbc>)
 8005276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005278:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <prvHeapInit+0xc0>)
 800527a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800527e:	601a      	str	r2, [r3, #0]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	20000518 	.word	0x20000518
 8005290:	20004118 	.word	0x20004118
 8005294:	20004120 	.word	0x20004120
 8005298:	20004128 	.word	0x20004128
 800529c:	20004124 	.word	0x20004124
 80052a0:	20004134 	.word	0x20004134

080052a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052ac:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <prvInsertBlockIntoFreeList+0xac>)
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e002      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x14>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d8f7      	bhi.n	80052b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d108      	bne.n	80052e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	441a      	add	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	441a      	add	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d118      	bne.n	800532c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <prvInsertBlockIntoFreeList+0xb0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d00d      	beq.n	8005322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e008      	b.n	8005334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005322:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <prvInsertBlockIntoFreeList+0xb0>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e003      	b.n	8005334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d002      	beq.n	8005342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20004118 	.word	0x20004118
 8005354:	20004120 	.word	0x20004120

08005358 <std>:
 8005358:	2300      	movs	r3, #0
 800535a:	b510      	push	{r4, lr}
 800535c:	4604      	mov	r4, r0
 800535e:	e9c0 3300 	strd	r3, r3, [r0]
 8005362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005366:	6083      	str	r3, [r0, #8]
 8005368:	8181      	strh	r1, [r0, #12]
 800536a:	6643      	str	r3, [r0, #100]	@ 0x64
 800536c:	81c2      	strh	r2, [r0, #14]
 800536e:	6183      	str	r3, [r0, #24]
 8005370:	4619      	mov	r1, r3
 8005372:	2208      	movs	r2, #8
 8005374:	305c      	adds	r0, #92	@ 0x5c
 8005376:	f000 f99b 	bl	80056b0 <memset>
 800537a:	4b0d      	ldr	r3, [pc, #52]	@ (80053b0 <std+0x58>)
 800537c:	6263      	str	r3, [r4, #36]	@ 0x24
 800537e:	4b0d      	ldr	r3, [pc, #52]	@ (80053b4 <std+0x5c>)
 8005380:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <std+0x60>)
 8005384:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005386:	4b0d      	ldr	r3, [pc, #52]	@ (80053bc <std+0x64>)
 8005388:	6323      	str	r3, [r4, #48]	@ 0x30
 800538a:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <std+0x68>)
 800538c:	6224      	str	r4, [r4, #32]
 800538e:	429c      	cmp	r4, r3
 8005390:	d006      	beq.n	80053a0 <std+0x48>
 8005392:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005396:	4294      	cmp	r4, r2
 8005398:	d002      	beq.n	80053a0 <std+0x48>
 800539a:	33d0      	adds	r3, #208	@ 0xd0
 800539c:	429c      	cmp	r4, r3
 800539e:	d105      	bne.n	80053ac <std+0x54>
 80053a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a8:	f000 ba50 	b.w	800584c <__retarget_lock_init_recursive>
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	08005501 	.word	0x08005501
 80053b4:	08005523 	.word	0x08005523
 80053b8:	0800555b 	.word	0x0800555b
 80053bc:	0800557f 	.word	0x0800557f
 80053c0:	20004138 	.word	0x20004138

080053c4 <stdio_exit_handler>:
 80053c4:	4a02      	ldr	r2, [pc, #8]	@ (80053d0 <stdio_exit_handler+0xc>)
 80053c6:	4903      	ldr	r1, [pc, #12]	@ (80053d4 <stdio_exit_handler+0x10>)
 80053c8:	4803      	ldr	r0, [pc, #12]	@ (80053d8 <stdio_exit_handler+0x14>)
 80053ca:	f000 b869 	b.w	80054a0 <_fwalk_sglue>
 80053ce:	bf00      	nop
 80053d0:	20000014 	.word	0x20000014
 80053d4:	08006109 	.word	0x08006109
 80053d8:	20000024 	.word	0x20000024

080053dc <cleanup_stdio>:
 80053dc:	6841      	ldr	r1, [r0, #4]
 80053de:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <cleanup_stdio+0x34>)
 80053e0:	4299      	cmp	r1, r3
 80053e2:	b510      	push	{r4, lr}
 80053e4:	4604      	mov	r4, r0
 80053e6:	d001      	beq.n	80053ec <cleanup_stdio+0x10>
 80053e8:	f000 fe8e 	bl	8006108 <_fflush_r>
 80053ec:	68a1      	ldr	r1, [r4, #8]
 80053ee:	4b09      	ldr	r3, [pc, #36]	@ (8005414 <cleanup_stdio+0x38>)
 80053f0:	4299      	cmp	r1, r3
 80053f2:	d002      	beq.n	80053fa <cleanup_stdio+0x1e>
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fe87 	bl	8006108 <_fflush_r>
 80053fa:	68e1      	ldr	r1, [r4, #12]
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <cleanup_stdio+0x3c>)
 80053fe:	4299      	cmp	r1, r3
 8005400:	d004      	beq.n	800540c <cleanup_stdio+0x30>
 8005402:	4620      	mov	r0, r4
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005408:	f000 be7e 	b.w	8006108 <_fflush_r>
 800540c:	bd10      	pop	{r4, pc}
 800540e:	bf00      	nop
 8005410:	20004138 	.word	0x20004138
 8005414:	200041a0 	.word	0x200041a0
 8005418:	20004208 	.word	0x20004208

0800541c <global_stdio_init.part.0>:
 800541c:	b510      	push	{r4, lr}
 800541e:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <global_stdio_init.part.0+0x30>)
 8005420:	4c0b      	ldr	r4, [pc, #44]	@ (8005450 <global_stdio_init.part.0+0x34>)
 8005422:	4a0c      	ldr	r2, [pc, #48]	@ (8005454 <global_stdio_init.part.0+0x38>)
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	4620      	mov	r0, r4
 8005428:	2200      	movs	r2, #0
 800542a:	2104      	movs	r1, #4
 800542c:	f7ff ff94 	bl	8005358 <std>
 8005430:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005434:	2201      	movs	r2, #1
 8005436:	2109      	movs	r1, #9
 8005438:	f7ff ff8e 	bl	8005358 <std>
 800543c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005440:	2202      	movs	r2, #2
 8005442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005446:	2112      	movs	r1, #18
 8005448:	f7ff bf86 	b.w	8005358 <std>
 800544c:	20004270 	.word	0x20004270
 8005450:	20004138 	.word	0x20004138
 8005454:	080053c5 	.word	0x080053c5

08005458 <__sfp_lock_acquire>:
 8005458:	4801      	ldr	r0, [pc, #4]	@ (8005460 <__sfp_lock_acquire+0x8>)
 800545a:	f000 b9f8 	b.w	800584e <__retarget_lock_acquire_recursive>
 800545e:	bf00      	nop
 8005460:	20004279 	.word	0x20004279

08005464 <__sfp_lock_release>:
 8005464:	4801      	ldr	r0, [pc, #4]	@ (800546c <__sfp_lock_release+0x8>)
 8005466:	f000 b9f3 	b.w	8005850 <__retarget_lock_release_recursive>
 800546a:	bf00      	nop
 800546c:	20004279 	.word	0x20004279

08005470 <__sinit>:
 8005470:	b510      	push	{r4, lr}
 8005472:	4604      	mov	r4, r0
 8005474:	f7ff fff0 	bl	8005458 <__sfp_lock_acquire>
 8005478:	6a23      	ldr	r3, [r4, #32]
 800547a:	b11b      	cbz	r3, 8005484 <__sinit+0x14>
 800547c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005480:	f7ff bff0 	b.w	8005464 <__sfp_lock_release>
 8005484:	4b04      	ldr	r3, [pc, #16]	@ (8005498 <__sinit+0x28>)
 8005486:	6223      	str	r3, [r4, #32]
 8005488:	4b04      	ldr	r3, [pc, #16]	@ (800549c <__sinit+0x2c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f5      	bne.n	800547c <__sinit+0xc>
 8005490:	f7ff ffc4 	bl	800541c <global_stdio_init.part.0>
 8005494:	e7f2      	b.n	800547c <__sinit+0xc>
 8005496:	bf00      	nop
 8005498:	080053dd 	.word	0x080053dd
 800549c:	20004270 	.word	0x20004270

080054a0 <_fwalk_sglue>:
 80054a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a4:	4607      	mov	r7, r0
 80054a6:	4688      	mov	r8, r1
 80054a8:	4614      	mov	r4, r2
 80054aa:	2600      	movs	r6, #0
 80054ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054b0:	f1b9 0901 	subs.w	r9, r9, #1
 80054b4:	d505      	bpl.n	80054c2 <_fwalk_sglue+0x22>
 80054b6:	6824      	ldr	r4, [r4, #0]
 80054b8:	2c00      	cmp	r4, #0
 80054ba:	d1f7      	bne.n	80054ac <_fwalk_sglue+0xc>
 80054bc:	4630      	mov	r0, r6
 80054be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c2:	89ab      	ldrh	r3, [r5, #12]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d907      	bls.n	80054d8 <_fwalk_sglue+0x38>
 80054c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054cc:	3301      	adds	r3, #1
 80054ce:	d003      	beq.n	80054d8 <_fwalk_sglue+0x38>
 80054d0:	4629      	mov	r1, r5
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c0      	blx	r8
 80054d6:	4306      	orrs	r6, r0
 80054d8:	3568      	adds	r5, #104	@ 0x68
 80054da:	e7e9      	b.n	80054b0 <_fwalk_sglue+0x10>

080054dc <iprintf>:
 80054dc:	b40f      	push	{r0, r1, r2, r3}
 80054de:	b507      	push	{r0, r1, r2, lr}
 80054e0:	4906      	ldr	r1, [pc, #24]	@ (80054fc <iprintf+0x20>)
 80054e2:	ab04      	add	r3, sp, #16
 80054e4:	6808      	ldr	r0, [r1, #0]
 80054e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ea:	6881      	ldr	r1, [r0, #8]
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	f000 fae1 	bl	8005ab4 <_vfiprintf_r>
 80054f2:	b003      	add	sp, #12
 80054f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f8:	b004      	add	sp, #16
 80054fa:	4770      	bx	lr
 80054fc:	20000020 	.word	0x20000020

08005500 <__sread>:
 8005500:	b510      	push	{r4, lr}
 8005502:	460c      	mov	r4, r1
 8005504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005508:	f000 f952 	bl	80057b0 <_read_r>
 800550c:	2800      	cmp	r0, #0
 800550e:	bfab      	itete	ge
 8005510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005512:	89a3      	ldrhlt	r3, [r4, #12]
 8005514:	181b      	addge	r3, r3, r0
 8005516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800551a:	bfac      	ite	ge
 800551c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800551e:	81a3      	strhlt	r3, [r4, #12]
 8005520:	bd10      	pop	{r4, pc}

08005522 <__swrite>:
 8005522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005526:	461f      	mov	r7, r3
 8005528:	898b      	ldrh	r3, [r1, #12]
 800552a:	05db      	lsls	r3, r3, #23
 800552c:	4605      	mov	r5, r0
 800552e:	460c      	mov	r4, r1
 8005530:	4616      	mov	r6, r2
 8005532:	d505      	bpl.n	8005540 <__swrite+0x1e>
 8005534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005538:	2302      	movs	r3, #2
 800553a:	2200      	movs	r2, #0
 800553c:	f000 f926 	bl	800578c <_lseek_r>
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	4632      	mov	r2, r6
 800554e:	463b      	mov	r3, r7
 8005550:	4628      	mov	r0, r5
 8005552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005556:	f000 b93d 	b.w	80057d4 <_write_r>

0800555a <__sseek>:
 800555a:	b510      	push	{r4, lr}
 800555c:	460c      	mov	r4, r1
 800555e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005562:	f000 f913 	bl	800578c <_lseek_r>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	bf15      	itete	ne
 800556c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800556e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005576:	81a3      	strheq	r3, [r4, #12]
 8005578:	bf18      	it	ne
 800557a:	81a3      	strhne	r3, [r4, #12]
 800557c:	bd10      	pop	{r4, pc}

0800557e <__sclose>:
 800557e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005582:	f000 b89d 	b.w	80056c0 <_close_r>

08005586 <__swbuf_r>:
 8005586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005588:	460e      	mov	r6, r1
 800558a:	4614      	mov	r4, r2
 800558c:	4605      	mov	r5, r0
 800558e:	b118      	cbz	r0, 8005598 <__swbuf_r+0x12>
 8005590:	6a03      	ldr	r3, [r0, #32]
 8005592:	b90b      	cbnz	r3, 8005598 <__swbuf_r+0x12>
 8005594:	f7ff ff6c 	bl	8005470 <__sinit>
 8005598:	69a3      	ldr	r3, [r4, #24]
 800559a:	60a3      	str	r3, [r4, #8]
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	071a      	lsls	r2, r3, #28
 80055a0:	d501      	bpl.n	80055a6 <__swbuf_r+0x20>
 80055a2:	6923      	ldr	r3, [r4, #16]
 80055a4:	b943      	cbnz	r3, 80055b8 <__swbuf_r+0x32>
 80055a6:	4621      	mov	r1, r4
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 f82b 	bl	8005604 <__swsetup_r>
 80055ae:	b118      	cbz	r0, 80055b8 <__swbuf_r+0x32>
 80055b0:	f04f 37ff 	mov.w	r7, #4294967295
 80055b4:	4638      	mov	r0, r7
 80055b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	6922      	ldr	r2, [r4, #16]
 80055bc:	1a98      	subs	r0, r3, r2
 80055be:	6963      	ldr	r3, [r4, #20]
 80055c0:	b2f6      	uxtb	r6, r6
 80055c2:	4283      	cmp	r3, r0
 80055c4:	4637      	mov	r7, r6
 80055c6:	dc05      	bgt.n	80055d4 <__swbuf_r+0x4e>
 80055c8:	4621      	mov	r1, r4
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 fd9c 	bl	8006108 <_fflush_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1ed      	bne.n	80055b0 <__swbuf_r+0x2a>
 80055d4:	68a3      	ldr	r3, [r4, #8]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	60a3      	str	r3, [r4, #8]
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	6022      	str	r2, [r4, #0]
 80055e0:	701e      	strb	r6, [r3, #0]
 80055e2:	6962      	ldr	r2, [r4, #20]
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d004      	beq.n	80055f4 <__swbuf_r+0x6e>
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	07db      	lsls	r3, r3, #31
 80055ee:	d5e1      	bpl.n	80055b4 <__swbuf_r+0x2e>
 80055f0:	2e0a      	cmp	r6, #10
 80055f2:	d1df      	bne.n	80055b4 <__swbuf_r+0x2e>
 80055f4:	4621      	mov	r1, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 fd86 	bl	8006108 <_fflush_r>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d0d9      	beq.n	80055b4 <__swbuf_r+0x2e>
 8005600:	e7d6      	b.n	80055b0 <__swbuf_r+0x2a>
	...

08005604 <__swsetup_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4b29      	ldr	r3, [pc, #164]	@ (80056ac <__swsetup_r+0xa8>)
 8005608:	4605      	mov	r5, r0
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	460c      	mov	r4, r1
 800560e:	b118      	cbz	r0, 8005618 <__swsetup_r+0x14>
 8005610:	6a03      	ldr	r3, [r0, #32]
 8005612:	b90b      	cbnz	r3, 8005618 <__swsetup_r+0x14>
 8005614:	f7ff ff2c 	bl	8005470 <__sinit>
 8005618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800561c:	0719      	lsls	r1, r3, #28
 800561e:	d422      	bmi.n	8005666 <__swsetup_r+0x62>
 8005620:	06da      	lsls	r2, r3, #27
 8005622:	d407      	bmi.n	8005634 <__swsetup_r+0x30>
 8005624:	2209      	movs	r2, #9
 8005626:	602a      	str	r2, [r5, #0]
 8005628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	f04f 30ff 	mov.w	r0, #4294967295
 8005632:	e033      	b.n	800569c <__swsetup_r+0x98>
 8005634:	0758      	lsls	r0, r3, #29
 8005636:	d512      	bpl.n	800565e <__swsetup_r+0x5a>
 8005638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800563a:	b141      	cbz	r1, 800564e <__swsetup_r+0x4a>
 800563c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005640:	4299      	cmp	r1, r3
 8005642:	d002      	beq.n	800564a <__swsetup_r+0x46>
 8005644:	4628      	mov	r0, r5
 8005646:	f000 f913 	bl	8005870 <_free_r>
 800564a:	2300      	movs	r3, #0
 800564c:	6363      	str	r3, [r4, #52]	@ 0x34
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	2300      	movs	r3, #0
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f043 0308 	orr.w	r3, r3, #8
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	b94b      	cbnz	r3, 800567e <__swsetup_r+0x7a>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005674:	d003      	beq.n	800567e <__swsetup_r+0x7a>
 8005676:	4621      	mov	r1, r4
 8005678:	4628      	mov	r0, r5
 800567a:	f000 fd93 	bl	80061a4 <__smakebuf_r>
 800567e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005682:	f013 0201 	ands.w	r2, r3, #1
 8005686:	d00a      	beq.n	800569e <__swsetup_r+0x9a>
 8005688:	2200      	movs	r2, #0
 800568a:	60a2      	str	r2, [r4, #8]
 800568c:	6962      	ldr	r2, [r4, #20]
 800568e:	4252      	negs	r2, r2
 8005690:	61a2      	str	r2, [r4, #24]
 8005692:	6922      	ldr	r2, [r4, #16]
 8005694:	b942      	cbnz	r2, 80056a8 <__swsetup_r+0xa4>
 8005696:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800569a:	d1c5      	bne.n	8005628 <__swsetup_r+0x24>
 800569c:	bd38      	pop	{r3, r4, r5, pc}
 800569e:	0799      	lsls	r1, r3, #30
 80056a0:	bf58      	it	pl
 80056a2:	6962      	ldrpl	r2, [r4, #20]
 80056a4:	60a2      	str	r2, [r4, #8]
 80056a6:	e7f4      	b.n	8005692 <__swsetup_r+0x8e>
 80056a8:	2000      	movs	r0, #0
 80056aa:	e7f7      	b.n	800569c <__swsetup_r+0x98>
 80056ac:	20000020 	.word	0x20000020

080056b0 <memset>:
 80056b0:	4402      	add	r2, r0
 80056b2:	4603      	mov	r3, r0
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d100      	bne.n	80056ba <memset+0xa>
 80056b8:	4770      	bx	lr
 80056ba:	f803 1b01 	strb.w	r1, [r3], #1
 80056be:	e7f9      	b.n	80056b4 <memset+0x4>

080056c0 <_close_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d06      	ldr	r5, [pc, #24]	@ (80056dc <_close_r+0x1c>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fb fb6b 	bl	8000da6 <_close>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_close_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_close_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20004274 	.word	0x20004274

080056e0 <_reclaim_reent>:
 80056e0:	4b29      	ldr	r3, [pc, #164]	@ (8005788 <_reclaim_reent+0xa8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4283      	cmp	r3, r0
 80056e6:	b570      	push	{r4, r5, r6, lr}
 80056e8:	4604      	mov	r4, r0
 80056ea:	d04b      	beq.n	8005784 <_reclaim_reent+0xa4>
 80056ec:	69c3      	ldr	r3, [r0, #28]
 80056ee:	b1ab      	cbz	r3, 800571c <_reclaim_reent+0x3c>
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	b16b      	cbz	r3, 8005710 <_reclaim_reent+0x30>
 80056f4:	2500      	movs	r5, #0
 80056f6:	69e3      	ldr	r3, [r4, #28]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	5959      	ldr	r1, [r3, r5]
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d13b      	bne.n	8005778 <_reclaim_reent+0x98>
 8005700:	3504      	adds	r5, #4
 8005702:	2d80      	cmp	r5, #128	@ 0x80
 8005704:	d1f7      	bne.n	80056f6 <_reclaim_reent+0x16>
 8005706:	69e3      	ldr	r3, [r4, #28]
 8005708:	4620      	mov	r0, r4
 800570a:	68d9      	ldr	r1, [r3, #12]
 800570c:	f000 f8b0 	bl	8005870 <_free_r>
 8005710:	69e3      	ldr	r3, [r4, #28]
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	b111      	cbz	r1, 800571c <_reclaim_reent+0x3c>
 8005716:	4620      	mov	r0, r4
 8005718:	f000 f8aa 	bl	8005870 <_free_r>
 800571c:	6961      	ldr	r1, [r4, #20]
 800571e:	b111      	cbz	r1, 8005726 <_reclaim_reent+0x46>
 8005720:	4620      	mov	r0, r4
 8005722:	f000 f8a5 	bl	8005870 <_free_r>
 8005726:	69e1      	ldr	r1, [r4, #28]
 8005728:	b111      	cbz	r1, 8005730 <_reclaim_reent+0x50>
 800572a:	4620      	mov	r0, r4
 800572c:	f000 f8a0 	bl	8005870 <_free_r>
 8005730:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005732:	b111      	cbz	r1, 800573a <_reclaim_reent+0x5a>
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f89b 	bl	8005870 <_free_r>
 800573a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800573c:	b111      	cbz	r1, 8005744 <_reclaim_reent+0x64>
 800573e:	4620      	mov	r0, r4
 8005740:	f000 f896 	bl	8005870 <_free_r>
 8005744:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005746:	b111      	cbz	r1, 800574e <_reclaim_reent+0x6e>
 8005748:	4620      	mov	r0, r4
 800574a:	f000 f891 	bl	8005870 <_free_r>
 800574e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005750:	b111      	cbz	r1, 8005758 <_reclaim_reent+0x78>
 8005752:	4620      	mov	r0, r4
 8005754:	f000 f88c 	bl	8005870 <_free_r>
 8005758:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800575a:	b111      	cbz	r1, 8005762 <_reclaim_reent+0x82>
 800575c:	4620      	mov	r0, r4
 800575e:	f000 f887 	bl	8005870 <_free_r>
 8005762:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005764:	b111      	cbz	r1, 800576c <_reclaim_reent+0x8c>
 8005766:	4620      	mov	r0, r4
 8005768:	f000 f882 	bl	8005870 <_free_r>
 800576c:	6a23      	ldr	r3, [r4, #32]
 800576e:	b14b      	cbz	r3, 8005784 <_reclaim_reent+0xa4>
 8005770:	4620      	mov	r0, r4
 8005772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005776:	4718      	bx	r3
 8005778:	680e      	ldr	r6, [r1, #0]
 800577a:	4620      	mov	r0, r4
 800577c:	f000 f878 	bl	8005870 <_free_r>
 8005780:	4631      	mov	r1, r6
 8005782:	e7bb      	b.n	80056fc <_reclaim_reent+0x1c>
 8005784:	bd70      	pop	{r4, r5, r6, pc}
 8005786:	bf00      	nop
 8005788:	20000020 	.word	0x20000020

0800578c <_lseek_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d07      	ldr	r5, [pc, #28]	@ (80057ac <_lseek_r+0x20>)
 8005790:	4604      	mov	r4, r0
 8005792:	4608      	mov	r0, r1
 8005794:	4611      	mov	r1, r2
 8005796:	2200      	movs	r2, #0
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f7fb fb2a 	bl	8000df4 <_lseek>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_lseek_r+0x1e>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_lseek_r+0x1e>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20004274 	.word	0x20004274

080057b0 <_read_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d07      	ldr	r5, [pc, #28]	@ (80057d0 <_read_r+0x20>)
 80057b4:	4604      	mov	r4, r0
 80057b6:	4608      	mov	r0, r1
 80057b8:	4611      	mov	r1, r2
 80057ba:	2200      	movs	r2, #0
 80057bc:	602a      	str	r2, [r5, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7fb fab8 	bl	8000d34 <_read>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_read_r+0x1e>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_read_r+0x1e>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	20004274 	.word	0x20004274

080057d4 <_write_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d07      	ldr	r5, [pc, #28]	@ (80057f4 <_write_r+0x20>)
 80057d8:	4604      	mov	r4, r0
 80057da:	4608      	mov	r0, r1
 80057dc:	4611      	mov	r1, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	602a      	str	r2, [r5, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7fb fac3 	bl	8000d6e <_write>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_write_r+0x1e>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_write_r+0x1e>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	20004274 	.word	0x20004274

080057f8 <__errno>:
 80057f8:	4b01      	ldr	r3, [pc, #4]	@ (8005800 <__errno+0x8>)
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000020 	.word	0x20000020

08005804 <__libc_init_array>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4d0d      	ldr	r5, [pc, #52]	@ (800583c <__libc_init_array+0x38>)
 8005808:	4c0d      	ldr	r4, [pc, #52]	@ (8005840 <__libc_init_array+0x3c>)
 800580a:	1b64      	subs	r4, r4, r5
 800580c:	10a4      	asrs	r4, r4, #2
 800580e:	2600      	movs	r6, #0
 8005810:	42a6      	cmp	r6, r4
 8005812:	d109      	bne.n	8005828 <__libc_init_array+0x24>
 8005814:	4d0b      	ldr	r5, [pc, #44]	@ (8005844 <__libc_init_array+0x40>)
 8005816:	4c0c      	ldr	r4, [pc, #48]	@ (8005848 <__libc_init_array+0x44>)
 8005818:	f000 fd32 	bl	8006280 <_init>
 800581c:	1b64      	subs	r4, r4, r5
 800581e:	10a4      	asrs	r4, r4, #2
 8005820:	2600      	movs	r6, #0
 8005822:	42a6      	cmp	r6, r4
 8005824:	d105      	bne.n	8005832 <__libc_init_array+0x2e>
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	f855 3b04 	ldr.w	r3, [r5], #4
 800582c:	4798      	blx	r3
 800582e:	3601      	adds	r6, #1
 8005830:	e7ee      	b.n	8005810 <__libc_init_array+0xc>
 8005832:	f855 3b04 	ldr.w	r3, [r5], #4
 8005836:	4798      	blx	r3
 8005838:	3601      	adds	r6, #1
 800583a:	e7f2      	b.n	8005822 <__libc_init_array+0x1e>
 800583c:	0800642c 	.word	0x0800642c
 8005840:	0800642c 	.word	0x0800642c
 8005844:	0800642c 	.word	0x0800642c
 8005848:	08006430 	.word	0x08006430

0800584c <__retarget_lock_init_recursive>:
 800584c:	4770      	bx	lr

0800584e <__retarget_lock_acquire_recursive>:
 800584e:	4770      	bx	lr

08005850 <__retarget_lock_release_recursive>:
 8005850:	4770      	bx	lr

08005852 <memcpy>:
 8005852:	440a      	add	r2, r1
 8005854:	4291      	cmp	r1, r2
 8005856:	f100 33ff 	add.w	r3, r0, #4294967295
 800585a:	d100      	bne.n	800585e <memcpy+0xc>
 800585c:	4770      	bx	lr
 800585e:	b510      	push	{r4, lr}
 8005860:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005864:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005868:	4291      	cmp	r1, r2
 800586a:	d1f9      	bne.n	8005860 <memcpy+0xe>
 800586c:	bd10      	pop	{r4, pc}
	...

08005870 <_free_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4605      	mov	r5, r0
 8005874:	2900      	cmp	r1, #0
 8005876:	d041      	beq.n	80058fc <_free_r+0x8c>
 8005878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587c:	1f0c      	subs	r4, r1, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfb8      	it	lt
 8005882:	18e4      	addlt	r4, r4, r3
 8005884:	f000 f8e0 	bl	8005a48 <__malloc_lock>
 8005888:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <_free_r+0x90>)
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	b933      	cbnz	r3, 800589c <_free_r+0x2c>
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	4628      	mov	r0, r5
 8005894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005898:	f000 b8dc 	b.w	8005a54 <__malloc_unlock>
 800589c:	42a3      	cmp	r3, r4
 800589e:	d908      	bls.n	80058b2 <_free_r+0x42>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	1821      	adds	r1, r4, r0
 80058a4:	428b      	cmp	r3, r1
 80058a6:	bf01      	itttt	eq
 80058a8:	6819      	ldreq	r1, [r3, #0]
 80058aa:	685b      	ldreq	r3, [r3, #4]
 80058ac:	1809      	addeq	r1, r1, r0
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	e7ed      	b.n	800588e <_free_r+0x1e>
 80058b2:	461a      	mov	r2, r3
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b10b      	cbz	r3, 80058bc <_free_r+0x4c>
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d9fa      	bls.n	80058b2 <_free_r+0x42>
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	1850      	adds	r0, r2, r1
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d10b      	bne.n	80058dc <_free_r+0x6c>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	4401      	add	r1, r0
 80058c8:	1850      	adds	r0, r2, r1
 80058ca:	4283      	cmp	r3, r0
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	d1e0      	bne.n	8005892 <_free_r+0x22>
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	6053      	str	r3, [r2, #4]
 80058d6:	4408      	add	r0, r1
 80058d8:	6010      	str	r0, [r2, #0]
 80058da:	e7da      	b.n	8005892 <_free_r+0x22>
 80058dc:	d902      	bls.n	80058e4 <_free_r+0x74>
 80058de:	230c      	movs	r3, #12
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	e7d6      	b.n	8005892 <_free_r+0x22>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	1821      	adds	r1, r4, r0
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf04      	itt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	bf04      	itt	eq
 80058f4:	1809      	addeq	r1, r1, r0
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	6054      	str	r4, [r2, #4]
 80058fa:	e7ca      	b.n	8005892 <_free_r+0x22>
 80058fc:	bd38      	pop	{r3, r4, r5, pc}
 80058fe:	bf00      	nop
 8005900:	20004280 	.word	0x20004280

08005904 <sbrk_aligned>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	4e0f      	ldr	r6, [pc, #60]	@ (8005944 <sbrk_aligned+0x40>)
 8005908:	460c      	mov	r4, r1
 800590a:	6831      	ldr	r1, [r6, #0]
 800590c:	4605      	mov	r5, r0
 800590e:	b911      	cbnz	r1, 8005916 <sbrk_aligned+0x12>
 8005910:	f000 fca6 	bl	8006260 <_sbrk_r>
 8005914:	6030      	str	r0, [r6, #0]
 8005916:	4621      	mov	r1, r4
 8005918:	4628      	mov	r0, r5
 800591a:	f000 fca1 	bl	8006260 <_sbrk_r>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d103      	bne.n	800592a <sbrk_aligned+0x26>
 8005922:	f04f 34ff 	mov.w	r4, #4294967295
 8005926:	4620      	mov	r0, r4
 8005928:	bd70      	pop	{r4, r5, r6, pc}
 800592a:	1cc4      	adds	r4, r0, #3
 800592c:	f024 0403 	bic.w	r4, r4, #3
 8005930:	42a0      	cmp	r0, r4
 8005932:	d0f8      	beq.n	8005926 <sbrk_aligned+0x22>
 8005934:	1a21      	subs	r1, r4, r0
 8005936:	4628      	mov	r0, r5
 8005938:	f000 fc92 	bl	8006260 <_sbrk_r>
 800593c:	3001      	adds	r0, #1
 800593e:	d1f2      	bne.n	8005926 <sbrk_aligned+0x22>
 8005940:	e7ef      	b.n	8005922 <sbrk_aligned+0x1e>
 8005942:	bf00      	nop
 8005944:	2000427c 	.word	0x2000427c

08005948 <_malloc_r>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	1ccd      	adds	r5, r1, #3
 800594e:	f025 0503 	bic.w	r5, r5, #3
 8005952:	3508      	adds	r5, #8
 8005954:	2d0c      	cmp	r5, #12
 8005956:	bf38      	it	cc
 8005958:	250c      	movcc	r5, #12
 800595a:	2d00      	cmp	r5, #0
 800595c:	4606      	mov	r6, r0
 800595e:	db01      	blt.n	8005964 <_malloc_r+0x1c>
 8005960:	42a9      	cmp	r1, r5
 8005962:	d904      	bls.n	800596e <_malloc_r+0x26>
 8005964:	230c      	movs	r3, #12
 8005966:	6033      	str	r3, [r6, #0]
 8005968:	2000      	movs	r0, #0
 800596a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a44 <_malloc_r+0xfc>
 8005972:	f000 f869 	bl	8005a48 <__malloc_lock>
 8005976:	f8d8 3000 	ldr.w	r3, [r8]
 800597a:	461c      	mov	r4, r3
 800597c:	bb44      	cbnz	r4, 80059d0 <_malloc_r+0x88>
 800597e:	4629      	mov	r1, r5
 8005980:	4630      	mov	r0, r6
 8005982:	f7ff ffbf 	bl	8005904 <sbrk_aligned>
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	4604      	mov	r4, r0
 800598a:	d158      	bne.n	8005a3e <_malloc_r+0xf6>
 800598c:	f8d8 4000 	ldr.w	r4, [r8]
 8005990:	4627      	mov	r7, r4
 8005992:	2f00      	cmp	r7, #0
 8005994:	d143      	bne.n	8005a1e <_malloc_r+0xd6>
 8005996:	2c00      	cmp	r4, #0
 8005998:	d04b      	beq.n	8005a32 <_malloc_r+0xea>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	4639      	mov	r1, r7
 800599e:	4630      	mov	r0, r6
 80059a0:	eb04 0903 	add.w	r9, r4, r3
 80059a4:	f000 fc5c 	bl	8006260 <_sbrk_r>
 80059a8:	4581      	cmp	r9, r0
 80059aa:	d142      	bne.n	8005a32 <_malloc_r+0xea>
 80059ac:	6821      	ldr	r1, [r4, #0]
 80059ae:	1a6d      	subs	r5, r5, r1
 80059b0:	4629      	mov	r1, r5
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7ff ffa6 	bl	8005904 <sbrk_aligned>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d03a      	beq.n	8005a32 <_malloc_r+0xea>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	442b      	add	r3, r5
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	f8d8 3000 	ldr.w	r3, [r8]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	bb62      	cbnz	r2, 8005a24 <_malloc_r+0xdc>
 80059ca:	f8c8 7000 	str.w	r7, [r8]
 80059ce:	e00f      	b.n	80059f0 <_malloc_r+0xa8>
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	1b52      	subs	r2, r2, r5
 80059d4:	d420      	bmi.n	8005a18 <_malloc_r+0xd0>
 80059d6:	2a0b      	cmp	r2, #11
 80059d8:	d917      	bls.n	8005a0a <_malloc_r+0xc2>
 80059da:	1961      	adds	r1, r4, r5
 80059dc:	42a3      	cmp	r3, r4
 80059de:	6025      	str	r5, [r4, #0]
 80059e0:	bf18      	it	ne
 80059e2:	6059      	strne	r1, [r3, #4]
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	bf08      	it	eq
 80059e8:	f8c8 1000 	streq.w	r1, [r8]
 80059ec:	5162      	str	r2, [r4, r5]
 80059ee:	604b      	str	r3, [r1, #4]
 80059f0:	4630      	mov	r0, r6
 80059f2:	f000 f82f 	bl	8005a54 <__malloc_unlock>
 80059f6:	f104 000b 	add.w	r0, r4, #11
 80059fa:	1d23      	adds	r3, r4, #4
 80059fc:	f020 0007 	bic.w	r0, r0, #7
 8005a00:	1ac2      	subs	r2, r0, r3
 8005a02:	bf1c      	itt	ne
 8005a04:	1a1b      	subne	r3, r3, r0
 8005a06:	50a3      	strne	r3, [r4, r2]
 8005a08:	e7af      	b.n	800596a <_malloc_r+0x22>
 8005a0a:	6862      	ldr	r2, [r4, #4]
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	bf0c      	ite	eq
 8005a10:	f8c8 2000 	streq.w	r2, [r8]
 8005a14:	605a      	strne	r2, [r3, #4]
 8005a16:	e7eb      	b.n	80059f0 <_malloc_r+0xa8>
 8005a18:	4623      	mov	r3, r4
 8005a1a:	6864      	ldr	r4, [r4, #4]
 8005a1c:	e7ae      	b.n	800597c <_malloc_r+0x34>
 8005a1e:	463c      	mov	r4, r7
 8005a20:	687f      	ldr	r7, [r7, #4]
 8005a22:	e7b6      	b.n	8005992 <_malloc_r+0x4a>
 8005a24:	461a      	mov	r2, r3
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d1fb      	bne.n	8005a24 <_malloc_r+0xdc>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6053      	str	r3, [r2, #4]
 8005a30:	e7de      	b.n	80059f0 <_malloc_r+0xa8>
 8005a32:	230c      	movs	r3, #12
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	4630      	mov	r0, r6
 8005a38:	f000 f80c 	bl	8005a54 <__malloc_unlock>
 8005a3c:	e794      	b.n	8005968 <_malloc_r+0x20>
 8005a3e:	6005      	str	r5, [r0, #0]
 8005a40:	e7d6      	b.n	80059f0 <_malloc_r+0xa8>
 8005a42:	bf00      	nop
 8005a44:	20004280 	.word	0x20004280

08005a48 <__malloc_lock>:
 8005a48:	4801      	ldr	r0, [pc, #4]	@ (8005a50 <__malloc_lock+0x8>)
 8005a4a:	f7ff bf00 	b.w	800584e <__retarget_lock_acquire_recursive>
 8005a4e:	bf00      	nop
 8005a50:	20004278 	.word	0x20004278

08005a54 <__malloc_unlock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	@ (8005a5c <__malloc_unlock+0x8>)
 8005a56:	f7ff befb 	b.w	8005850 <__retarget_lock_release_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	20004278 	.word	0x20004278

08005a60 <__sfputc_r>:
 8005a60:	6893      	ldr	r3, [r2, #8]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	b410      	push	{r4}
 8005a68:	6093      	str	r3, [r2, #8]
 8005a6a:	da08      	bge.n	8005a7e <__sfputc_r+0x1e>
 8005a6c:	6994      	ldr	r4, [r2, #24]
 8005a6e:	42a3      	cmp	r3, r4
 8005a70:	db01      	blt.n	8005a76 <__sfputc_r+0x16>
 8005a72:	290a      	cmp	r1, #10
 8005a74:	d103      	bne.n	8005a7e <__sfputc_r+0x1e>
 8005a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a7a:	f7ff bd84 	b.w	8005586 <__swbuf_r>
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	1c58      	adds	r0, r3, #1
 8005a82:	6010      	str	r0, [r2, #0]
 8005a84:	7019      	strb	r1, [r3, #0]
 8005a86:	4608      	mov	r0, r1
 8005a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <__sfputs_r>:
 8005a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a90:	4606      	mov	r6, r0
 8005a92:	460f      	mov	r7, r1
 8005a94:	4614      	mov	r4, r2
 8005a96:	18d5      	adds	r5, r2, r3
 8005a98:	42ac      	cmp	r4, r5
 8005a9a:	d101      	bne.n	8005aa0 <__sfputs_r+0x12>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e007      	b.n	8005ab0 <__sfputs_r+0x22>
 8005aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa4:	463a      	mov	r2, r7
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f7ff ffda 	bl	8005a60 <__sfputc_r>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d1f3      	bne.n	8005a98 <__sfputs_r+0xa>
 8005ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ab4 <_vfiprintf_r>:
 8005ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab8:	460d      	mov	r5, r1
 8005aba:	b09d      	sub	sp, #116	@ 0x74
 8005abc:	4614      	mov	r4, r2
 8005abe:	4698      	mov	r8, r3
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	b118      	cbz	r0, 8005acc <_vfiprintf_r+0x18>
 8005ac4:	6a03      	ldr	r3, [r0, #32]
 8005ac6:	b90b      	cbnz	r3, 8005acc <_vfiprintf_r+0x18>
 8005ac8:	f7ff fcd2 	bl	8005470 <__sinit>
 8005acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ace:	07d9      	lsls	r1, r3, #31
 8005ad0:	d405      	bmi.n	8005ade <_vfiprintf_r+0x2a>
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	059a      	lsls	r2, r3, #22
 8005ad6:	d402      	bmi.n	8005ade <_vfiprintf_r+0x2a>
 8005ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ada:	f7ff feb8 	bl	800584e <__retarget_lock_acquire_recursive>
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	071b      	lsls	r3, r3, #28
 8005ae2:	d501      	bpl.n	8005ae8 <_vfiprintf_r+0x34>
 8005ae4:	692b      	ldr	r3, [r5, #16]
 8005ae6:	b99b      	cbnz	r3, 8005b10 <_vfiprintf_r+0x5c>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4630      	mov	r0, r6
 8005aec:	f7ff fd8a 	bl	8005604 <__swsetup_r>
 8005af0:	b170      	cbz	r0, 8005b10 <_vfiprintf_r+0x5c>
 8005af2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005af4:	07dc      	lsls	r4, r3, #31
 8005af6:	d504      	bpl.n	8005b02 <_vfiprintf_r+0x4e>
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	b01d      	add	sp, #116	@ 0x74
 8005afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b02:	89ab      	ldrh	r3, [r5, #12]
 8005b04:	0598      	lsls	r0, r3, #22
 8005b06:	d4f7      	bmi.n	8005af8 <_vfiprintf_r+0x44>
 8005b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b0a:	f7ff fea1 	bl	8005850 <__retarget_lock_release_recursive>
 8005b0e:	e7f3      	b.n	8005af8 <_vfiprintf_r+0x44>
 8005b10:	2300      	movs	r3, #0
 8005b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b14:	2320      	movs	r3, #32
 8005b16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b1e:	2330      	movs	r3, #48	@ 0x30
 8005b20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005cd0 <_vfiprintf_r+0x21c>
 8005b24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b28:	f04f 0901 	mov.w	r9, #1
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	469a      	mov	sl, r3
 8005b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b34:	b10a      	cbz	r2, 8005b3a <_vfiprintf_r+0x86>
 8005b36:	2a25      	cmp	r2, #37	@ 0x25
 8005b38:	d1f9      	bne.n	8005b2e <_vfiprintf_r+0x7a>
 8005b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8005b3e:	d00b      	beq.n	8005b58 <_vfiprintf_r+0xa4>
 8005b40:	465b      	mov	r3, fp
 8005b42:	4622      	mov	r2, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7ff ffa1 	bl	8005a8e <__sfputs_r>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f000 80a7 	beq.w	8005ca0 <_vfiprintf_r+0x1ec>
 8005b52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b54:	445a      	add	r2, fp
 8005b56:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b58:	f89a 3000 	ldrb.w	r3, [sl]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 809f 	beq.w	8005ca0 <_vfiprintf_r+0x1ec>
 8005b62:	2300      	movs	r3, #0
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b6c:	f10a 0a01 	add.w	sl, sl, #1
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b78:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b7a:	4654      	mov	r4, sl
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b82:	4853      	ldr	r0, [pc, #332]	@ (8005cd0 <_vfiprintf_r+0x21c>)
 8005b84:	f7fa fb2c 	bl	80001e0 <memchr>
 8005b88:	9a04      	ldr	r2, [sp, #16]
 8005b8a:	b9d8      	cbnz	r0, 8005bc4 <_vfiprintf_r+0x110>
 8005b8c:	06d1      	lsls	r1, r2, #27
 8005b8e:	bf44      	itt	mi
 8005b90:	2320      	movmi	r3, #32
 8005b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b96:	0713      	lsls	r3, r2, #28
 8005b98:	bf44      	itt	mi
 8005b9a:	232b      	movmi	r3, #43	@ 0x2b
 8005b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ba6:	d015      	beq.n	8005bd4 <_vfiprintf_r+0x120>
 8005ba8:	9a07      	ldr	r2, [sp, #28]
 8005baa:	4654      	mov	r4, sl
 8005bac:	2000      	movs	r0, #0
 8005bae:	f04f 0c0a 	mov.w	ip, #10
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bb8:	3b30      	subs	r3, #48	@ 0x30
 8005bba:	2b09      	cmp	r3, #9
 8005bbc:	d94b      	bls.n	8005c56 <_vfiprintf_r+0x1a2>
 8005bbe:	b1b0      	cbz	r0, 8005bee <_vfiprintf_r+0x13a>
 8005bc0:	9207      	str	r2, [sp, #28]
 8005bc2:	e014      	b.n	8005bee <_vfiprintf_r+0x13a>
 8005bc4:	eba0 0308 	sub.w	r3, r0, r8
 8005bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	9304      	str	r3, [sp, #16]
 8005bd0:	46a2      	mov	sl, r4
 8005bd2:	e7d2      	b.n	8005b7a <_vfiprintf_r+0xc6>
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	1d19      	adds	r1, r3, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	9103      	str	r1, [sp, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfbb      	ittet	lt
 8005be0:	425b      	neglt	r3, r3
 8005be2:	f042 0202 	orrlt.w	r2, r2, #2
 8005be6:	9307      	strge	r3, [sp, #28]
 8005be8:	9307      	strlt	r3, [sp, #28]
 8005bea:	bfb8      	it	lt
 8005bec:	9204      	strlt	r2, [sp, #16]
 8005bee:	7823      	ldrb	r3, [r4, #0]
 8005bf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bf2:	d10a      	bne.n	8005c0a <_vfiprintf_r+0x156>
 8005bf4:	7863      	ldrb	r3, [r4, #1]
 8005bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf8:	d132      	bne.n	8005c60 <_vfiprintf_r+0x1ac>
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	1d1a      	adds	r2, r3, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	9203      	str	r2, [sp, #12]
 8005c02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c06:	3402      	adds	r4, #2
 8005c08:	9305      	str	r3, [sp, #20]
 8005c0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ce0 <_vfiprintf_r+0x22c>
 8005c0e:	7821      	ldrb	r1, [r4, #0]
 8005c10:	2203      	movs	r2, #3
 8005c12:	4650      	mov	r0, sl
 8005c14:	f7fa fae4 	bl	80001e0 <memchr>
 8005c18:	b138      	cbz	r0, 8005c2a <_vfiprintf_r+0x176>
 8005c1a:	9b04      	ldr	r3, [sp, #16]
 8005c1c:	eba0 000a 	sub.w	r0, r0, sl
 8005c20:	2240      	movs	r2, #64	@ 0x40
 8005c22:	4082      	lsls	r2, r0
 8005c24:	4313      	orrs	r3, r2
 8005c26:	3401      	adds	r4, #1
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2e:	4829      	ldr	r0, [pc, #164]	@ (8005cd4 <_vfiprintf_r+0x220>)
 8005c30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c34:	2206      	movs	r2, #6
 8005c36:	f7fa fad3 	bl	80001e0 <memchr>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d03f      	beq.n	8005cbe <_vfiprintf_r+0x20a>
 8005c3e:	4b26      	ldr	r3, [pc, #152]	@ (8005cd8 <_vfiprintf_r+0x224>)
 8005c40:	bb1b      	cbnz	r3, 8005c8a <_vfiprintf_r+0x1d6>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	3307      	adds	r3, #7
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c50:	443b      	add	r3, r7
 8005c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c54:	e76a      	b.n	8005b2c <_vfiprintf_r+0x78>
 8005c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	e7a8      	b.n	8005bb2 <_vfiprintf_r+0xfe>
 8005c60:	2300      	movs	r3, #0
 8005c62:	3401      	adds	r4, #1
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	4619      	mov	r1, r3
 8005c68:	f04f 0c0a 	mov.w	ip, #10
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c72:	3a30      	subs	r2, #48	@ 0x30
 8005c74:	2a09      	cmp	r2, #9
 8005c76:	d903      	bls.n	8005c80 <_vfiprintf_r+0x1cc>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0c6      	beq.n	8005c0a <_vfiprintf_r+0x156>
 8005c7c:	9105      	str	r1, [sp, #20]
 8005c7e:	e7c4      	b.n	8005c0a <_vfiprintf_r+0x156>
 8005c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c84:	4604      	mov	r4, r0
 8005c86:	2301      	movs	r3, #1
 8005c88:	e7f0      	b.n	8005c6c <_vfiprintf_r+0x1b8>
 8005c8a:	ab03      	add	r3, sp, #12
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	462a      	mov	r2, r5
 8005c90:	4b12      	ldr	r3, [pc, #72]	@ (8005cdc <_vfiprintf_r+0x228>)
 8005c92:	a904      	add	r1, sp, #16
 8005c94:	4630      	mov	r0, r6
 8005c96:	f3af 8000 	nop.w
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	1c78      	adds	r0, r7, #1
 8005c9e:	d1d6      	bne.n	8005c4e <_vfiprintf_r+0x19a>
 8005ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ca2:	07d9      	lsls	r1, r3, #31
 8005ca4:	d405      	bmi.n	8005cb2 <_vfiprintf_r+0x1fe>
 8005ca6:	89ab      	ldrh	r3, [r5, #12]
 8005ca8:	059a      	lsls	r2, r3, #22
 8005caa:	d402      	bmi.n	8005cb2 <_vfiprintf_r+0x1fe>
 8005cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cae:	f7ff fdcf 	bl	8005850 <__retarget_lock_release_recursive>
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	065b      	lsls	r3, r3, #25
 8005cb6:	f53f af1f 	bmi.w	8005af8 <_vfiprintf_r+0x44>
 8005cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cbc:	e71e      	b.n	8005afc <_vfiprintf_r+0x48>
 8005cbe:	ab03      	add	r3, sp, #12
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	462a      	mov	r2, r5
 8005cc4:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <_vfiprintf_r+0x228>)
 8005cc6:	a904      	add	r1, sp, #16
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f000 f879 	bl	8005dc0 <_printf_i>
 8005cce:	e7e4      	b.n	8005c9a <_vfiprintf_r+0x1e6>
 8005cd0:	080063f0 	.word	0x080063f0
 8005cd4:	080063fa 	.word	0x080063fa
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	08005a8f 	.word	0x08005a8f
 8005ce0:	080063f6 	.word	0x080063f6

08005ce4 <_printf_common>:
 8005ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	4616      	mov	r6, r2
 8005cea:	4698      	mov	r8, r3
 8005cec:	688a      	ldr	r2, [r1, #8]
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	bfb8      	it	lt
 8005cf8:	4613      	movlt	r3, r2
 8005cfa:	6033      	str	r3, [r6, #0]
 8005cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d00:	4607      	mov	r7, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	b10a      	cbz	r2, 8005d0a <_printf_common+0x26>
 8005d06:	3301      	adds	r3, #1
 8005d08:	6033      	str	r3, [r6, #0]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	0699      	lsls	r1, r3, #26
 8005d0e:	bf42      	ittt	mi
 8005d10:	6833      	ldrmi	r3, [r6, #0]
 8005d12:	3302      	addmi	r3, #2
 8005d14:	6033      	strmi	r3, [r6, #0]
 8005d16:	6825      	ldr	r5, [r4, #0]
 8005d18:	f015 0506 	ands.w	r5, r5, #6
 8005d1c:	d106      	bne.n	8005d2c <_printf_common+0x48>
 8005d1e:	f104 0a19 	add.w	sl, r4, #25
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	6832      	ldr	r2, [r6, #0]
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	42ab      	cmp	r3, r5
 8005d2a:	dc26      	bgt.n	8005d7a <_printf_common+0x96>
 8005d2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	3b00      	subs	r3, #0
 8005d34:	bf18      	it	ne
 8005d36:	2301      	movne	r3, #1
 8005d38:	0692      	lsls	r2, r2, #26
 8005d3a:	d42b      	bmi.n	8005d94 <_printf_common+0xb0>
 8005d3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d40:	4641      	mov	r1, r8
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c8      	blx	r9
 8005d46:	3001      	adds	r0, #1
 8005d48:	d01e      	beq.n	8005d88 <_printf_common+0xa4>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	6922      	ldr	r2, [r4, #16]
 8005d4e:	f003 0306 	and.w	r3, r3, #6
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	bf02      	ittt	eq
 8005d56:	68e5      	ldreq	r5, [r4, #12]
 8005d58:	6833      	ldreq	r3, [r6, #0]
 8005d5a:	1aed      	subeq	r5, r5, r3
 8005d5c:	68a3      	ldr	r3, [r4, #8]
 8005d5e:	bf0c      	ite	eq
 8005d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d64:	2500      	movne	r5, #0
 8005d66:	4293      	cmp	r3, r2
 8005d68:	bfc4      	itt	gt
 8005d6a:	1a9b      	subgt	r3, r3, r2
 8005d6c:	18ed      	addgt	r5, r5, r3
 8005d6e:	2600      	movs	r6, #0
 8005d70:	341a      	adds	r4, #26
 8005d72:	42b5      	cmp	r5, r6
 8005d74:	d11a      	bne.n	8005dac <_printf_common+0xc8>
 8005d76:	2000      	movs	r0, #0
 8005d78:	e008      	b.n	8005d8c <_printf_common+0xa8>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	4641      	mov	r1, r8
 8005d80:	4638      	mov	r0, r7
 8005d82:	47c8      	blx	r9
 8005d84:	3001      	adds	r0, #1
 8005d86:	d103      	bne.n	8005d90 <_printf_common+0xac>
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d90:	3501      	adds	r5, #1
 8005d92:	e7c6      	b.n	8005d22 <_printf_common+0x3e>
 8005d94:	18e1      	adds	r1, r4, r3
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	2030      	movs	r0, #48	@ 0x30
 8005d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d9e:	4422      	add	r2, r4
 8005da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005da8:	3302      	adds	r3, #2
 8005daa:	e7c7      	b.n	8005d3c <_printf_common+0x58>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4622      	mov	r2, r4
 8005db0:	4641      	mov	r1, r8
 8005db2:	4638      	mov	r0, r7
 8005db4:	47c8      	blx	r9
 8005db6:	3001      	adds	r0, #1
 8005db8:	d0e6      	beq.n	8005d88 <_printf_common+0xa4>
 8005dba:	3601      	adds	r6, #1
 8005dbc:	e7d9      	b.n	8005d72 <_printf_common+0x8e>
	...

08005dc0 <_printf_i>:
 8005dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	7e0f      	ldrb	r7, [r1, #24]
 8005dc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dc8:	2f78      	cmp	r7, #120	@ 0x78
 8005dca:	4691      	mov	r9, r2
 8005dcc:	4680      	mov	r8, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	469a      	mov	sl, r3
 8005dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dd6:	d807      	bhi.n	8005de8 <_printf_i+0x28>
 8005dd8:	2f62      	cmp	r7, #98	@ 0x62
 8005dda:	d80a      	bhi.n	8005df2 <_printf_i+0x32>
 8005ddc:	2f00      	cmp	r7, #0
 8005dde:	f000 80d2 	beq.w	8005f86 <_printf_i+0x1c6>
 8005de2:	2f58      	cmp	r7, #88	@ 0x58
 8005de4:	f000 80b9 	beq.w	8005f5a <_printf_i+0x19a>
 8005de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005df0:	e03a      	b.n	8005e68 <_printf_i+0xa8>
 8005df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005df6:	2b15      	cmp	r3, #21
 8005df8:	d8f6      	bhi.n	8005de8 <_printf_i+0x28>
 8005dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8005e00 <_printf_i+0x40>)
 8005dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e00:	08005e59 	.word	0x08005e59
 8005e04:	08005e6d 	.word	0x08005e6d
 8005e08:	08005de9 	.word	0x08005de9
 8005e0c:	08005de9 	.word	0x08005de9
 8005e10:	08005de9 	.word	0x08005de9
 8005e14:	08005de9 	.word	0x08005de9
 8005e18:	08005e6d 	.word	0x08005e6d
 8005e1c:	08005de9 	.word	0x08005de9
 8005e20:	08005de9 	.word	0x08005de9
 8005e24:	08005de9 	.word	0x08005de9
 8005e28:	08005de9 	.word	0x08005de9
 8005e2c:	08005f6d 	.word	0x08005f6d
 8005e30:	08005e97 	.word	0x08005e97
 8005e34:	08005f27 	.word	0x08005f27
 8005e38:	08005de9 	.word	0x08005de9
 8005e3c:	08005de9 	.word	0x08005de9
 8005e40:	08005f8f 	.word	0x08005f8f
 8005e44:	08005de9 	.word	0x08005de9
 8005e48:	08005e97 	.word	0x08005e97
 8005e4c:	08005de9 	.word	0x08005de9
 8005e50:	08005de9 	.word	0x08005de9
 8005e54:	08005f2f 	.word	0x08005f2f
 8005e58:	6833      	ldr	r3, [r6, #0]
 8005e5a:	1d1a      	adds	r2, r3, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6032      	str	r2, [r6, #0]
 8005e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e09d      	b.n	8005fa8 <_printf_i+0x1e8>
 8005e6c:	6833      	ldr	r3, [r6, #0]
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	1d19      	adds	r1, r3, #4
 8005e72:	6031      	str	r1, [r6, #0]
 8005e74:	0606      	lsls	r6, r0, #24
 8005e76:	d501      	bpl.n	8005e7c <_printf_i+0xbc>
 8005e78:	681d      	ldr	r5, [r3, #0]
 8005e7a:	e003      	b.n	8005e84 <_printf_i+0xc4>
 8005e7c:	0645      	lsls	r5, r0, #25
 8005e7e:	d5fb      	bpl.n	8005e78 <_printf_i+0xb8>
 8005e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e84:	2d00      	cmp	r5, #0
 8005e86:	da03      	bge.n	8005e90 <_printf_i+0xd0>
 8005e88:	232d      	movs	r3, #45	@ 0x2d
 8005e8a:	426d      	negs	r5, r5
 8005e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e90:	4859      	ldr	r0, [pc, #356]	@ (8005ff8 <_printf_i+0x238>)
 8005e92:	230a      	movs	r3, #10
 8005e94:	e011      	b.n	8005eba <_printf_i+0xfa>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	0608      	lsls	r0, r1, #24
 8005e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ea0:	d402      	bmi.n	8005ea8 <_printf_i+0xe8>
 8005ea2:	0649      	lsls	r1, r1, #25
 8005ea4:	bf48      	it	mi
 8005ea6:	b2ad      	uxthmi	r5, r5
 8005ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eaa:	4853      	ldr	r0, [pc, #332]	@ (8005ff8 <_printf_i+0x238>)
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	bf14      	ite	ne
 8005eb0:	230a      	movne	r3, #10
 8005eb2:	2308      	moveq	r3, #8
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eba:	6866      	ldr	r6, [r4, #4]
 8005ebc:	60a6      	str	r6, [r4, #8]
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	bfa2      	ittt	ge
 8005ec2:	6821      	ldrge	r1, [r4, #0]
 8005ec4:	f021 0104 	bicge.w	r1, r1, #4
 8005ec8:	6021      	strge	r1, [r4, #0]
 8005eca:	b90d      	cbnz	r5, 8005ed0 <_printf_i+0x110>
 8005ecc:	2e00      	cmp	r6, #0
 8005ece:	d04b      	beq.n	8005f68 <_printf_i+0x1a8>
 8005ed0:	4616      	mov	r6, r2
 8005ed2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ed6:	fb03 5711 	mls	r7, r3, r1, r5
 8005eda:	5dc7      	ldrb	r7, [r0, r7]
 8005edc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ee0:	462f      	mov	r7, r5
 8005ee2:	42bb      	cmp	r3, r7
 8005ee4:	460d      	mov	r5, r1
 8005ee6:	d9f4      	bls.n	8005ed2 <_printf_i+0x112>
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d10b      	bne.n	8005f04 <_printf_i+0x144>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	07df      	lsls	r7, r3, #31
 8005ef0:	d508      	bpl.n	8005f04 <_printf_i+0x144>
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	6861      	ldr	r1, [r4, #4]
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	bfde      	ittt	le
 8005efa:	2330      	movle	r3, #48	@ 0x30
 8005efc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f04:	1b92      	subs	r2, r2, r6
 8005f06:	6122      	str	r2, [r4, #16]
 8005f08:	f8cd a000 	str.w	sl, [sp]
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	aa03      	add	r2, sp, #12
 8005f10:	4621      	mov	r1, r4
 8005f12:	4640      	mov	r0, r8
 8005f14:	f7ff fee6 	bl	8005ce4 <_printf_common>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d14a      	bne.n	8005fb2 <_printf_i+0x1f2>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	b004      	add	sp, #16
 8005f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	f043 0320 	orr.w	r3, r3, #32
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	4833      	ldr	r0, [pc, #204]	@ (8005ffc <_printf_i+0x23c>)
 8005f30:	2778      	movs	r7, #120	@ 0x78
 8005f32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	6831      	ldr	r1, [r6, #0]
 8005f3a:	061f      	lsls	r7, r3, #24
 8005f3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f40:	d402      	bmi.n	8005f48 <_printf_i+0x188>
 8005f42:	065f      	lsls	r7, r3, #25
 8005f44:	bf48      	it	mi
 8005f46:	b2ad      	uxthmi	r5, r5
 8005f48:	6031      	str	r1, [r6, #0]
 8005f4a:	07d9      	lsls	r1, r3, #31
 8005f4c:	bf44      	itt	mi
 8005f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f52:	6023      	strmi	r3, [r4, #0]
 8005f54:	b11d      	cbz	r5, 8005f5e <_printf_i+0x19e>
 8005f56:	2310      	movs	r3, #16
 8005f58:	e7ac      	b.n	8005eb4 <_printf_i+0xf4>
 8005f5a:	4827      	ldr	r0, [pc, #156]	@ (8005ff8 <_printf_i+0x238>)
 8005f5c:	e7e9      	b.n	8005f32 <_printf_i+0x172>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	f023 0320 	bic.w	r3, r3, #32
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	e7f6      	b.n	8005f56 <_printf_i+0x196>
 8005f68:	4616      	mov	r6, r2
 8005f6a:	e7bd      	b.n	8005ee8 <_printf_i+0x128>
 8005f6c:	6833      	ldr	r3, [r6, #0]
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	6961      	ldr	r1, [r4, #20]
 8005f72:	1d18      	adds	r0, r3, #4
 8005f74:	6030      	str	r0, [r6, #0]
 8005f76:	062e      	lsls	r6, r5, #24
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	d501      	bpl.n	8005f80 <_printf_i+0x1c0>
 8005f7c:	6019      	str	r1, [r3, #0]
 8005f7e:	e002      	b.n	8005f86 <_printf_i+0x1c6>
 8005f80:	0668      	lsls	r0, r5, #25
 8005f82:	d5fb      	bpl.n	8005f7c <_printf_i+0x1bc>
 8005f84:	8019      	strh	r1, [r3, #0]
 8005f86:	2300      	movs	r3, #0
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	4616      	mov	r6, r2
 8005f8c:	e7bc      	b.n	8005f08 <_printf_i+0x148>
 8005f8e:	6833      	ldr	r3, [r6, #0]
 8005f90:	1d1a      	adds	r2, r3, #4
 8005f92:	6032      	str	r2, [r6, #0]
 8005f94:	681e      	ldr	r6, [r3, #0]
 8005f96:	6862      	ldr	r2, [r4, #4]
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7fa f920 	bl	80001e0 <memchr>
 8005fa0:	b108      	cbz	r0, 8005fa6 <_printf_i+0x1e6>
 8005fa2:	1b80      	subs	r0, r0, r6
 8005fa4:	6060      	str	r0, [r4, #4]
 8005fa6:	6863      	ldr	r3, [r4, #4]
 8005fa8:	6123      	str	r3, [r4, #16]
 8005faa:	2300      	movs	r3, #0
 8005fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb0:	e7aa      	b.n	8005f08 <_printf_i+0x148>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4640      	mov	r0, r8
 8005fba:	47d0      	blx	sl
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d0ad      	beq.n	8005f1c <_printf_i+0x15c>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	079b      	lsls	r3, r3, #30
 8005fc4:	d413      	bmi.n	8005fee <_printf_i+0x22e>
 8005fc6:	68e0      	ldr	r0, [r4, #12]
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	4298      	cmp	r0, r3
 8005fcc:	bfb8      	it	lt
 8005fce:	4618      	movlt	r0, r3
 8005fd0:	e7a6      	b.n	8005f20 <_printf_i+0x160>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4640      	mov	r0, r8
 8005fda:	47d0      	blx	sl
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d09d      	beq.n	8005f1c <_printf_i+0x15c>
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	9903      	ldr	r1, [sp, #12]
 8005fe6:	1a5b      	subs	r3, r3, r1
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	dcf2      	bgt.n	8005fd2 <_printf_i+0x212>
 8005fec:	e7eb      	b.n	8005fc6 <_printf_i+0x206>
 8005fee:	2500      	movs	r5, #0
 8005ff0:	f104 0619 	add.w	r6, r4, #25
 8005ff4:	e7f5      	b.n	8005fe2 <_printf_i+0x222>
 8005ff6:	bf00      	nop
 8005ff8:	08006401 	.word	0x08006401
 8005ffc:	08006412 	.word	0x08006412

08006000 <__sflush_r>:
 8006000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006008:	0716      	lsls	r6, r2, #28
 800600a:	4605      	mov	r5, r0
 800600c:	460c      	mov	r4, r1
 800600e:	d454      	bmi.n	80060ba <__sflush_r+0xba>
 8006010:	684b      	ldr	r3, [r1, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	dc02      	bgt.n	800601c <__sflush_r+0x1c>
 8006016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	dd48      	ble.n	80060ae <__sflush_r+0xae>
 800601c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800601e:	2e00      	cmp	r6, #0
 8006020:	d045      	beq.n	80060ae <__sflush_r+0xae>
 8006022:	2300      	movs	r3, #0
 8006024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006028:	682f      	ldr	r7, [r5, #0]
 800602a:	6a21      	ldr	r1, [r4, #32]
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	d030      	beq.n	8006092 <__sflush_r+0x92>
 8006030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	0759      	lsls	r1, r3, #29
 8006036:	d505      	bpl.n	8006044 <__sflush_r+0x44>
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800603e:	b10b      	cbz	r3, 8006044 <__sflush_r+0x44>
 8006040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	2300      	movs	r3, #0
 8006046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006048:	6a21      	ldr	r1, [r4, #32]
 800604a:	4628      	mov	r0, r5
 800604c:	47b0      	blx	r6
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	d106      	bne.n	8006062 <__sflush_r+0x62>
 8006054:	6829      	ldr	r1, [r5, #0]
 8006056:	291d      	cmp	r1, #29
 8006058:	d82b      	bhi.n	80060b2 <__sflush_r+0xb2>
 800605a:	4a2a      	ldr	r2, [pc, #168]	@ (8006104 <__sflush_r+0x104>)
 800605c:	410a      	asrs	r2, r1
 800605e:	07d6      	lsls	r6, r2, #31
 8006060:	d427      	bmi.n	80060b2 <__sflush_r+0xb2>
 8006062:	2200      	movs	r2, #0
 8006064:	6062      	str	r2, [r4, #4]
 8006066:	04d9      	lsls	r1, r3, #19
 8006068:	6922      	ldr	r2, [r4, #16]
 800606a:	6022      	str	r2, [r4, #0]
 800606c:	d504      	bpl.n	8006078 <__sflush_r+0x78>
 800606e:	1c42      	adds	r2, r0, #1
 8006070:	d101      	bne.n	8006076 <__sflush_r+0x76>
 8006072:	682b      	ldr	r3, [r5, #0]
 8006074:	b903      	cbnz	r3, 8006078 <__sflush_r+0x78>
 8006076:	6560      	str	r0, [r4, #84]	@ 0x54
 8006078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800607a:	602f      	str	r7, [r5, #0]
 800607c:	b1b9      	cbz	r1, 80060ae <__sflush_r+0xae>
 800607e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006082:	4299      	cmp	r1, r3
 8006084:	d002      	beq.n	800608c <__sflush_r+0x8c>
 8006086:	4628      	mov	r0, r5
 8006088:	f7ff fbf2 	bl	8005870 <_free_r>
 800608c:	2300      	movs	r3, #0
 800608e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006090:	e00d      	b.n	80060ae <__sflush_r+0xae>
 8006092:	2301      	movs	r3, #1
 8006094:	4628      	mov	r0, r5
 8006096:	47b0      	blx	r6
 8006098:	4602      	mov	r2, r0
 800609a:	1c50      	adds	r0, r2, #1
 800609c:	d1c9      	bne.n	8006032 <__sflush_r+0x32>
 800609e:	682b      	ldr	r3, [r5, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0c6      	beq.n	8006032 <__sflush_r+0x32>
 80060a4:	2b1d      	cmp	r3, #29
 80060a6:	d001      	beq.n	80060ac <__sflush_r+0xac>
 80060a8:	2b16      	cmp	r3, #22
 80060aa:	d11e      	bne.n	80060ea <__sflush_r+0xea>
 80060ac:	602f      	str	r7, [r5, #0]
 80060ae:	2000      	movs	r0, #0
 80060b0:	e022      	b.n	80060f8 <__sflush_r+0xf8>
 80060b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060b6:	b21b      	sxth	r3, r3
 80060b8:	e01b      	b.n	80060f2 <__sflush_r+0xf2>
 80060ba:	690f      	ldr	r7, [r1, #16]
 80060bc:	2f00      	cmp	r7, #0
 80060be:	d0f6      	beq.n	80060ae <__sflush_r+0xae>
 80060c0:	0793      	lsls	r3, r2, #30
 80060c2:	680e      	ldr	r6, [r1, #0]
 80060c4:	bf08      	it	eq
 80060c6:	694b      	ldreq	r3, [r1, #20]
 80060c8:	600f      	str	r7, [r1, #0]
 80060ca:	bf18      	it	ne
 80060cc:	2300      	movne	r3, #0
 80060ce:	eba6 0807 	sub.w	r8, r6, r7
 80060d2:	608b      	str	r3, [r1, #8]
 80060d4:	f1b8 0f00 	cmp.w	r8, #0
 80060d8:	dde9      	ble.n	80060ae <__sflush_r+0xae>
 80060da:	6a21      	ldr	r1, [r4, #32]
 80060dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80060de:	4643      	mov	r3, r8
 80060e0:	463a      	mov	r2, r7
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b0      	blx	r6
 80060e6:	2800      	cmp	r0, #0
 80060e8:	dc08      	bgt.n	80060fc <__sflush_r+0xfc>
 80060ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f2:	81a3      	strh	r3, [r4, #12]
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fc:	4407      	add	r7, r0
 80060fe:	eba8 0800 	sub.w	r8, r8, r0
 8006102:	e7e7      	b.n	80060d4 <__sflush_r+0xd4>
 8006104:	dfbffffe 	.word	0xdfbffffe

08006108 <_fflush_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	690b      	ldr	r3, [r1, #16]
 800610c:	4605      	mov	r5, r0
 800610e:	460c      	mov	r4, r1
 8006110:	b913      	cbnz	r3, 8006118 <_fflush_r+0x10>
 8006112:	2500      	movs	r5, #0
 8006114:	4628      	mov	r0, r5
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	b118      	cbz	r0, 8006122 <_fflush_r+0x1a>
 800611a:	6a03      	ldr	r3, [r0, #32]
 800611c:	b90b      	cbnz	r3, 8006122 <_fflush_r+0x1a>
 800611e:	f7ff f9a7 	bl	8005470 <__sinit>
 8006122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0f3      	beq.n	8006112 <_fflush_r+0xa>
 800612a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800612c:	07d0      	lsls	r0, r2, #31
 800612e:	d404      	bmi.n	800613a <_fflush_r+0x32>
 8006130:	0599      	lsls	r1, r3, #22
 8006132:	d402      	bmi.n	800613a <_fflush_r+0x32>
 8006134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006136:	f7ff fb8a 	bl	800584e <__retarget_lock_acquire_recursive>
 800613a:	4628      	mov	r0, r5
 800613c:	4621      	mov	r1, r4
 800613e:	f7ff ff5f 	bl	8006000 <__sflush_r>
 8006142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006144:	07da      	lsls	r2, r3, #31
 8006146:	4605      	mov	r5, r0
 8006148:	d4e4      	bmi.n	8006114 <_fflush_r+0xc>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	059b      	lsls	r3, r3, #22
 800614e:	d4e1      	bmi.n	8006114 <_fflush_r+0xc>
 8006150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006152:	f7ff fb7d 	bl	8005850 <__retarget_lock_release_recursive>
 8006156:	e7dd      	b.n	8006114 <_fflush_r+0xc>

08006158 <__swhatbuf_r>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	460c      	mov	r4, r1
 800615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006160:	2900      	cmp	r1, #0
 8006162:	b096      	sub	sp, #88	@ 0x58
 8006164:	4615      	mov	r5, r2
 8006166:	461e      	mov	r6, r3
 8006168:	da0d      	bge.n	8006186 <__swhatbuf_r+0x2e>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006170:	f04f 0100 	mov.w	r1, #0
 8006174:	bf14      	ite	ne
 8006176:	2340      	movne	r3, #64	@ 0x40
 8006178:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800617c:	2000      	movs	r0, #0
 800617e:	6031      	str	r1, [r6, #0]
 8006180:	602b      	str	r3, [r5, #0]
 8006182:	b016      	add	sp, #88	@ 0x58
 8006184:	bd70      	pop	{r4, r5, r6, pc}
 8006186:	466a      	mov	r2, sp
 8006188:	f000 f848 	bl	800621c <_fstat_r>
 800618c:	2800      	cmp	r0, #0
 800618e:	dbec      	blt.n	800616a <__swhatbuf_r+0x12>
 8006190:	9901      	ldr	r1, [sp, #4]
 8006192:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006196:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800619a:	4259      	negs	r1, r3
 800619c:	4159      	adcs	r1, r3
 800619e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061a2:	e7eb      	b.n	800617c <__swhatbuf_r+0x24>

080061a4 <__smakebuf_r>:
 80061a4:	898b      	ldrh	r3, [r1, #12]
 80061a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061a8:	079d      	lsls	r5, r3, #30
 80061aa:	4606      	mov	r6, r0
 80061ac:	460c      	mov	r4, r1
 80061ae:	d507      	bpl.n	80061c0 <__smakebuf_r+0x1c>
 80061b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	2301      	movs	r3, #1
 80061ba:	6163      	str	r3, [r4, #20]
 80061bc:	b003      	add	sp, #12
 80061be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c0:	ab01      	add	r3, sp, #4
 80061c2:	466a      	mov	r2, sp
 80061c4:	f7ff ffc8 	bl	8006158 <__swhatbuf_r>
 80061c8:	9f00      	ldr	r7, [sp, #0]
 80061ca:	4605      	mov	r5, r0
 80061cc:	4639      	mov	r1, r7
 80061ce:	4630      	mov	r0, r6
 80061d0:	f7ff fbba 	bl	8005948 <_malloc_r>
 80061d4:	b948      	cbnz	r0, 80061ea <__smakebuf_r+0x46>
 80061d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061da:	059a      	lsls	r2, r3, #22
 80061dc:	d4ee      	bmi.n	80061bc <__smakebuf_r+0x18>
 80061de:	f023 0303 	bic.w	r3, r3, #3
 80061e2:	f043 0302 	orr.w	r3, r3, #2
 80061e6:	81a3      	strh	r3, [r4, #12]
 80061e8:	e7e2      	b.n	80061b0 <__smakebuf_r+0xc>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	6020      	str	r0, [r4, #0]
 80061ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061fa:	b15b      	cbz	r3, 8006214 <__smakebuf_r+0x70>
 80061fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006200:	4630      	mov	r0, r6
 8006202:	f000 f81d 	bl	8006240 <_isatty_r>
 8006206:	b128      	cbz	r0, 8006214 <__smakebuf_r+0x70>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	81a3      	strh	r3, [r4, #12]
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	431d      	orrs	r5, r3
 8006218:	81a5      	strh	r5, [r4, #12]
 800621a:	e7cf      	b.n	80061bc <__smakebuf_r+0x18>

0800621c <_fstat_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4d07      	ldr	r5, [pc, #28]	@ (800623c <_fstat_r+0x20>)
 8006220:	2300      	movs	r3, #0
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	4611      	mov	r1, r2
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	f7fa fdc8 	bl	8000dbe <_fstat>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d102      	bne.n	8006238 <_fstat_r+0x1c>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	b103      	cbz	r3, 8006238 <_fstat_r+0x1c>
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	bd38      	pop	{r3, r4, r5, pc}
 800623a:	bf00      	nop
 800623c:	20004274 	.word	0x20004274

08006240 <_isatty_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d06      	ldr	r5, [pc, #24]	@ (800625c <_isatty_r+0x1c>)
 8006244:	2300      	movs	r3, #0
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fa fdc7 	bl	8000dde <_isatty>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_isatty_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_isatty_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	20004274 	.word	0x20004274

08006260 <_sbrk_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d06      	ldr	r5, [pc, #24]	@ (800627c <_sbrk_r+0x1c>)
 8006264:	2300      	movs	r3, #0
 8006266:	4604      	mov	r4, r0
 8006268:	4608      	mov	r0, r1
 800626a:	602b      	str	r3, [r5, #0]
 800626c:	f7fa fdd0 	bl	8000e10 <_sbrk>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_sbrk_r+0x1a>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	b103      	cbz	r3, 800627a <_sbrk_r+0x1a>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	20004274 	.word	0x20004274

08006280 <_init>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	bf00      	nop
 8006284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006286:	bc08      	pop	{r3}
 8006288:	469e      	mov	lr, r3
 800628a:	4770      	bx	lr

0800628c <_fini>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr
