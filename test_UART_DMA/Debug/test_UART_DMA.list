
test_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080040c8  080040c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004170  08004170  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004174  08004174  00005174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004178  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000068  080041e0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080041e0  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008917  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001985  00000000  00000000  0000e9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00010338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e0  00000000  00000000  00010af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016487  00000000  00000000  000110d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098c8  00000000  00000000  0002755f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087922  00000000  00000000  00030e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002658  00000000  00000000  000b878c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000bade4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040b0 	.word	0x080040b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080040b0 	.word	0x080040b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
#define INC_MYLIB_H_

extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	230a      	movs	r3, #10
 800057c:	2201      	movs	r2, #1
 800057e:	4804      	ldr	r0, [pc, #16]	@ (8000590 <__io_putchar+0x20>)
 8000580:	f001 ffda 	bl	8002538 <HAL_UART_Transmit>
	return ch;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000084 	.word	0x20000084

08000594 <ProgramStart>:

void ProgramStart()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	 printf("\033[2J");	// screen clear
 8000598:	480b      	ldr	r0, [pc, #44]	@ (80005c8 <ProgramStart+0x34>)
 800059a:	f002 feaf 	bl	80032fc <iprintf>
	 printf("\033[1;1H");	// Move cursor pos to (1,1)
 800059e:	480b      	ldr	r0, [pc, #44]	@ (80005cc <ProgramStart+0x38>)
 80005a0:	f002 feac 	bl	80032fc <iprintf>
	 printf("Program Started....Press Blue button to continue\r\n");
 80005a4:	480a      	ldr	r0, [pc, #40]	@ (80005d0 <ProgramStart+0x3c>)
 80005a6:	f002 ff11 	bl	80033cc <puts>
	 while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 80005aa:	bf00      	nop
 80005ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b0:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <ProgramStart+0x40>)
 80005b2:	f001 fa8f 	bl	8001ad4 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1f7      	bne.n	80005ac <ProgramStart+0x18>
	 printf("\033[2J");	// screen clear
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <ProgramStart+0x34>)
 80005be:	f002 fe9d 	bl	80032fc <iprintf>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	080040c8 	.word	0x080040c8
 80005cc:	080040d0 	.word	0x080040d0
 80005d0:	080040d8 	.word	0x080040d8
 80005d4:	40020800 	.word	0x40020800

080005d8 <GetBuffer>:
#define MAX_BUF 100
char buf[MAX_BUF];
char rx;
int head = 0, tail = 0;
int *GetBuffer(char *bb)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	int ret = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
	tail = MAX_BUF -huart2.hdmarx->Instance->NDTR;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <GetBuffer+0xc0>)
 80005e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <GetBuffer+0xc4>)
 80005f4:	601a      	str	r2, [r3, #0]
	if(tail > head)
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <GetBuffer+0xc4>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <GetBuffer+0xc8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	dd14      	ble.n	800062c <GetBuffer+0x54>
	{
		memcpy(bb, buf + head, tail - head);
 8000602:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <GetBuffer+0xc8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <GetBuffer+0xcc>)
 800060a:	18d1      	adds	r1, r2, r3
 800060c:	4b23      	ldr	r3, [pc, #140]	@ (800069c <GetBuffer+0xc4>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <GetBuffer+0xc8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	461a      	mov	r2, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f003 f832 	bl	8003682 <memcpy>
		ret = tail - head;
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <GetBuffer+0xc4>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <GetBuffer+0xc8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e026      	b.n	800067a <GetBuffer+0xa2>
	}
	else if(tail < head)
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <GetBuffer+0xc4>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <GetBuffer+0xc8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	da20      	bge.n	800067a <GetBuffer+0xa2>
	{
		memcpy(bb, buf + head, MAX_BUF - head);
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <GetBuffer+0xc8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <GetBuffer+0xcc>)
 8000640:	18d1      	adds	r1, r2, r3
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <GetBuffer+0xc8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800064a:	461a      	mov	r2, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f003 f818 	bl	8003682 <memcpy>
		memcpy(bb + MAX_BUF - head, buf, tail);
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <GetBuffer+0xc8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	4a0f      	ldr	r2, [pc, #60]	@ (800069c <GetBuffer+0xc4>)
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	4910      	ldr	r1, [pc, #64]	@ (80006a4 <GetBuffer+0xcc>)
 8000664:	4618      	mov	r0, r3
 8000666:	f003 f80c 	bl	8003682 <memcpy>
		ret = MAX_BUF - head + tail;
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <GetBuffer+0xc8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <GetBuffer+0xc4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
	}
	bb[ret]=0;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4413      	add	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	head = tail;
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <GetBuffer+0xc4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a05      	ldr	r2, [pc, #20]	@ (80006a0 <GetBuffer+0xc8>)
 800068a:	6013      	str	r3, [r2, #0]
	return;
 800068c:	bf00      	nop
 800068e:	bf00      	nop
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000084 	.word	0x20000084
 800069c:	20000198 	.word	0x20000198
 80006a0:	20000194 	.word	0x20000194
 80006a4:	2000012c 	.word	0x2000012c

080006a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	//if(HAL_UART_Receive(huart,buf, 1, 1) == HAL_OK);
	buf[tail++] = rx;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <HAL_UART_RxCpltCallback+0x3c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	490b      	ldr	r1, [pc, #44]	@ (80006e4 <HAL_UART_RxCpltCallback+0x3c>)
 80006b8:	600a      	str	r2, [r1, #0]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <HAL_UART_RxCpltCallback+0x40>)
 80006bc:	7811      	ldrb	r1, [r2, #0]
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <HAL_UART_RxCpltCallback+0x44>)
 80006c0:	54d1      	strb	r1, [r2, r3]
	if(tail >= MAX_BUF) tail = 0;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <HAL_UART_RxCpltCallback+0x3c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b63      	cmp	r3, #99	@ 0x63
 80006c8:	dd02      	ble.n	80006d0 <HAL_UART_RxCpltCallback+0x28>
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <HAL_UART_RxCpltCallback+0x3c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	//printf("%c"rx);
	HAL_UART_Receive_IT(huart,&rx, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	4905      	ldr	r1, [pc, #20]	@ (80006e8 <HAL_UART_RxCpltCallback+0x40>)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f001 ffba 	bl	800264e <HAL_UART_Receive_IT>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000198 	.word	0x20000198
 80006e8:	20000190 	.word	0x20000190
 80006ec:	2000012c 	.word	0x2000012c

080006f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09c      	sub	sp, #112	@ 0x70
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == A8_Pin)
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000700:	d10a      	bne.n	8000718 <HAL_GPIO_EXTI_Callback+0x28>
	{
		char bb[MAX_BUF];
		GetBuffer(bb);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff66 	bl	80005d8 <GetBuffer>
		printf("%s\r\n", bb);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	@ (8000720 <HAL_GPIO_EXTI_Callback+0x30>)
 8000714:	f002 fdf2 	bl	80032fc <iprintf>
		}
	}
	//else if(GPIO_Pin == SW1_Pin)
	 *
	 */
}
 8000718:	bf00      	nop
 800071a:	3770      	adds	r7, #112	@ 0x70
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	0800410c 	.word	0x0800410c

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09a      	sub	sp, #104	@ 0x68
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f000 fb37 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f823 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f000 f8d5 	bl	80008e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000736:	f000 f8b3 	bl	80008a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800073a:	f000 f887 	bl	800084c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart();
 800073e:	f7ff ff29 	bl	8000594 <ProgramStart>
  //HAL_UART_Receive_IT(&huart2,&rx, 1);
  HAL_UART_Receive_DMA(&huart2,buf, MAX_BUF);
 8000742:	2264      	movs	r2, #100	@ 0x64
 8000744:	4909      	ldr	r1, [pc, #36]	@ (800076c <main+0x48>)
 8000746:	480a      	ldr	r0, [pc, #40]	@ (8000770 <main+0x4c>)
 8000748:	f001 ffa6 	bl	8002698 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(GetBuffer(bb))printf("%s\r\n", bb);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff42 	bl	80005d8 <GetBuffer>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d004      	beq.n	8000764 <main+0x40>
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <main+0x50>)
 8000760:	f002 fdcc 	bl	80032fc <iprintf>
	  HAL_Delay(100);
 8000764:	2064      	movs	r0, #100	@ 0x64
 8000766:	f000 fb8b 	bl	8000e80 <HAL_Delay>
	  if(GetBuffer(bb))printf("%s\r\n", bb);
 800076a:	e7ef      	b.n	800074c <main+0x28>
 800076c:	2000012c 	.word	0x2000012c
 8000770:	20000084 	.word	0x20000084
 8000774:	0800410c 	.word	0x0800410c

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	@ 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f002 ff00 	bl	800358c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	@ (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a21      	ldr	r2, [pc, #132]	@ (8000848 <SystemClock_Config+0xd0>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e8:	2310      	movs	r3, #16
 80007ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f9b2 	bl	8001b68 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080a:	f000 f8f5 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2102      	movs	r1, #2
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fc14 	bl	8002058 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000836:	f000 f8df 	bl	80009f8 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	@ 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_USART2_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000884:	f001 fe08 	bl	8002498 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f8b3 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000084 	.word	0x20000084
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_DMA_Init+0x3c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a0b      	ldr	r2, [pc, #44]	@ (80008dc <MX_DMA_Init+0x3c>)
 80008b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_DMA_Init+0x3c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2010      	movs	r0, #16
 80008c8:	f000 fbd9 	bl	800107e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008cc:	2010      	movs	r0, #16
 80008ce:	f000 fbf2 	bl	80010b6 <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <MX_GPIO_Init+0x10c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a3b      	ldr	r2, [pc, #236]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b35      	ldr	r3, [pc, #212]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a34      	ldr	r2, [pc, #208]	@ (80009ec <MX_GPIO_Init+0x10c>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b32      	ldr	r3, [pc, #200]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a2d      	ldr	r2, [pc, #180]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a26      	ldr	r2, [pc, #152]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_GPIO_Init+0x10c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	4821      	ldr	r0, [pc, #132]	@ (80009f0 <MX_GPIO_Init+0x110>)
 800096c:	f001 f8ca 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000976:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	481b      	ldr	r0, [pc, #108]	@ (80009f4 <MX_GPIO_Init+0x114>)
 8000988:	f000 ff20 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098c:	2320      	movs	r3, #32
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <MX_GPIO_Init+0x110>)
 80009a4:	f000 ff12 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : A8_Pin */
  GPIO_InitStruct.Pin = A8_Pin;
 80009a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A8_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <MX_GPIO_Init+0x110>)
 80009c0:	f000 ff04 	bl	80017cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2017      	movs	r0, #23
 80009ca:	f000 fb58 	bl	800107e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009ce:	2017      	movs	r0, #23
 80009d0:	f000 fb71 	bl	80010b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2028      	movs	r0, #40	@ 0x28
 80009da:	f000 fb50 	bl	800107e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009de:	2028      	movs	r0, #40	@ 0x28
 80009e0:	f000 fb69 	bl	80010b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	@ 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020800 	.word	0x40020800

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a42:	2007      	movs	r0, #7
 8000a44:	f000 fb10 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a30      	ldr	r2, [pc, #192]	@ (8000b34 <HAL_UART_MspInit+0xe0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d15a      	bne.n	8000b2c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b2c      	ldr	r3, [pc, #176]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b28      	ldr	r3, [pc, #160]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481c      	ldr	r0, [pc, #112]	@ (8000b3c <HAL_UART_MspInit+0xe8>)
 8000aca:	f000 fe7f 	bl	80017cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b44 <HAL_UART_MspInit+0xf0>)
 8000ad2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000ad6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ada:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000aea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000afe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b02:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b10:	480b      	ldr	r0, [pc, #44]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000b12:	f000 faeb 	bl	80010ec <HAL_DMA_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b1c:	f7ff ff6c 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000b24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b26:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <HAL_UART_MspInit+0xec>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	200000cc 	.word	0x200000cc
 8000b44:	40026088 	.word	0x40026088

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 f94f 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <DMA1_Stream5_IRQHandler+0x10>)
 8000bae:	f000 fba3 	bl	80012f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000cc 	.word	0x200000cc

08000bbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A8_Pin);
 8000bc0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000bc4:	f000 ffb8 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bd4:	f000 ffb0 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e00a      	b.n	8000c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bee:	f3af 8000 	nop.w
 8000bf2:	4601      	mov	r1, r0
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	b2ca      	uxtb	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbf0      	blt.n	8000bee <_read+0x12>
  }

  return len;
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e009      	b.n	8000c3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fc9d 	bl	8000570 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf1      	blt.n	8000c28 <_write+0x12>
  }
  return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_close>:

int _close(int file)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c76:	605a      	str	r2, [r3, #4]
  return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_isatty>:

int _isatty(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <_sbrk+0x5c>)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <_sbrk+0x60>)
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <_sbrk+0x64>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <_sbrk+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d207      	bcs.n	8000cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce8:	f002 fc9e 	bl	8003628 <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20020000 	.word	0x20020000
 8000d18:	00000400 	.word	0x00000400
 8000d1c:	2000019c 	.word	0x2000019c
 8000d20:	200002f0 	.word	0x200002f0

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4c:	f7ff ffea 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d76:	f002 fc5d 	bl	8003634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fcd3 	bl	8000724 <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d8c:	08004178 	.word	0x08004178
  ldr r2, =_sbss
 8000d90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d94:	200002f0 	.word	0x200002f0

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f94f 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fe18 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f967 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f92f 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	200001a0 	.word	0x200001a0

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200001a0 	.word	0x200001a0

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	@ (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff29 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff3e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff31 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff feb6 	bl	8000e68 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e099      	b.n	800123c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2202      	movs	r2, #2
 800110c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001128:	e00f      	b.n	800114a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800112a:	f7ff fe9d 	bl	8000e68 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b05      	cmp	r3, #5
 8001136:	d908      	bls.n	800114a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2220      	movs	r2, #32
 800113c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2203      	movs	r2, #3
 8001142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e078      	b.n	800123c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e8      	bne.n	800112a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	4b38      	ldr	r3, [pc, #224]	@ (8001244 <HAL_DMA_Init+0x158>)
 8001164:	4013      	ands	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001176:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800118e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4313      	orrs	r3, r2
 800119a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d107      	bne.n	80011b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	4313      	orrs	r3, r2
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f023 0307 	bic.w	r3, r3, #7
 80011ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d117      	bne.n	800120e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00e      	beq.n	800120e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fa6f 	bl	80016d4 <DMA_CheckFifoParam>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2240      	movs	r2, #64	@ 0x40
 8001200:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800120a:	2301      	movs	r3, #1
 800120c:	e016      	b.n	800123c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fa26 	bl	8001668 <DMA_CalcBaseAndBitshift>
 800121c:	4603      	mov	r3, r0
 800121e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001224:	223f      	movs	r2, #63	@ 0x3f
 8001226:	409a      	lsls	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	f010803f 	.word	0xf010803f

08001248 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_DMA_Start_IT+0x26>
 800126a:	2302      	movs	r3, #2
 800126c:	e040      	b.n	80012f0 <HAL_DMA_Start_IT+0xa8>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d12f      	bne.n	80012e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2202      	movs	r2, #2
 8001286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f9b8 	bl	800160c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a0:	223f      	movs	r2, #63	@ 0x3f
 80012a2:	409a      	lsls	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0216 	orr.w	r2, r2, #22
 80012b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0208 	orr.w	r2, r2, #8
 80012ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0201 	orr.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	e005      	b.n	80012ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012ea:	2302      	movs	r3, #2
 80012ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001304:	4b8e      	ldr	r3, [pc, #568]	@ (8001540 <HAL_DMA_IRQHandler+0x248>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a8e      	ldr	r2, [pc, #568]	@ (8001544 <HAL_DMA_IRQHandler+0x24c>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0a9b      	lsrs	r3, r3, #10
 8001310:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001322:	2208      	movs	r2, #8
 8001324:	409a      	lsls	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01a      	beq.n	8001364 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0204 	bic.w	r2, r2, #4
 800134a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001350:	2208      	movs	r2, #8
 8001352:	409a      	lsls	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001368:	2201      	movs	r2, #1
 800136a:	409a      	lsls	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d012      	beq.n	800139a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001386:	2201      	movs	r2, #1
 8001388:	409a      	lsls	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001392:	f043 0202 	orr.w	r2, r3, #2
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139e:	2204      	movs	r2, #4
 80013a0:	409a      	lsls	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d012      	beq.n	80013d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00b      	beq.n	80013d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013bc:	2204      	movs	r2, #4
 80013be:	409a      	lsls	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c8:	f043 0204 	orr.w	r2, r3, #4
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d4:	2210      	movs	r2, #16
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d043      	beq.n	8001468 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d03c      	beq.n	8001468 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f2:	2210      	movs	r2, #16
 80013f4:	409a      	lsls	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d018      	beq.n	800143a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d108      	bne.n	8001428 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	d024      	beq.n	8001468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4798      	blx	r3
 8001426:	e01f      	b.n	8001468 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01b      	beq.n	8001468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4798      	blx	r3
 8001438:	e016      	b.n	8001468 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d107      	bne.n	8001458 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0208 	bic.w	r2, r2, #8
 8001456:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146c:	2220      	movs	r2, #32
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 808f 	beq.w	8001598 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8087 	beq.w	8001598 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148e:	2220      	movs	r2, #32
 8001490:	409a      	lsls	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d136      	bne.n	8001510 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0216 	bic.w	r2, r2, #22
 80014b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d103      	bne.n	80014d2 <HAL_DMA_IRQHandler+0x1da>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0208 	bic.w	r2, r2, #8
 80014e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e6:	223f      	movs	r2, #63	@ 0x3f
 80014e8:	409a      	lsls	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001502:	2b00      	cmp	r3, #0
 8001504:	d07e      	beq.n	8001604 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
        }
        return;
 800150e:	e079      	b.n	8001604 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01d      	beq.n	800155a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10d      	bne.n	8001548 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001530:	2b00      	cmp	r3, #0
 8001532:	d031      	beq.n	8001598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
 800153c:	e02c      	b.n	8001598 <HAL_DMA_IRQHandler+0x2a0>
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000
 8001544:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	4798      	blx	r3
 8001558:	e01e      	b.n	8001598 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10f      	bne.n	8001588 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0210 	bic.w	r2, r2, #16
 8001576:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159c:	2b00      	cmp	r3, #0
 800159e:	d032      	beq.n	8001606 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d022      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2205      	movs	r2, #5
 80015b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	3301      	adds	r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d307      	bcc.n	80015e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f2      	bne.n	80015c4 <HAL_DMA_IRQHandler+0x2cc>
 80015de:	e000      	b.n	80015e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
 8001602:	e000      	b.n	8001606 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001604:	bf00      	nop
    }
  }
}
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001628:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b40      	cmp	r3, #64	@ 0x40
 8001638:	d108      	bne.n	800164c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800164a:	e007      	b.n	800165c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	60da      	str	r2, [r3, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	3b10      	subs	r3, #16
 8001678:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <DMA_CalcBaseAndBitshift+0x64>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d909      	bls.n	80016aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	1d1a      	adds	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80016a8:	e007      	b.n	80016ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016b2:	f023 0303 	bic.w	r3, r3, #3
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	aaaaaaab 	.word	0xaaaaaaab
 80016d0:	0800412c 	.word	0x0800412c

080016d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d11f      	bne.n	800172e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d856      	bhi.n	80017a2 <DMA_CheckFifoParam+0xce>
 80016f4:	a201      	add	r2, pc, #4	@ (adr r2, 80016fc <DMA_CheckFifoParam+0x28>)
 80016f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fa:	bf00      	nop
 80016fc:	0800170d 	.word	0x0800170d
 8001700:	0800171f 	.word	0x0800171f
 8001704:	0800170d 	.word	0x0800170d
 8001708:	080017a3 	.word	0x080017a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001710:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d046      	beq.n	80017a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800171c:	e043      	b.n	80017a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001726:	d140      	bne.n	80017aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800172c:	e03d      	b.n	80017aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001736:	d121      	bne.n	800177c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d837      	bhi.n	80017ae <DMA_CheckFifoParam+0xda>
 800173e:	a201      	add	r2, pc, #4	@ (adr r2, 8001744 <DMA_CheckFifoParam+0x70>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001755 	.word	0x08001755
 8001748:	0800175b 	.word	0x0800175b
 800174c:	08001755 	.word	0x08001755
 8001750:	0800176d 	.word	0x0800176d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
      break;
 8001758:	e030      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d025      	beq.n	80017b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800176a:	e022      	b.n	80017b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001770:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001774:	d11f      	bne.n	80017b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800177a:	e01c      	b.n	80017b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d903      	bls.n	800178a <DMA_CheckFifoParam+0xb6>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d003      	beq.n	8001790 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001788:	e018      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
      break;
 800178e:	e015      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001794:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00e      	beq.n	80017ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
      break;
 80017a0:	e00b      	b.n	80017ba <DMA_CheckFifoParam+0xe6>
      break;
 80017a2:	bf00      	nop
 80017a4:	e00a      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017a6:	bf00      	nop
 80017a8:	e008      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017aa:	bf00      	nop
 80017ac:	e006      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017ae:	bf00      	nop
 80017b0:	e004      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017b2:	bf00      	nop
 80017b4:	e002      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;   
 80017b6:	bf00      	nop
 80017b8:	e000      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
    }
  } 
  
  return status; 
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e159      	b.n	8001a9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8148 	bne.w	8001a96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d005      	beq.n	800181e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	2b02      	cmp	r3, #2
 800181c:	d130      	bne.n	8001880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 0201 	and.w	r2, r3, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b03      	cmp	r3, #3
 800188a:	d017      	beq.n	80018bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d123      	bne.n	8001910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0203 	and.w	r2, r3, #3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80a2 	beq.w	8001a96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b57      	ldr	r3, [pc, #348]	@ (8001ab4 <HAL_GPIO_Init+0x2e8>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	4a56      	ldr	r2, [pc, #344]	@ (8001ab4 <HAL_GPIO_Init+0x2e8>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001960:	6453      	str	r3, [r2, #68]	@ 0x44
 8001962:	4b54      	ldr	r3, [pc, #336]	@ (8001ab4 <HAL_GPIO_Init+0x2e8>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196e:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_GPIO_Init+0x2ec>)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a49      	ldr	r2, [pc, #292]	@ (8001abc <HAL_GPIO_Init+0x2f0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <HAL_GPIO_Init+0x202>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a48      	ldr	r2, [pc, #288]	@ (8001ac0 <HAL_GPIO_Init+0x2f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x1fe>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a47      	ldr	r2, [pc, #284]	@ (8001ac4 <HAL_GPIO_Init+0x2f8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a46      	ldr	r2, [pc, #280]	@ (8001ac8 <HAL_GPIO_Init+0x2fc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x1f6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a45      	ldr	r2, [pc, #276]	@ (8001acc <HAL_GPIO_Init+0x300>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x1f2>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e008      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019be:	2307      	movs	r3, #7
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e004      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019ce:	2300      	movs	r3, #0
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f002 0203 	and.w	r2, r2, #3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4093      	lsls	r3, r2
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e0:	4935      	ldr	r1, [pc, #212]	@ (8001ab8 <HAL_GPIO_Init+0x2ec>)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ee:	4b38      	ldr	r3, [pc, #224]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a12:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a3c:	4a24      	ldr	r2, [pc, #144]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a42:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a66:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a90:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	f67f aea2 	bls.w	80017e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40013c00 	.word	0x40013c00

08001ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e001      	b.n	8001af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b20:	e003      	b.n	8001b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fdca 	bl	80006f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e267      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d075      	beq.n	8001c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b86:	4b88      	ldr	r3, [pc, #544]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d00c      	beq.n	8001bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	4b85      	ldr	r3, [pc, #532]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d112      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b82      	ldr	r3, [pc, #520]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001baa:	d10b      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	4b7e      	ldr	r3, [pc, #504]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d05b      	beq.n	8001c70 <HAL_RCC_OscConfig+0x108>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d157      	bne.n	8001c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e242      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x74>
 8001bce:	4b76      	ldr	r3, [pc, #472]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x98>
 8001be6:	4b70      	ldr	r3, [pc, #448]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6f      	ldr	r2, [pc, #444]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6c      	ldr	r2, [pc, #432]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001c00:	4b69      	ldr	r3, [pc, #420]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a68      	ldr	r2, [pc, #416]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a65      	ldr	r2, [pc, #404]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f922 	bl	8000e68 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff f91e 	bl	8000e68 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e207      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0xc0>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff f90e 	bl	8000e68 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff f90a 	bl	8000e68 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1f3      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	4b51      	ldr	r3, [pc, #324]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0xe8>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d11c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b44      	ldr	r3, [pc, #272]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	4b41      	ldr	r3, [pc, #260]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e1c7      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b3b      	ldr	r3, [pc, #236]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4937      	ldr	r1, [pc, #220]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e03a      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <HAL_RCC_OscConfig+0x244>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff f8c3 	bl	8000e68 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f8bf 	bl	8000e68 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1a8      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4925      	ldr	r1, [pc, #148]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <HAL_RCC_OscConfig+0x244>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f8a2 	bl	8000e68 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff f89e 	bl	8000e68 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e187      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d016      	beq.n	8001d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_RCC_OscConfig+0x248>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f882 	bl	8000e68 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff f87e 	bl	8000e68 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e167      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x200>
 8001d86:	e01b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_RCC_OscConfig+0x248>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f86b 	bl	8000e68 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	e00e      	b.n	8001db4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff f867 	bl	8000e68 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d907      	bls.n	8001db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e150      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	42470000 	.word	0x42470000
 8001db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b88      	ldr	r3, [pc, #544]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ea      	bne.n	8001d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8097 	beq.w	8001efc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b81      	ldr	r3, [pc, #516]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b77      	ldr	r3, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b74      	ldr	r3, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a73      	ldr	r2, [pc, #460]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7ff f827 	bl	8000e68 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7ff f823 	bl	8000e68 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e10c      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2ea>
 8001e44:	4b64      	ldr	r3, [pc, #400]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a63      	ldr	r2, [pc, #396]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x324>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x30c>
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e66:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0x324>
 8001e74:	4b58      	ldr	r3, [pc, #352]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a57      	ldr	r2, [pc, #348]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e80:	4b55      	ldr	r3, [pc, #340]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e84:	4a54      	ldr	r2, [pc, #336]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e86:	f023 0304 	bic.w	r3, r3, #4
 8001e8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d015      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe ffe8 	bl	8000e68 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7fe ffe4 	bl	8000e68 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0cb      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	4b49      	ldr	r3, [pc, #292]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0ee      	beq.n	8001e9c <HAL_RCC_OscConfig+0x334>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe ffd2 	bl	8000e68 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ffce 	bl	8000e68 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e0b5      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b39      	ldr	r3, [pc, #228]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	4a38      	ldr	r2, [pc, #224]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a1 	beq.w	8002048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f06:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d05c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d141      	bne.n	8001f9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe ffa2 	bl	8000e68 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe ff9e 	bl	8000e68 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e087      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	4b27      	ldr	r3, [pc, #156]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	491b      	ldr	r1, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe ff77 	bl	8000e68 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe ff73 	bl	8000e68 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e05c      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x416>
 8001f9c:	e054      	b.n	8002048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe ff60 	bl	8000e68 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe ff5c 	bl	8000e68 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e045      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x444>
 8001fca:	e03d      	b.n	8002048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e038      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x4ec>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d028      	beq.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d121      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d11a      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002014:	4013      	ands	r3, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800201a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0cc      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b68      	ldr	r3, [pc, #416]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d90c      	bls.n	8002094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b65      	ldr	r3, [pc, #404]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b63      	ldr	r3, [pc, #396]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b8      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a58      	ldr	r2, [pc, #352]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a52      	ldr	r2, [pc, #328]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b50      	ldr	r3, [pc, #320]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494d      	ldr	r1, [pc, #308]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b3f      	ldr	r3, [pc, #252]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e067      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4934      	ldr	r1, [pc, #208]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe fe8e 	bl	8000e68 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe fe8a 	bl	8000e68 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e032      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4916      	ldr	r1, [pc, #88]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490e      	ldr	r1, [pc, #56]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f821 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	490a      	ldr	r1, [pc, #40]	@ (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	4a09      	ldr	r2, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fdee 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00
 8002214:	40023800 	.word	0x40023800
 8002218:	08004114 	.word	0x08004114
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002228:	b094      	sub	sp, #80	@ 0x50
 800222a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002230:	2300      	movs	r3, #0
 8002232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002234:	2300      	movs	r3, #0
 8002236:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800223c:	4b79      	ldr	r3, [pc, #484]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d00d      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x40>
 8002248:	2b08      	cmp	r3, #8
 800224a:	f200 80e1 	bhi.w	8002410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x34>
 8002252:	2b04      	cmp	r3, #4
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x3a>
 8002256:	e0db      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b73      	ldr	r3, [pc, #460]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x204>)
 800225a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800225c:	e0db      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225e:	4b73      	ldr	r3, [pc, #460]	@ (800242c <HAL_RCC_GetSysClockFreq+0x208>)
 8002260:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002262:	e0d8      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002264:	4b6f      	ldr	r3, [pc, #444]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800226c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226e:	4b6d      	ldr	r3, [pc, #436]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b6a      	ldr	r3, [pc, #424]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	2200      	movs	r2, #0
 8002282:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002284:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228c:	633b      	str	r3, [r7, #48]	@ 0x30
 800228e:	2300      	movs	r3, #0
 8002290:	637b      	str	r3, [r7, #52]	@ 0x34
 8002292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002296:	4622      	mov	r2, r4
 8002298:	462b      	mov	r3, r5
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a8:	0150      	lsls	r0, r2, #5
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4621      	mov	r1, r4
 80022b0:	1a51      	subs	r1, r2, r1
 80022b2:	6139      	str	r1, [r7, #16]
 80022b4:	4629      	mov	r1, r5
 80022b6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022c8:	4659      	mov	r1, fp
 80022ca:	018b      	lsls	r3, r1, #6
 80022cc:	4651      	mov	r1, sl
 80022ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d2:	4651      	mov	r1, sl
 80022d4:	018a      	lsls	r2, r1, #6
 80022d6:	4651      	mov	r1, sl
 80022d8:	ebb2 0801 	subs.w	r8, r2, r1
 80022dc:	4659      	mov	r1, fp
 80022de:	eb63 0901 	sbc.w	r9, r3, r1
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f6:	4690      	mov	r8, r2
 80022f8:	4699      	mov	r9, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	eb18 0303 	adds.w	r3, r8, r3
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	462b      	mov	r3, r5
 8002304:	eb49 0303 	adc.w	r3, r9, r3
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002316:	4629      	mov	r1, r5
 8002318:	024b      	lsls	r3, r1, #9
 800231a:	4621      	mov	r1, r4
 800231c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002320:	4621      	mov	r1, r4
 8002322:	024a      	lsls	r2, r1, #9
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800232a:	2200      	movs	r2, #0
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002334:	f7fd ffa4 	bl	8000280 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4613      	mov	r3, r2
 800233e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002340:	e058      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002342:	4b38      	ldr	r3, [pc, #224]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	2200      	movs	r2, #0
 800234a:	4618      	mov	r0, r3
 800234c:	4611      	mov	r1, r2
 800234e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
 8002358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800235c:	4642      	mov	r2, r8
 800235e:	464b      	mov	r3, r9
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	0159      	lsls	r1, r3, #5
 800236a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800236e:	0150      	lsls	r0, r2, #5
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4641      	mov	r1, r8
 8002376:	ebb2 0a01 	subs.w	sl, r2, r1
 800237a:	4649      	mov	r1, r9
 800237c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800238c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002394:	ebb2 040a 	subs.w	r4, r2, sl
 8002398:	eb63 050b 	sbc.w	r5, r3, fp
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	00eb      	lsls	r3, r5, #3
 80023a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023aa:	00e2      	lsls	r2, r4, #3
 80023ac:	4614      	mov	r4, r2
 80023ae:	461d      	mov	r5, r3
 80023b0:	4643      	mov	r3, r8
 80023b2:	18e3      	adds	r3, r4, r3
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	464b      	mov	r3, r9
 80023b8:	eb45 0303 	adc.w	r3, r5, r3
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ca:	4629      	mov	r1, r5
 80023cc:	028b      	lsls	r3, r1, #10
 80023ce:	4621      	mov	r1, r4
 80023d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023d4:	4621      	mov	r1, r4
 80023d6:	028a      	lsls	r2, r1, #10
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023de:	2200      	movs	r2, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	61fa      	str	r2, [r7, #28]
 80023e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e8:	f7fd ff4a 	bl	8000280 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4613      	mov	r3, r2
 80023f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240e:	e002      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x204>)
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002418:	4618      	mov	r0, r3
 800241a:	3750      	adds	r7, #80	@ 0x50
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200

08002430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_RCC_GetHCLKFreq+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800244c:	f7ff fff0 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a9b      	lsrs	r3, r3, #10
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4903      	ldr	r1, [pc, #12]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	08004124 	.word	0x08004124

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002474:	f7ff ffdc 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0b5b      	lsrs	r3, r3, #13
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4903      	ldr	r1, [pc, #12]	@ (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	08004124 	.word	0x08004124

08002498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e042      	b.n	8002530 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fac8 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	@ 0x24
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fbd7 	bl	8002c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	@ 0x28
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b20      	cmp	r3, #32
 8002556:	d175      	bne.n	8002644 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_UART_Transmit+0x2c>
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e06e      	b.n	8002646 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2221      	movs	r2, #33	@ 0x21
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002576:	f7fe fc77 	bl	8000e68 <HAL_GetTick>
 800257a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002590:	d108      	bne.n	80025a4 <HAL_UART_Transmit+0x6c>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e003      	b.n	80025ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025ac:	e02e      	b.n	800260c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2200      	movs	r2, #0
 80025b6:	2180      	movs	r1, #128	@ 0x80
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f9b0 	bl	800291e <UART_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e03a      	b.n	8002646 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10b      	bne.n	80025ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	3302      	adds	r3, #2
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e007      	b.n	80025fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	3301      	adds	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1cb      	bne.n	80025ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2200      	movs	r2, #0
 800261e:	2140      	movs	r1, #64	@ 0x40
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f97c 	bl	800291e <UART_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e006      	b.n	8002646 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	4613      	mov	r3, r2
 800265a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b20      	cmp	r3, #32
 8002666:	d112      	bne.n	800268e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Receive_IT+0x26>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e00b      	b.n	8002690 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	461a      	mov	r2, r3
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f9a3 	bl	80029d0 <UART_Start_Receive_IT>
 800268a:	4603      	mov	r3, r0
 800268c:	e000      	b.n	8002690 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d112      	bne.n	80026d8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_UART_Receive_DMA+0x26>
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00b      	b.n	80026da <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f9b8 	bl	8002a44 <UART_Start_Receive_DMA>
 80026d4:	4603      	mov	r3, r0
 80026d6:	e000      	b.n	80026da <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
  }
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b09c      	sub	sp, #112	@ 0x70
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d172      	bne.n	8002824 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800273e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002740:	2200      	movs	r2, #0
 8002742:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800274e:	e853 3f00 	ldrex	r3, [r3]
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002756:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800275a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800275c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	330c      	adds	r3, #12
 8002762:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002764:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002766:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002768:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800276a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800276c:	e841 2300 	strex	r3, r2, [r1]
 8002770:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e5      	bne.n	8002744 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3314      	adds	r3, #20
 8002796:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002798:	647a      	str	r2, [r7, #68]	@ 0x44
 800279a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800279e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027a0:	e841 2300 	strex	r3, r2, [r1]
 80027a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80027a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e5      	bne.n	8002778 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	e853 3f00 	ldrex	r3, [r3]
 80027ba:	623b      	str	r3, [r7, #32]
   return(result);
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027d4:	e841 2300 	strex	r3, r2, [r1]
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e5      	bne.n	80027ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d119      	bne.n	8002824 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	e853 3f00 	ldrex	r3, [r3]
 80027fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0310 	bic.w	r3, r3, #16
 8002806:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002810:	61fa      	str	r2, [r7, #28]
 8002812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002814:	69b9      	ldr	r1, [r7, #24]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	e841 2300 	strex	r3, r2, [r1]
 800281c:	617b      	str	r3, [r7, #20]
   return(result);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e5      	bne.n	80027f0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800282a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	2b01      	cmp	r3, #1
 8002830:	d106      	bne.n	8002840 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002834:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002836:	4619      	mov	r1, r3
 8002838:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800283a:	f7ff ff66 	bl	800270a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800283e:	e002      	b.n	8002846 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002840:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002842:	f7fd ff31 	bl	80006a8 <HAL_UART_RxCpltCallback>
}
 8002846:	bf00      	nop
 8002848:	3770      	adds	r7, #112	@ 0x70
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	2b01      	cmp	r3, #1
 8002868:	d108      	bne.n	800287c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7ff ff48 	bl	800270a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800287a:	e002      	b.n	8002882 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff ff30 	bl	80026e2 <HAL_UART_RxHalfCpltCallback>
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a6:	2b80      	cmp	r3, #128	@ 0x80
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b21      	cmp	r3, #33	@ 0x21
 80028bc:	d108      	bne.n	80028d0 <UART_DMAError+0x46>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80028ca:	68b8      	ldr	r0, [r7, #8]
 80028cc:	f000 f954 	bl	8002b78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028da:	2b40      	cmp	r3, #64	@ 0x40
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b22      	cmp	r3, #34	@ 0x22
 80028f0:	d108      	bne.n	8002904 <UART_DMAError+0x7a>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2200      	movs	r2, #0
 80028fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80028fe:	68b8      	ldr	r0, [r7, #8]
 8002900:	f000 f962 	bl	8002bc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002910:	68b8      	ldr	r0, [r7, #8]
 8002912:	f7ff fef0 	bl	80026f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292e:	e03b      	b.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d037      	beq.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002938:	f7fe fa96 	bl	8000e68 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	429a      	cmp	r2, r3
 8002946:	d302      	bcc.n	800294e <UART_WaitOnFlagUntilTimeout+0x30>
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e03a      	b.n	80029c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d023      	beq.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b80      	cmp	r3, #128	@ 0x80
 8002964:	d020      	beq.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b40      	cmp	r3, #64	@ 0x40
 800296a:	d01d      	beq.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d116      	bne.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f919 	bl	8002bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2208      	movs	r2, #8
 800299a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e00f      	b.n	80029c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0b4      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2222      	movs	r2, #34	@ 0x22
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0220 	orr.w	r2, r2, #32
 8002a34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b098      	sub	sp, #96	@ 0x60
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2222      	movs	r2, #34	@ 0x22
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	4a3e      	ldr	r2, [pc, #248]	@ (8002b6c <UART_Start_Receive_DMA+0x128>)
 8002a72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	4a3d      	ldr	r2, [pc, #244]	@ (8002b70 <UART_Start_Receive_DMA+0x12c>)
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	4a3c      	ldr	r2, [pc, #240]	@ (8002b74 <UART_Start_Receive_DMA+0x130>)
 8002a82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	2200      	movs	r2, #0
 8002a8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002a8c:	f107 0308 	add.w	r3, r7, #8
 8002a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	f7fe fbd0 	bl	8001248 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
 8002ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	330c      	adds	r3, #12
 8002ae4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ae6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e5      	bne.n	8002ac6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3314      	adds	r3, #20
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3314      	adds	r3, #20
 8002b18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b1a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e5      	bne.n	8002afa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3314      	adds	r3, #20
 8002b34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	6a39      	ldr	r1, [r7, #32]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e5      	bne.n	8002b2e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3760      	adds	r7, #96	@ 0x60
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	08002723 	.word	0x08002723
 8002b70:	0800284f 	.word	0x0800284f
 8002b74:	0800288b 	.word	0x0800288b

08002b78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	330c      	adds	r3, #12
 8002b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	e853 3f00 	ldrex	r3, [r3]
 8002b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	61ba      	str	r2, [r7, #24]
 8002ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	6979      	ldr	r1, [r7, #20]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	613b      	str	r3, [r7, #16]
   return(result);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e5      	bne.n	8002b80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002bbc:	bf00      	nop
 8002bbe:	3724      	adds	r7, #36	@ 0x24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b095      	sub	sp, #84	@ 0x54
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bf0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e5      	bne.n	8002bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e5      	bne.n	8002c04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d119      	bne.n	8002c74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0310 	bic.w	r3, r3, #16
 8002c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c60:	61ba      	str	r2, [r7, #24]
 8002c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e5      	bne.n	8002c40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c82:	bf00      	nop
 8002c84:	3754      	adds	r7, #84	@ 0x54
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b0c0      	sub	sp, #256	@ 0x100
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cac:	68d9      	ldr	r1, [r3, #12]
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	ea40 0301 	orr.w	r3, r0, r1
 8002cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ce8:	f021 010c 	bic.w	r1, r1, #12
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0a:	6999      	ldr	r1, [r3, #24]
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	ea40 0301 	orr.w	r3, r0, r1
 8002d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f5c <UART_SetConfig+0x2cc>)
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d005      	beq.n	8002d30 <UART_SetConfig+0xa0>
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f60 <UART_SetConfig+0x2d0>)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d104      	bne.n	8002d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7ff fb9e 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8002d34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d38:	e003      	b.n	8002d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3a:	f7ff fb85 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8002d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d4c:	f040 810c 	bne.w	8002f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d62:	4622      	mov	r2, r4
 8002d64:	462b      	mov	r3, r5
 8002d66:	1891      	adds	r1, r2, r2
 8002d68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d6a:	415b      	adcs	r3, r3
 8002d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d72:	4621      	mov	r1, r4
 8002d74:	eb12 0801 	adds.w	r8, r2, r1
 8002d78:	4629      	mov	r1, r5
 8002d7a:	eb43 0901 	adc.w	r9, r3, r1
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d92:	4690      	mov	r8, r2
 8002d94:	4699      	mov	r9, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	eb18 0303 	adds.w	r3, r8, r3
 8002d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002da0:	462b      	mov	r3, r5
 8002da2:	eb49 0303 	adc.w	r3, r9, r3
 8002da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002db6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	18db      	adds	r3, r3, r3
 8002dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	eb42 0303 	adc.w	r3, r2, r3
 8002dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dd4:	f7fd fa54 	bl	8000280 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4b61      	ldr	r3, [pc, #388]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	011c      	lsls	r4, r3, #4
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e00:	415b      	adcs	r3, r3
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e08:	4641      	mov	r1, r8
 8002e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb43 0b01 	adc.w	fp, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e28:	4692      	mov	sl, r2
 8002e2a:	469b      	mov	fp, r3
 8002e2c:	4643      	mov	r3, r8
 8002e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e36:	464b      	mov	r3, r9
 8002e38:	eb4b 0303 	adc.w	r3, fp, r3
 8002e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e54:	460b      	mov	r3, r1
 8002e56:	18db      	adds	r3, r3, r3
 8002e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	eb42 0303 	adc.w	r3, r2, r3
 8002e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e6a:	f7fd fa09 	bl	8000280 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002e76:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2264      	movs	r2, #100	@ 0x64
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	1acb      	subs	r3, r1, r3
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e98:	441c      	add	r4, r3
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	1851      	adds	r1, r2, r1
 8002ec0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	414b      	adcs	r3, r1
 8002ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4651      	mov	r1, sl
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4642      	mov	r2, r8
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	460a      	mov	r2, r1
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f10:	460b      	mov	r3, r1
 8002f12:	18db      	adds	r3, r3, r3
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f16:	4613      	mov	r3, r2
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f26:	f7fd f9ab 	bl	8000280 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002f30:	fba3 1302 	umull	r1, r3, r3, r2
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	2164      	movs	r1, #100	@ 0x64
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3332      	adds	r3, #50	@ 0x32
 8002f42:	4a08      	ldr	r2, [pc, #32]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	f003 0207 	and.w	r2, r3, #7
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4422      	add	r2, r4
 8002f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f58:	e106      	b.n	8003168 <UART_SetConfig+0x4d8>
 8002f5a:	bf00      	nop
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40011400 	.word	0x40011400
 8002f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	1891      	adds	r1, r2, r2
 8002f80:	6239      	str	r1, [r7, #32]
 8002f82:	415b      	adcs	r3, r3
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	1854      	adds	r4, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb43 0501 	adc.w	r5, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	00eb      	lsls	r3, r5, #3
 8002f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa2:	00e2      	lsls	r2, r4, #3
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	4643      	mov	r3, r8
 8002faa:	18e3      	adds	r3, r4, r3
 8002fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	eb45 0303 	adc.w	r3, r5, r3
 8002fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	008b      	lsls	r3, r1, #2
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	008a      	lsls	r2, r1, #2
 8002fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fe8:	f7fd f94a 	bl	8000280 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4b60      	ldr	r3, [pc, #384]	@ (8003174 <UART_SetConfig+0x4e4>)
 8002ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	011c      	lsls	r4, r3, #4
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	1891      	adds	r1, r2, r2
 8003012:	61b9      	str	r1, [r7, #24]
 8003014:	415b      	adcs	r3, r3
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301c:	4641      	mov	r1, r8
 800301e:	1851      	adds	r1, r2, r1
 8003020:	6139      	str	r1, [r7, #16]
 8003022:	4649      	mov	r1, r9
 8003024:	414b      	adcs	r3, r1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003034:	4659      	mov	r1, fp
 8003036:	00cb      	lsls	r3, r1, #3
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303e:	4651      	mov	r1, sl
 8003040:	00ca      	lsls	r2, r1, #3
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	4603      	mov	r3, r0
 8003048:	4642      	mov	r2, r8
 800304a:	189b      	adds	r3, r3, r2
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003050:	464b      	mov	r3, r9
 8003052:	460a      	mov	r2, r1
 8003054:	eb42 0303 	adc.w	r3, r2, r3
 8003058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003074:	4649      	mov	r1, r9
 8003076:	008b      	lsls	r3, r1, #2
 8003078:	4641      	mov	r1, r8
 800307a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307e:	4641      	mov	r1, r8
 8003080:	008a      	lsls	r2, r1, #2
 8003082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003086:	f7fd f8fb 	bl	8000280 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4611      	mov	r1, r2
 8003090:	4b38      	ldr	r3, [pc, #224]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003092:	fba3 2301 	umull	r2, r3, r3, r1
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2264      	movs	r2, #100	@ 0x64
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	1acb      	subs	r3, r1, r3
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	3332      	adds	r3, #50	@ 0x32
 80030a4:	4a33      	ldr	r2, [pc, #204]	@ (8003174 <UART_SetConfig+0x4e4>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b0:	441c      	add	r4, r3
 80030b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b6:	2200      	movs	r2, #0
 80030b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80030ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80030bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	415b      	adcs	r3, r3
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d0:	4641      	mov	r1, r8
 80030d2:	1851      	adds	r1, r2, r1
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	4649      	mov	r1, r9
 80030d8:	414b      	adcs	r3, r1
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030e8:	4659      	mov	r1, fp
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	4651      	mov	r1, sl
 80030ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f2:	4651      	mov	r1, sl
 80030f4:	00ca      	lsls	r2, r1, #3
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	4642      	mov	r2, r8
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003102:	464b      	mov	r3, r9
 8003104:	460a      	mov	r2, r1
 8003106:	eb42 0303 	adc.w	r3, r2, r3
 800310a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	663b      	str	r3, [r7, #96]	@ 0x60
 8003116:	667a      	str	r2, [r7, #100]	@ 0x64
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003124:	4649      	mov	r1, r9
 8003126:	008b      	lsls	r3, r1, #2
 8003128:	4641      	mov	r1, r8
 800312a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312e:	4641      	mov	r1, r8
 8003130:	008a      	lsls	r2, r1, #2
 8003132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003136:	f7fd f8a3 	bl	8000280 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	2164      	movs	r1, #100	@ 0x64
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	3332      	adds	r3, #50	@ 0x32
 8003152:	4a08      	ldr	r2, [pc, #32]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4422      	add	r2, r4
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	bf00      	nop
 800316a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800316e:	46bd      	mov	sp, r7
 8003170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003174:	51eb851f 	.word	0x51eb851f

08003178 <std>:
 8003178:	2300      	movs	r3, #0
 800317a:	b510      	push	{r4, lr}
 800317c:	4604      	mov	r4, r0
 800317e:	e9c0 3300 	strd	r3, r3, [r0]
 8003182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003186:	6083      	str	r3, [r0, #8]
 8003188:	8181      	strh	r1, [r0, #12]
 800318a:	6643      	str	r3, [r0, #100]	@ 0x64
 800318c:	81c2      	strh	r2, [r0, #14]
 800318e:	6183      	str	r3, [r0, #24]
 8003190:	4619      	mov	r1, r3
 8003192:	2208      	movs	r2, #8
 8003194:	305c      	adds	r0, #92	@ 0x5c
 8003196:	f000 f9f9 	bl	800358c <memset>
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <std+0x58>)
 800319c:	6263      	str	r3, [r4, #36]	@ 0x24
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <std+0x5c>)
 80031a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <std+0x60>)
 80031a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031a6:	4b0d      	ldr	r3, [pc, #52]	@ (80031dc <std+0x64>)
 80031a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80031aa:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <std+0x68>)
 80031ac:	6224      	str	r4, [r4, #32]
 80031ae:	429c      	cmp	r4, r3
 80031b0:	d006      	beq.n	80031c0 <std+0x48>
 80031b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80031b6:	4294      	cmp	r4, r2
 80031b8:	d002      	beq.n	80031c0 <std+0x48>
 80031ba:	33d0      	adds	r3, #208	@ 0xd0
 80031bc:	429c      	cmp	r4, r3
 80031be:	d105      	bne.n	80031cc <std+0x54>
 80031c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80031c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c8:	f000 ba58 	b.w	800367c <__retarget_lock_init_recursive>
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	bf00      	nop
 80031d0:	080033dd 	.word	0x080033dd
 80031d4:	080033ff 	.word	0x080033ff
 80031d8:	08003437 	.word	0x08003437
 80031dc:	0800345b 	.word	0x0800345b
 80031e0:	200001a4 	.word	0x200001a4

080031e4 <stdio_exit_handler>:
 80031e4:	4a02      	ldr	r2, [pc, #8]	@ (80031f0 <stdio_exit_handler+0xc>)
 80031e6:	4903      	ldr	r1, [pc, #12]	@ (80031f4 <stdio_exit_handler+0x10>)
 80031e8:	4803      	ldr	r0, [pc, #12]	@ (80031f8 <stdio_exit_handler+0x14>)
 80031ea:	f000 b869 	b.w	80032c0 <_fwalk_sglue>
 80031ee:	bf00      	nop
 80031f0:	2000000c 	.word	0x2000000c
 80031f4:	08003f39 	.word	0x08003f39
 80031f8:	2000001c 	.word	0x2000001c

080031fc <cleanup_stdio>:
 80031fc:	6841      	ldr	r1, [r0, #4]
 80031fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <cleanup_stdio+0x34>)
 8003200:	4299      	cmp	r1, r3
 8003202:	b510      	push	{r4, lr}
 8003204:	4604      	mov	r4, r0
 8003206:	d001      	beq.n	800320c <cleanup_stdio+0x10>
 8003208:	f000 fe96 	bl	8003f38 <_fflush_r>
 800320c:	68a1      	ldr	r1, [r4, #8]
 800320e:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <cleanup_stdio+0x38>)
 8003210:	4299      	cmp	r1, r3
 8003212:	d002      	beq.n	800321a <cleanup_stdio+0x1e>
 8003214:	4620      	mov	r0, r4
 8003216:	f000 fe8f 	bl	8003f38 <_fflush_r>
 800321a:	68e1      	ldr	r1, [r4, #12]
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <cleanup_stdio+0x3c>)
 800321e:	4299      	cmp	r1, r3
 8003220:	d004      	beq.n	800322c <cleanup_stdio+0x30>
 8003222:	4620      	mov	r0, r4
 8003224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003228:	f000 be86 	b.w	8003f38 <_fflush_r>
 800322c:	bd10      	pop	{r4, pc}
 800322e:	bf00      	nop
 8003230:	200001a4 	.word	0x200001a4
 8003234:	2000020c 	.word	0x2000020c
 8003238:	20000274 	.word	0x20000274

0800323c <global_stdio_init.part.0>:
 800323c:	b510      	push	{r4, lr}
 800323e:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <global_stdio_init.part.0+0x30>)
 8003240:	4c0b      	ldr	r4, [pc, #44]	@ (8003270 <global_stdio_init.part.0+0x34>)
 8003242:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <global_stdio_init.part.0+0x38>)
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	4620      	mov	r0, r4
 8003248:	2200      	movs	r2, #0
 800324a:	2104      	movs	r1, #4
 800324c:	f7ff ff94 	bl	8003178 <std>
 8003250:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003254:	2201      	movs	r2, #1
 8003256:	2109      	movs	r1, #9
 8003258:	f7ff ff8e 	bl	8003178 <std>
 800325c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003260:	2202      	movs	r2, #2
 8003262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003266:	2112      	movs	r1, #18
 8003268:	f7ff bf86 	b.w	8003178 <std>
 800326c:	200002dc 	.word	0x200002dc
 8003270:	200001a4 	.word	0x200001a4
 8003274:	080031e5 	.word	0x080031e5

08003278 <__sfp_lock_acquire>:
 8003278:	4801      	ldr	r0, [pc, #4]	@ (8003280 <__sfp_lock_acquire+0x8>)
 800327a:	f000 ba00 	b.w	800367e <__retarget_lock_acquire_recursive>
 800327e:	bf00      	nop
 8003280:	200002e5 	.word	0x200002e5

08003284 <__sfp_lock_release>:
 8003284:	4801      	ldr	r0, [pc, #4]	@ (800328c <__sfp_lock_release+0x8>)
 8003286:	f000 b9fb 	b.w	8003680 <__retarget_lock_release_recursive>
 800328a:	bf00      	nop
 800328c:	200002e5 	.word	0x200002e5

08003290 <__sinit>:
 8003290:	b510      	push	{r4, lr}
 8003292:	4604      	mov	r4, r0
 8003294:	f7ff fff0 	bl	8003278 <__sfp_lock_acquire>
 8003298:	6a23      	ldr	r3, [r4, #32]
 800329a:	b11b      	cbz	r3, 80032a4 <__sinit+0x14>
 800329c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a0:	f7ff bff0 	b.w	8003284 <__sfp_lock_release>
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <__sinit+0x28>)
 80032a6:	6223      	str	r3, [r4, #32]
 80032a8:	4b04      	ldr	r3, [pc, #16]	@ (80032bc <__sinit+0x2c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f5      	bne.n	800329c <__sinit+0xc>
 80032b0:	f7ff ffc4 	bl	800323c <global_stdio_init.part.0>
 80032b4:	e7f2      	b.n	800329c <__sinit+0xc>
 80032b6:	bf00      	nop
 80032b8:	080031fd 	.word	0x080031fd
 80032bc:	200002dc 	.word	0x200002dc

080032c0 <_fwalk_sglue>:
 80032c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c4:	4607      	mov	r7, r0
 80032c6:	4688      	mov	r8, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	2600      	movs	r6, #0
 80032cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032d0:	f1b9 0901 	subs.w	r9, r9, #1
 80032d4:	d505      	bpl.n	80032e2 <_fwalk_sglue+0x22>
 80032d6:	6824      	ldr	r4, [r4, #0]
 80032d8:	2c00      	cmp	r4, #0
 80032da:	d1f7      	bne.n	80032cc <_fwalk_sglue+0xc>
 80032dc:	4630      	mov	r0, r6
 80032de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e2:	89ab      	ldrh	r3, [r5, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d907      	bls.n	80032f8 <_fwalk_sglue+0x38>
 80032e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032ec:	3301      	adds	r3, #1
 80032ee:	d003      	beq.n	80032f8 <_fwalk_sglue+0x38>
 80032f0:	4629      	mov	r1, r5
 80032f2:	4638      	mov	r0, r7
 80032f4:	47c0      	blx	r8
 80032f6:	4306      	orrs	r6, r0
 80032f8:	3568      	adds	r5, #104	@ 0x68
 80032fa:	e7e9      	b.n	80032d0 <_fwalk_sglue+0x10>

080032fc <iprintf>:
 80032fc:	b40f      	push	{r0, r1, r2, r3}
 80032fe:	b507      	push	{r0, r1, r2, lr}
 8003300:	4906      	ldr	r1, [pc, #24]	@ (800331c <iprintf+0x20>)
 8003302:	ab04      	add	r3, sp, #16
 8003304:	6808      	ldr	r0, [r1, #0]
 8003306:	f853 2b04 	ldr.w	r2, [r3], #4
 800330a:	6881      	ldr	r1, [r0, #8]
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	f000 fae9 	bl	80038e4 <_vfiprintf_r>
 8003312:	b003      	add	sp, #12
 8003314:	f85d eb04 	ldr.w	lr, [sp], #4
 8003318:	b004      	add	sp, #16
 800331a:	4770      	bx	lr
 800331c:	20000018 	.word	0x20000018

08003320 <_puts_r>:
 8003320:	6a03      	ldr	r3, [r0, #32]
 8003322:	b570      	push	{r4, r5, r6, lr}
 8003324:	6884      	ldr	r4, [r0, #8]
 8003326:	4605      	mov	r5, r0
 8003328:	460e      	mov	r6, r1
 800332a:	b90b      	cbnz	r3, 8003330 <_puts_r+0x10>
 800332c:	f7ff ffb0 	bl	8003290 <__sinit>
 8003330:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003332:	07db      	lsls	r3, r3, #31
 8003334:	d405      	bmi.n	8003342 <_puts_r+0x22>
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	0598      	lsls	r0, r3, #22
 800333a:	d402      	bmi.n	8003342 <_puts_r+0x22>
 800333c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800333e:	f000 f99e 	bl	800367e <__retarget_lock_acquire_recursive>
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	0719      	lsls	r1, r3, #28
 8003346:	d502      	bpl.n	800334e <_puts_r+0x2e>
 8003348:	6923      	ldr	r3, [r4, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d135      	bne.n	80033ba <_puts_r+0x9a>
 800334e:	4621      	mov	r1, r4
 8003350:	4628      	mov	r0, r5
 8003352:	f000 f8c5 	bl	80034e0 <__swsetup_r>
 8003356:	b380      	cbz	r0, 80033ba <_puts_r+0x9a>
 8003358:	f04f 35ff 	mov.w	r5, #4294967295
 800335c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800335e:	07da      	lsls	r2, r3, #31
 8003360:	d405      	bmi.n	800336e <_puts_r+0x4e>
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	059b      	lsls	r3, r3, #22
 8003366:	d402      	bmi.n	800336e <_puts_r+0x4e>
 8003368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800336a:	f000 f989 	bl	8003680 <__retarget_lock_release_recursive>
 800336e:	4628      	mov	r0, r5
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	2b00      	cmp	r3, #0
 8003374:	da04      	bge.n	8003380 <_puts_r+0x60>
 8003376:	69a2      	ldr	r2, [r4, #24]
 8003378:	429a      	cmp	r2, r3
 800337a:	dc17      	bgt.n	80033ac <_puts_r+0x8c>
 800337c:	290a      	cmp	r1, #10
 800337e:	d015      	beq.n	80033ac <_puts_r+0x8c>
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	6022      	str	r2, [r4, #0]
 8003386:	7019      	strb	r1, [r3, #0]
 8003388:	68a3      	ldr	r3, [r4, #8]
 800338a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800338e:	3b01      	subs	r3, #1
 8003390:	60a3      	str	r3, [r4, #8]
 8003392:	2900      	cmp	r1, #0
 8003394:	d1ed      	bne.n	8003372 <_puts_r+0x52>
 8003396:	2b00      	cmp	r3, #0
 8003398:	da11      	bge.n	80033be <_puts_r+0x9e>
 800339a:	4622      	mov	r2, r4
 800339c:	210a      	movs	r1, #10
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 f85f 	bl	8003462 <__swbuf_r>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d0d7      	beq.n	8003358 <_puts_r+0x38>
 80033a8:	250a      	movs	r5, #10
 80033aa:	e7d7      	b.n	800335c <_puts_r+0x3c>
 80033ac:	4622      	mov	r2, r4
 80033ae:	4628      	mov	r0, r5
 80033b0:	f000 f857 	bl	8003462 <__swbuf_r>
 80033b4:	3001      	adds	r0, #1
 80033b6:	d1e7      	bne.n	8003388 <_puts_r+0x68>
 80033b8:	e7ce      	b.n	8003358 <_puts_r+0x38>
 80033ba:	3e01      	subs	r6, #1
 80033bc:	e7e4      	b.n	8003388 <_puts_r+0x68>
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	6022      	str	r2, [r4, #0]
 80033c4:	220a      	movs	r2, #10
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e7ee      	b.n	80033a8 <_puts_r+0x88>
	...

080033cc <puts>:
 80033cc:	4b02      	ldr	r3, [pc, #8]	@ (80033d8 <puts+0xc>)
 80033ce:	4601      	mov	r1, r0
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f7ff bfa5 	b.w	8003320 <_puts_r>
 80033d6:	bf00      	nop
 80033d8:	20000018 	.word	0x20000018

080033dc <__sread>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	460c      	mov	r4, r1
 80033e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e4:	f000 f8fc 	bl	80035e0 <_read_r>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	bfab      	itete	ge
 80033ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80033ee:	89a3      	ldrhlt	r3, [r4, #12]
 80033f0:	181b      	addge	r3, r3, r0
 80033f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80033f6:	bfac      	ite	ge
 80033f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80033fa:	81a3      	strhlt	r3, [r4, #12]
 80033fc:	bd10      	pop	{r4, pc}

080033fe <__swrite>:
 80033fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003402:	461f      	mov	r7, r3
 8003404:	898b      	ldrh	r3, [r1, #12]
 8003406:	05db      	lsls	r3, r3, #23
 8003408:	4605      	mov	r5, r0
 800340a:	460c      	mov	r4, r1
 800340c:	4616      	mov	r6, r2
 800340e:	d505      	bpl.n	800341c <__swrite+0x1e>
 8003410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003414:	2302      	movs	r3, #2
 8003416:	2200      	movs	r2, #0
 8003418:	f000 f8d0 	bl	80035bc <_lseek_r>
 800341c:	89a3      	ldrh	r3, [r4, #12]
 800341e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003422:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003426:	81a3      	strh	r3, [r4, #12]
 8003428:	4632      	mov	r2, r6
 800342a:	463b      	mov	r3, r7
 800342c:	4628      	mov	r0, r5
 800342e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003432:	f000 b8e7 	b.w	8003604 <_write_r>

08003436 <__sseek>:
 8003436:	b510      	push	{r4, lr}
 8003438:	460c      	mov	r4, r1
 800343a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800343e:	f000 f8bd 	bl	80035bc <_lseek_r>
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	bf15      	itete	ne
 8003448:	6560      	strne	r0, [r4, #84]	@ 0x54
 800344a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800344e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003452:	81a3      	strheq	r3, [r4, #12]
 8003454:	bf18      	it	ne
 8003456:	81a3      	strhne	r3, [r4, #12]
 8003458:	bd10      	pop	{r4, pc}

0800345a <__sclose>:
 800345a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800345e:	f000 b89d 	b.w	800359c <_close_r>

08003462 <__swbuf_r>:
 8003462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003464:	460e      	mov	r6, r1
 8003466:	4614      	mov	r4, r2
 8003468:	4605      	mov	r5, r0
 800346a:	b118      	cbz	r0, 8003474 <__swbuf_r+0x12>
 800346c:	6a03      	ldr	r3, [r0, #32]
 800346e:	b90b      	cbnz	r3, 8003474 <__swbuf_r+0x12>
 8003470:	f7ff ff0e 	bl	8003290 <__sinit>
 8003474:	69a3      	ldr	r3, [r4, #24]
 8003476:	60a3      	str	r3, [r4, #8]
 8003478:	89a3      	ldrh	r3, [r4, #12]
 800347a:	071a      	lsls	r2, r3, #28
 800347c:	d501      	bpl.n	8003482 <__swbuf_r+0x20>
 800347e:	6923      	ldr	r3, [r4, #16]
 8003480:	b943      	cbnz	r3, 8003494 <__swbuf_r+0x32>
 8003482:	4621      	mov	r1, r4
 8003484:	4628      	mov	r0, r5
 8003486:	f000 f82b 	bl	80034e0 <__swsetup_r>
 800348a:	b118      	cbz	r0, 8003494 <__swbuf_r+0x32>
 800348c:	f04f 37ff 	mov.w	r7, #4294967295
 8003490:	4638      	mov	r0, r7
 8003492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	6922      	ldr	r2, [r4, #16]
 8003498:	1a98      	subs	r0, r3, r2
 800349a:	6963      	ldr	r3, [r4, #20]
 800349c:	b2f6      	uxtb	r6, r6
 800349e:	4283      	cmp	r3, r0
 80034a0:	4637      	mov	r7, r6
 80034a2:	dc05      	bgt.n	80034b0 <__swbuf_r+0x4e>
 80034a4:	4621      	mov	r1, r4
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 fd46 	bl	8003f38 <_fflush_r>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d1ed      	bne.n	800348c <__swbuf_r+0x2a>
 80034b0:	68a3      	ldr	r3, [r4, #8]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	60a3      	str	r3, [r4, #8]
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	6022      	str	r2, [r4, #0]
 80034bc:	701e      	strb	r6, [r3, #0]
 80034be:	6962      	ldr	r2, [r4, #20]
 80034c0:	1c43      	adds	r3, r0, #1
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d004      	beq.n	80034d0 <__swbuf_r+0x6e>
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	07db      	lsls	r3, r3, #31
 80034ca:	d5e1      	bpl.n	8003490 <__swbuf_r+0x2e>
 80034cc:	2e0a      	cmp	r6, #10
 80034ce:	d1df      	bne.n	8003490 <__swbuf_r+0x2e>
 80034d0:	4621      	mov	r1, r4
 80034d2:	4628      	mov	r0, r5
 80034d4:	f000 fd30 	bl	8003f38 <_fflush_r>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d0d9      	beq.n	8003490 <__swbuf_r+0x2e>
 80034dc:	e7d6      	b.n	800348c <__swbuf_r+0x2a>
	...

080034e0 <__swsetup_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4b29      	ldr	r3, [pc, #164]	@ (8003588 <__swsetup_r+0xa8>)
 80034e4:	4605      	mov	r5, r0
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	460c      	mov	r4, r1
 80034ea:	b118      	cbz	r0, 80034f4 <__swsetup_r+0x14>
 80034ec:	6a03      	ldr	r3, [r0, #32]
 80034ee:	b90b      	cbnz	r3, 80034f4 <__swsetup_r+0x14>
 80034f0:	f7ff fece 	bl	8003290 <__sinit>
 80034f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f8:	0719      	lsls	r1, r3, #28
 80034fa:	d422      	bmi.n	8003542 <__swsetup_r+0x62>
 80034fc:	06da      	lsls	r2, r3, #27
 80034fe:	d407      	bmi.n	8003510 <__swsetup_r+0x30>
 8003500:	2209      	movs	r2, #9
 8003502:	602a      	str	r2, [r5, #0]
 8003504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	f04f 30ff 	mov.w	r0, #4294967295
 800350e:	e033      	b.n	8003578 <__swsetup_r+0x98>
 8003510:	0758      	lsls	r0, r3, #29
 8003512:	d512      	bpl.n	800353a <__swsetup_r+0x5a>
 8003514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003516:	b141      	cbz	r1, 800352a <__swsetup_r+0x4a>
 8003518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800351c:	4299      	cmp	r1, r3
 800351e:	d002      	beq.n	8003526 <__swsetup_r+0x46>
 8003520:	4628      	mov	r0, r5
 8003522:	f000 f8bd 	bl	80036a0 <_free_r>
 8003526:	2300      	movs	r3, #0
 8003528:	6363      	str	r3, [r4, #52]	@ 0x34
 800352a:	89a3      	ldrh	r3, [r4, #12]
 800352c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003530:	81a3      	strh	r3, [r4, #12]
 8003532:	2300      	movs	r3, #0
 8003534:	6063      	str	r3, [r4, #4]
 8003536:	6923      	ldr	r3, [r4, #16]
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	81a3      	strh	r3, [r4, #12]
 8003542:	6923      	ldr	r3, [r4, #16]
 8003544:	b94b      	cbnz	r3, 800355a <__swsetup_r+0x7a>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800354c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003550:	d003      	beq.n	800355a <__swsetup_r+0x7a>
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f000 fd3d 	bl	8003fd4 <__smakebuf_r>
 800355a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355e:	f013 0201 	ands.w	r2, r3, #1
 8003562:	d00a      	beq.n	800357a <__swsetup_r+0x9a>
 8003564:	2200      	movs	r2, #0
 8003566:	60a2      	str	r2, [r4, #8]
 8003568:	6962      	ldr	r2, [r4, #20]
 800356a:	4252      	negs	r2, r2
 800356c:	61a2      	str	r2, [r4, #24]
 800356e:	6922      	ldr	r2, [r4, #16]
 8003570:	b942      	cbnz	r2, 8003584 <__swsetup_r+0xa4>
 8003572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003576:	d1c5      	bne.n	8003504 <__swsetup_r+0x24>
 8003578:	bd38      	pop	{r3, r4, r5, pc}
 800357a:	0799      	lsls	r1, r3, #30
 800357c:	bf58      	it	pl
 800357e:	6962      	ldrpl	r2, [r4, #20]
 8003580:	60a2      	str	r2, [r4, #8]
 8003582:	e7f4      	b.n	800356e <__swsetup_r+0x8e>
 8003584:	2000      	movs	r0, #0
 8003586:	e7f7      	b.n	8003578 <__swsetup_r+0x98>
 8003588:	20000018 	.word	0x20000018

0800358c <memset>:
 800358c:	4402      	add	r2, r0
 800358e:	4603      	mov	r3, r0
 8003590:	4293      	cmp	r3, r2
 8003592:	d100      	bne.n	8003596 <memset+0xa>
 8003594:	4770      	bx	lr
 8003596:	f803 1b01 	strb.w	r1, [r3], #1
 800359a:	e7f9      	b.n	8003590 <memset+0x4>

0800359c <_close_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4d06      	ldr	r5, [pc, #24]	@ (80035b8 <_close_r+0x1c>)
 80035a0:	2300      	movs	r3, #0
 80035a2:	4604      	mov	r4, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	f7fd fb51 	bl	8000c4e <_close>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_close_r+0x1a>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_close_r+0x1a>
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	200002e0 	.word	0x200002e0

080035bc <_lseek_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	4d07      	ldr	r5, [pc, #28]	@ (80035dc <_lseek_r+0x20>)
 80035c0:	4604      	mov	r4, r0
 80035c2:	4608      	mov	r0, r1
 80035c4:	4611      	mov	r1, r2
 80035c6:	2200      	movs	r2, #0
 80035c8:	602a      	str	r2, [r5, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f7fd fb66 	bl	8000c9c <_lseek>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_lseek_r+0x1e>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_lseek_r+0x1e>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	200002e0 	.word	0x200002e0

080035e0 <_read_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4d07      	ldr	r5, [pc, #28]	@ (8003600 <_read_r+0x20>)
 80035e4:	4604      	mov	r4, r0
 80035e6:	4608      	mov	r0, r1
 80035e8:	4611      	mov	r1, r2
 80035ea:	2200      	movs	r2, #0
 80035ec:	602a      	str	r2, [r5, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f7fd faf4 	bl	8000bdc <_read>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d102      	bne.n	80035fe <_read_r+0x1e>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	b103      	cbz	r3, 80035fe <_read_r+0x1e>
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	200002e0 	.word	0x200002e0

08003604 <_write_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4d07      	ldr	r5, [pc, #28]	@ (8003624 <_write_r+0x20>)
 8003608:	4604      	mov	r4, r0
 800360a:	4608      	mov	r0, r1
 800360c:	4611      	mov	r1, r2
 800360e:	2200      	movs	r2, #0
 8003610:	602a      	str	r2, [r5, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	f7fd faff 	bl	8000c16 <_write>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_write_r+0x1e>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_write_r+0x1e>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	200002e0 	.word	0x200002e0

08003628 <__errno>:
 8003628:	4b01      	ldr	r3, [pc, #4]	@ (8003630 <__errno+0x8>)
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000018 	.word	0x20000018

08003634 <__libc_init_array>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	4d0d      	ldr	r5, [pc, #52]	@ (800366c <__libc_init_array+0x38>)
 8003638:	4c0d      	ldr	r4, [pc, #52]	@ (8003670 <__libc_init_array+0x3c>)
 800363a:	1b64      	subs	r4, r4, r5
 800363c:	10a4      	asrs	r4, r4, #2
 800363e:	2600      	movs	r6, #0
 8003640:	42a6      	cmp	r6, r4
 8003642:	d109      	bne.n	8003658 <__libc_init_array+0x24>
 8003644:	4d0b      	ldr	r5, [pc, #44]	@ (8003674 <__libc_init_array+0x40>)
 8003646:	4c0c      	ldr	r4, [pc, #48]	@ (8003678 <__libc_init_array+0x44>)
 8003648:	f000 fd32 	bl	80040b0 <_init>
 800364c:	1b64      	subs	r4, r4, r5
 800364e:	10a4      	asrs	r4, r4, #2
 8003650:	2600      	movs	r6, #0
 8003652:	42a6      	cmp	r6, r4
 8003654:	d105      	bne.n	8003662 <__libc_init_array+0x2e>
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	f855 3b04 	ldr.w	r3, [r5], #4
 800365c:	4798      	blx	r3
 800365e:	3601      	adds	r6, #1
 8003660:	e7ee      	b.n	8003640 <__libc_init_array+0xc>
 8003662:	f855 3b04 	ldr.w	r3, [r5], #4
 8003666:	4798      	blx	r3
 8003668:	3601      	adds	r6, #1
 800366a:	e7f2      	b.n	8003652 <__libc_init_array+0x1e>
 800366c:	08004170 	.word	0x08004170
 8003670:	08004170 	.word	0x08004170
 8003674:	08004170 	.word	0x08004170
 8003678:	08004174 	.word	0x08004174

0800367c <__retarget_lock_init_recursive>:
 800367c:	4770      	bx	lr

0800367e <__retarget_lock_acquire_recursive>:
 800367e:	4770      	bx	lr

08003680 <__retarget_lock_release_recursive>:
 8003680:	4770      	bx	lr

08003682 <memcpy>:
 8003682:	440a      	add	r2, r1
 8003684:	4291      	cmp	r1, r2
 8003686:	f100 33ff 	add.w	r3, r0, #4294967295
 800368a:	d100      	bne.n	800368e <memcpy+0xc>
 800368c:	4770      	bx	lr
 800368e:	b510      	push	{r4, lr}
 8003690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003698:	4291      	cmp	r1, r2
 800369a:	d1f9      	bne.n	8003690 <memcpy+0xe>
 800369c:	bd10      	pop	{r4, pc}
	...

080036a0 <_free_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	4605      	mov	r5, r0
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d041      	beq.n	800372c <_free_r+0x8c>
 80036a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036ac:	1f0c      	subs	r4, r1, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bfb8      	it	lt
 80036b2:	18e4      	addlt	r4, r4, r3
 80036b4:	f000 f8e0 	bl	8003878 <__malloc_lock>
 80036b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003730 <_free_r+0x90>)
 80036ba:	6813      	ldr	r3, [r2, #0]
 80036bc:	b933      	cbnz	r3, 80036cc <_free_r+0x2c>
 80036be:	6063      	str	r3, [r4, #4]
 80036c0:	6014      	str	r4, [r2, #0]
 80036c2:	4628      	mov	r0, r5
 80036c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036c8:	f000 b8dc 	b.w	8003884 <__malloc_unlock>
 80036cc:	42a3      	cmp	r3, r4
 80036ce:	d908      	bls.n	80036e2 <_free_r+0x42>
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	1821      	adds	r1, r4, r0
 80036d4:	428b      	cmp	r3, r1
 80036d6:	bf01      	itttt	eq
 80036d8:	6819      	ldreq	r1, [r3, #0]
 80036da:	685b      	ldreq	r3, [r3, #4]
 80036dc:	1809      	addeq	r1, r1, r0
 80036de:	6021      	streq	r1, [r4, #0]
 80036e0:	e7ed      	b.n	80036be <_free_r+0x1e>
 80036e2:	461a      	mov	r2, r3
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	b10b      	cbz	r3, 80036ec <_free_r+0x4c>
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	d9fa      	bls.n	80036e2 <_free_r+0x42>
 80036ec:	6811      	ldr	r1, [r2, #0]
 80036ee:	1850      	adds	r0, r2, r1
 80036f0:	42a0      	cmp	r0, r4
 80036f2:	d10b      	bne.n	800370c <_free_r+0x6c>
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	4401      	add	r1, r0
 80036f8:	1850      	adds	r0, r2, r1
 80036fa:	4283      	cmp	r3, r0
 80036fc:	6011      	str	r1, [r2, #0]
 80036fe:	d1e0      	bne.n	80036c2 <_free_r+0x22>
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	6053      	str	r3, [r2, #4]
 8003706:	4408      	add	r0, r1
 8003708:	6010      	str	r0, [r2, #0]
 800370a:	e7da      	b.n	80036c2 <_free_r+0x22>
 800370c:	d902      	bls.n	8003714 <_free_r+0x74>
 800370e:	230c      	movs	r3, #12
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	e7d6      	b.n	80036c2 <_free_r+0x22>
 8003714:	6820      	ldr	r0, [r4, #0]
 8003716:	1821      	adds	r1, r4, r0
 8003718:	428b      	cmp	r3, r1
 800371a:	bf04      	itt	eq
 800371c:	6819      	ldreq	r1, [r3, #0]
 800371e:	685b      	ldreq	r3, [r3, #4]
 8003720:	6063      	str	r3, [r4, #4]
 8003722:	bf04      	itt	eq
 8003724:	1809      	addeq	r1, r1, r0
 8003726:	6021      	streq	r1, [r4, #0]
 8003728:	6054      	str	r4, [r2, #4]
 800372a:	e7ca      	b.n	80036c2 <_free_r+0x22>
 800372c:	bd38      	pop	{r3, r4, r5, pc}
 800372e:	bf00      	nop
 8003730:	200002ec 	.word	0x200002ec

08003734 <sbrk_aligned>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	4e0f      	ldr	r6, [pc, #60]	@ (8003774 <sbrk_aligned+0x40>)
 8003738:	460c      	mov	r4, r1
 800373a:	6831      	ldr	r1, [r6, #0]
 800373c:	4605      	mov	r5, r0
 800373e:	b911      	cbnz	r1, 8003746 <sbrk_aligned+0x12>
 8003740:	f000 fca6 	bl	8004090 <_sbrk_r>
 8003744:	6030      	str	r0, [r6, #0]
 8003746:	4621      	mov	r1, r4
 8003748:	4628      	mov	r0, r5
 800374a:	f000 fca1 	bl	8004090 <_sbrk_r>
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	d103      	bne.n	800375a <sbrk_aligned+0x26>
 8003752:	f04f 34ff 	mov.w	r4, #4294967295
 8003756:	4620      	mov	r0, r4
 8003758:	bd70      	pop	{r4, r5, r6, pc}
 800375a:	1cc4      	adds	r4, r0, #3
 800375c:	f024 0403 	bic.w	r4, r4, #3
 8003760:	42a0      	cmp	r0, r4
 8003762:	d0f8      	beq.n	8003756 <sbrk_aligned+0x22>
 8003764:	1a21      	subs	r1, r4, r0
 8003766:	4628      	mov	r0, r5
 8003768:	f000 fc92 	bl	8004090 <_sbrk_r>
 800376c:	3001      	adds	r0, #1
 800376e:	d1f2      	bne.n	8003756 <sbrk_aligned+0x22>
 8003770:	e7ef      	b.n	8003752 <sbrk_aligned+0x1e>
 8003772:	bf00      	nop
 8003774:	200002e8 	.word	0x200002e8

08003778 <_malloc_r>:
 8003778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800377c:	1ccd      	adds	r5, r1, #3
 800377e:	f025 0503 	bic.w	r5, r5, #3
 8003782:	3508      	adds	r5, #8
 8003784:	2d0c      	cmp	r5, #12
 8003786:	bf38      	it	cc
 8003788:	250c      	movcc	r5, #12
 800378a:	2d00      	cmp	r5, #0
 800378c:	4606      	mov	r6, r0
 800378e:	db01      	blt.n	8003794 <_malloc_r+0x1c>
 8003790:	42a9      	cmp	r1, r5
 8003792:	d904      	bls.n	800379e <_malloc_r+0x26>
 8003794:	230c      	movs	r3, #12
 8003796:	6033      	str	r3, [r6, #0]
 8003798:	2000      	movs	r0, #0
 800379a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800379e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003874 <_malloc_r+0xfc>
 80037a2:	f000 f869 	bl	8003878 <__malloc_lock>
 80037a6:	f8d8 3000 	ldr.w	r3, [r8]
 80037aa:	461c      	mov	r4, r3
 80037ac:	bb44      	cbnz	r4, 8003800 <_malloc_r+0x88>
 80037ae:	4629      	mov	r1, r5
 80037b0:	4630      	mov	r0, r6
 80037b2:	f7ff ffbf 	bl	8003734 <sbrk_aligned>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	4604      	mov	r4, r0
 80037ba:	d158      	bne.n	800386e <_malloc_r+0xf6>
 80037bc:	f8d8 4000 	ldr.w	r4, [r8]
 80037c0:	4627      	mov	r7, r4
 80037c2:	2f00      	cmp	r7, #0
 80037c4:	d143      	bne.n	800384e <_malloc_r+0xd6>
 80037c6:	2c00      	cmp	r4, #0
 80037c8:	d04b      	beq.n	8003862 <_malloc_r+0xea>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	4639      	mov	r1, r7
 80037ce:	4630      	mov	r0, r6
 80037d0:	eb04 0903 	add.w	r9, r4, r3
 80037d4:	f000 fc5c 	bl	8004090 <_sbrk_r>
 80037d8:	4581      	cmp	r9, r0
 80037da:	d142      	bne.n	8003862 <_malloc_r+0xea>
 80037dc:	6821      	ldr	r1, [r4, #0]
 80037de:	1a6d      	subs	r5, r5, r1
 80037e0:	4629      	mov	r1, r5
 80037e2:	4630      	mov	r0, r6
 80037e4:	f7ff ffa6 	bl	8003734 <sbrk_aligned>
 80037e8:	3001      	adds	r0, #1
 80037ea:	d03a      	beq.n	8003862 <_malloc_r+0xea>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	442b      	add	r3, r5
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	f8d8 3000 	ldr.w	r3, [r8]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	bb62      	cbnz	r2, 8003854 <_malloc_r+0xdc>
 80037fa:	f8c8 7000 	str.w	r7, [r8]
 80037fe:	e00f      	b.n	8003820 <_malloc_r+0xa8>
 8003800:	6822      	ldr	r2, [r4, #0]
 8003802:	1b52      	subs	r2, r2, r5
 8003804:	d420      	bmi.n	8003848 <_malloc_r+0xd0>
 8003806:	2a0b      	cmp	r2, #11
 8003808:	d917      	bls.n	800383a <_malloc_r+0xc2>
 800380a:	1961      	adds	r1, r4, r5
 800380c:	42a3      	cmp	r3, r4
 800380e:	6025      	str	r5, [r4, #0]
 8003810:	bf18      	it	ne
 8003812:	6059      	strne	r1, [r3, #4]
 8003814:	6863      	ldr	r3, [r4, #4]
 8003816:	bf08      	it	eq
 8003818:	f8c8 1000 	streq.w	r1, [r8]
 800381c:	5162      	str	r2, [r4, r5]
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	4630      	mov	r0, r6
 8003822:	f000 f82f 	bl	8003884 <__malloc_unlock>
 8003826:	f104 000b 	add.w	r0, r4, #11
 800382a:	1d23      	adds	r3, r4, #4
 800382c:	f020 0007 	bic.w	r0, r0, #7
 8003830:	1ac2      	subs	r2, r0, r3
 8003832:	bf1c      	itt	ne
 8003834:	1a1b      	subne	r3, r3, r0
 8003836:	50a3      	strne	r3, [r4, r2]
 8003838:	e7af      	b.n	800379a <_malloc_r+0x22>
 800383a:	6862      	ldr	r2, [r4, #4]
 800383c:	42a3      	cmp	r3, r4
 800383e:	bf0c      	ite	eq
 8003840:	f8c8 2000 	streq.w	r2, [r8]
 8003844:	605a      	strne	r2, [r3, #4]
 8003846:	e7eb      	b.n	8003820 <_malloc_r+0xa8>
 8003848:	4623      	mov	r3, r4
 800384a:	6864      	ldr	r4, [r4, #4]
 800384c:	e7ae      	b.n	80037ac <_malloc_r+0x34>
 800384e:	463c      	mov	r4, r7
 8003850:	687f      	ldr	r7, [r7, #4]
 8003852:	e7b6      	b.n	80037c2 <_malloc_r+0x4a>
 8003854:	461a      	mov	r2, r3
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	42a3      	cmp	r3, r4
 800385a:	d1fb      	bne.n	8003854 <_malloc_r+0xdc>
 800385c:	2300      	movs	r3, #0
 800385e:	6053      	str	r3, [r2, #4]
 8003860:	e7de      	b.n	8003820 <_malloc_r+0xa8>
 8003862:	230c      	movs	r3, #12
 8003864:	6033      	str	r3, [r6, #0]
 8003866:	4630      	mov	r0, r6
 8003868:	f000 f80c 	bl	8003884 <__malloc_unlock>
 800386c:	e794      	b.n	8003798 <_malloc_r+0x20>
 800386e:	6005      	str	r5, [r0, #0]
 8003870:	e7d6      	b.n	8003820 <_malloc_r+0xa8>
 8003872:	bf00      	nop
 8003874:	200002ec 	.word	0x200002ec

08003878 <__malloc_lock>:
 8003878:	4801      	ldr	r0, [pc, #4]	@ (8003880 <__malloc_lock+0x8>)
 800387a:	f7ff bf00 	b.w	800367e <__retarget_lock_acquire_recursive>
 800387e:	bf00      	nop
 8003880:	200002e4 	.word	0x200002e4

08003884 <__malloc_unlock>:
 8003884:	4801      	ldr	r0, [pc, #4]	@ (800388c <__malloc_unlock+0x8>)
 8003886:	f7ff befb 	b.w	8003680 <__retarget_lock_release_recursive>
 800388a:	bf00      	nop
 800388c:	200002e4 	.word	0x200002e4

08003890 <__sfputc_r>:
 8003890:	6893      	ldr	r3, [r2, #8]
 8003892:	3b01      	subs	r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	b410      	push	{r4}
 8003898:	6093      	str	r3, [r2, #8]
 800389a:	da08      	bge.n	80038ae <__sfputc_r+0x1e>
 800389c:	6994      	ldr	r4, [r2, #24]
 800389e:	42a3      	cmp	r3, r4
 80038a0:	db01      	blt.n	80038a6 <__sfputc_r+0x16>
 80038a2:	290a      	cmp	r1, #10
 80038a4:	d103      	bne.n	80038ae <__sfputc_r+0x1e>
 80038a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038aa:	f7ff bdda 	b.w	8003462 <__swbuf_r>
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	1c58      	adds	r0, r3, #1
 80038b2:	6010      	str	r0, [r2, #0]
 80038b4:	7019      	strb	r1, [r3, #0]
 80038b6:	4608      	mov	r0, r1
 80038b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038bc:	4770      	bx	lr

080038be <__sfputs_r>:
 80038be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c0:	4606      	mov	r6, r0
 80038c2:	460f      	mov	r7, r1
 80038c4:	4614      	mov	r4, r2
 80038c6:	18d5      	adds	r5, r2, r3
 80038c8:	42ac      	cmp	r4, r5
 80038ca:	d101      	bne.n	80038d0 <__sfputs_r+0x12>
 80038cc:	2000      	movs	r0, #0
 80038ce:	e007      	b.n	80038e0 <__sfputs_r+0x22>
 80038d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d4:	463a      	mov	r2, r7
 80038d6:	4630      	mov	r0, r6
 80038d8:	f7ff ffda 	bl	8003890 <__sfputc_r>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d1f3      	bne.n	80038c8 <__sfputs_r+0xa>
 80038e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038e4 <_vfiprintf_r>:
 80038e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e8:	460d      	mov	r5, r1
 80038ea:	b09d      	sub	sp, #116	@ 0x74
 80038ec:	4614      	mov	r4, r2
 80038ee:	4698      	mov	r8, r3
 80038f0:	4606      	mov	r6, r0
 80038f2:	b118      	cbz	r0, 80038fc <_vfiprintf_r+0x18>
 80038f4:	6a03      	ldr	r3, [r0, #32]
 80038f6:	b90b      	cbnz	r3, 80038fc <_vfiprintf_r+0x18>
 80038f8:	f7ff fcca 	bl	8003290 <__sinit>
 80038fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038fe:	07d9      	lsls	r1, r3, #31
 8003900:	d405      	bmi.n	800390e <_vfiprintf_r+0x2a>
 8003902:	89ab      	ldrh	r3, [r5, #12]
 8003904:	059a      	lsls	r2, r3, #22
 8003906:	d402      	bmi.n	800390e <_vfiprintf_r+0x2a>
 8003908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800390a:	f7ff feb8 	bl	800367e <__retarget_lock_acquire_recursive>
 800390e:	89ab      	ldrh	r3, [r5, #12]
 8003910:	071b      	lsls	r3, r3, #28
 8003912:	d501      	bpl.n	8003918 <_vfiprintf_r+0x34>
 8003914:	692b      	ldr	r3, [r5, #16]
 8003916:	b99b      	cbnz	r3, 8003940 <_vfiprintf_r+0x5c>
 8003918:	4629      	mov	r1, r5
 800391a:	4630      	mov	r0, r6
 800391c:	f7ff fde0 	bl	80034e0 <__swsetup_r>
 8003920:	b170      	cbz	r0, 8003940 <_vfiprintf_r+0x5c>
 8003922:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003924:	07dc      	lsls	r4, r3, #31
 8003926:	d504      	bpl.n	8003932 <_vfiprintf_r+0x4e>
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	b01d      	add	sp, #116	@ 0x74
 800392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003932:	89ab      	ldrh	r3, [r5, #12]
 8003934:	0598      	lsls	r0, r3, #22
 8003936:	d4f7      	bmi.n	8003928 <_vfiprintf_r+0x44>
 8003938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800393a:	f7ff fea1 	bl	8003680 <__retarget_lock_release_recursive>
 800393e:	e7f3      	b.n	8003928 <_vfiprintf_r+0x44>
 8003940:	2300      	movs	r3, #0
 8003942:	9309      	str	r3, [sp, #36]	@ 0x24
 8003944:	2320      	movs	r3, #32
 8003946:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800394a:	f8cd 800c 	str.w	r8, [sp, #12]
 800394e:	2330      	movs	r3, #48	@ 0x30
 8003950:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003b00 <_vfiprintf_r+0x21c>
 8003954:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003958:	f04f 0901 	mov.w	r9, #1
 800395c:	4623      	mov	r3, r4
 800395e:	469a      	mov	sl, r3
 8003960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003964:	b10a      	cbz	r2, 800396a <_vfiprintf_r+0x86>
 8003966:	2a25      	cmp	r2, #37	@ 0x25
 8003968:	d1f9      	bne.n	800395e <_vfiprintf_r+0x7a>
 800396a:	ebba 0b04 	subs.w	fp, sl, r4
 800396e:	d00b      	beq.n	8003988 <_vfiprintf_r+0xa4>
 8003970:	465b      	mov	r3, fp
 8003972:	4622      	mov	r2, r4
 8003974:	4629      	mov	r1, r5
 8003976:	4630      	mov	r0, r6
 8003978:	f7ff ffa1 	bl	80038be <__sfputs_r>
 800397c:	3001      	adds	r0, #1
 800397e:	f000 80a7 	beq.w	8003ad0 <_vfiprintf_r+0x1ec>
 8003982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003984:	445a      	add	r2, fp
 8003986:	9209      	str	r2, [sp, #36]	@ 0x24
 8003988:	f89a 3000 	ldrb.w	r3, [sl]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 809f 	beq.w	8003ad0 <_vfiprintf_r+0x1ec>
 8003992:	2300      	movs	r3, #0
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800399c:	f10a 0a01 	add.w	sl, sl, #1
 80039a0:	9304      	str	r3, [sp, #16]
 80039a2:	9307      	str	r3, [sp, #28]
 80039a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80039aa:	4654      	mov	r4, sl
 80039ac:	2205      	movs	r2, #5
 80039ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b2:	4853      	ldr	r0, [pc, #332]	@ (8003b00 <_vfiprintf_r+0x21c>)
 80039b4:	f7fc fc14 	bl	80001e0 <memchr>
 80039b8:	9a04      	ldr	r2, [sp, #16]
 80039ba:	b9d8      	cbnz	r0, 80039f4 <_vfiprintf_r+0x110>
 80039bc:	06d1      	lsls	r1, r2, #27
 80039be:	bf44      	itt	mi
 80039c0:	2320      	movmi	r3, #32
 80039c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039c6:	0713      	lsls	r3, r2, #28
 80039c8:	bf44      	itt	mi
 80039ca:	232b      	movmi	r3, #43	@ 0x2b
 80039cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039d0:	f89a 3000 	ldrb.w	r3, [sl]
 80039d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80039d6:	d015      	beq.n	8003a04 <_vfiprintf_r+0x120>
 80039d8:	9a07      	ldr	r2, [sp, #28]
 80039da:	4654      	mov	r4, sl
 80039dc:	2000      	movs	r0, #0
 80039de:	f04f 0c0a 	mov.w	ip, #10
 80039e2:	4621      	mov	r1, r4
 80039e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039e8:	3b30      	subs	r3, #48	@ 0x30
 80039ea:	2b09      	cmp	r3, #9
 80039ec:	d94b      	bls.n	8003a86 <_vfiprintf_r+0x1a2>
 80039ee:	b1b0      	cbz	r0, 8003a1e <_vfiprintf_r+0x13a>
 80039f0:	9207      	str	r2, [sp, #28]
 80039f2:	e014      	b.n	8003a1e <_vfiprintf_r+0x13a>
 80039f4:	eba0 0308 	sub.w	r3, r0, r8
 80039f8:	fa09 f303 	lsl.w	r3, r9, r3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	9304      	str	r3, [sp, #16]
 8003a00:	46a2      	mov	sl, r4
 8003a02:	e7d2      	b.n	80039aa <_vfiprintf_r+0xc6>
 8003a04:	9b03      	ldr	r3, [sp, #12]
 8003a06:	1d19      	adds	r1, r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	9103      	str	r1, [sp, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bfbb      	ittet	lt
 8003a10:	425b      	neglt	r3, r3
 8003a12:	f042 0202 	orrlt.w	r2, r2, #2
 8003a16:	9307      	strge	r3, [sp, #28]
 8003a18:	9307      	strlt	r3, [sp, #28]
 8003a1a:	bfb8      	it	lt
 8003a1c:	9204      	strlt	r2, [sp, #16]
 8003a1e:	7823      	ldrb	r3, [r4, #0]
 8003a20:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a22:	d10a      	bne.n	8003a3a <_vfiprintf_r+0x156>
 8003a24:	7863      	ldrb	r3, [r4, #1]
 8003a26:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a28:	d132      	bne.n	8003a90 <_vfiprintf_r+0x1ac>
 8003a2a:	9b03      	ldr	r3, [sp, #12]
 8003a2c:	1d1a      	adds	r2, r3, #4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	9203      	str	r2, [sp, #12]
 8003a32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a36:	3402      	adds	r4, #2
 8003a38:	9305      	str	r3, [sp, #20]
 8003a3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003b10 <_vfiprintf_r+0x22c>
 8003a3e:	7821      	ldrb	r1, [r4, #0]
 8003a40:	2203      	movs	r2, #3
 8003a42:	4650      	mov	r0, sl
 8003a44:	f7fc fbcc 	bl	80001e0 <memchr>
 8003a48:	b138      	cbz	r0, 8003a5a <_vfiprintf_r+0x176>
 8003a4a:	9b04      	ldr	r3, [sp, #16]
 8003a4c:	eba0 000a 	sub.w	r0, r0, sl
 8003a50:	2240      	movs	r2, #64	@ 0x40
 8003a52:	4082      	lsls	r2, r0
 8003a54:	4313      	orrs	r3, r2
 8003a56:	3401      	adds	r4, #1
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5e:	4829      	ldr	r0, [pc, #164]	@ (8003b04 <_vfiprintf_r+0x220>)
 8003a60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a64:	2206      	movs	r2, #6
 8003a66:	f7fc fbbb 	bl	80001e0 <memchr>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d03f      	beq.n	8003aee <_vfiprintf_r+0x20a>
 8003a6e:	4b26      	ldr	r3, [pc, #152]	@ (8003b08 <_vfiprintf_r+0x224>)
 8003a70:	bb1b      	cbnz	r3, 8003aba <_vfiprintf_r+0x1d6>
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	3307      	adds	r3, #7
 8003a76:	f023 0307 	bic.w	r3, r3, #7
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a80:	443b      	add	r3, r7
 8003a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a84:	e76a      	b.n	800395c <_vfiprintf_r+0x78>
 8003a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	e7a8      	b.n	80039e2 <_vfiprintf_r+0xfe>
 8003a90:	2300      	movs	r3, #0
 8003a92:	3401      	adds	r4, #1
 8003a94:	9305      	str	r3, [sp, #20]
 8003a96:	4619      	mov	r1, r3
 8003a98:	f04f 0c0a 	mov.w	ip, #10
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa2:	3a30      	subs	r2, #48	@ 0x30
 8003aa4:	2a09      	cmp	r2, #9
 8003aa6:	d903      	bls.n	8003ab0 <_vfiprintf_r+0x1cc>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0c6      	beq.n	8003a3a <_vfiprintf_r+0x156>
 8003aac:	9105      	str	r1, [sp, #20]
 8003aae:	e7c4      	b.n	8003a3a <_vfiprintf_r+0x156>
 8003ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e7f0      	b.n	8003a9c <_vfiprintf_r+0x1b8>
 8003aba:	ab03      	add	r3, sp, #12
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	462a      	mov	r2, r5
 8003ac0:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <_vfiprintf_r+0x228>)
 8003ac2:	a904      	add	r1, sp, #16
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f3af 8000 	nop.w
 8003aca:	4607      	mov	r7, r0
 8003acc:	1c78      	adds	r0, r7, #1
 8003ace:	d1d6      	bne.n	8003a7e <_vfiprintf_r+0x19a>
 8003ad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ad2:	07d9      	lsls	r1, r3, #31
 8003ad4:	d405      	bmi.n	8003ae2 <_vfiprintf_r+0x1fe>
 8003ad6:	89ab      	ldrh	r3, [r5, #12]
 8003ad8:	059a      	lsls	r2, r3, #22
 8003ada:	d402      	bmi.n	8003ae2 <_vfiprintf_r+0x1fe>
 8003adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ade:	f7ff fdcf 	bl	8003680 <__retarget_lock_release_recursive>
 8003ae2:	89ab      	ldrh	r3, [r5, #12]
 8003ae4:	065b      	lsls	r3, r3, #25
 8003ae6:	f53f af1f 	bmi.w	8003928 <_vfiprintf_r+0x44>
 8003aea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003aec:	e71e      	b.n	800392c <_vfiprintf_r+0x48>
 8003aee:	ab03      	add	r3, sp, #12
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	462a      	mov	r2, r5
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <_vfiprintf_r+0x228>)
 8003af6:	a904      	add	r1, sp, #16
 8003af8:	4630      	mov	r0, r6
 8003afa:	f000 f879 	bl	8003bf0 <_printf_i>
 8003afe:	e7e4      	b.n	8003aca <_vfiprintf_r+0x1e6>
 8003b00:	08004134 	.word	0x08004134
 8003b04:	0800413e 	.word	0x0800413e
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	080038bf 	.word	0x080038bf
 8003b10:	0800413a 	.word	0x0800413a

08003b14 <_printf_common>:
 8003b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	4616      	mov	r6, r2
 8003b1a:	4698      	mov	r8, r3
 8003b1c:	688a      	ldr	r2, [r1, #8]
 8003b1e:	690b      	ldr	r3, [r1, #16]
 8003b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b24:	4293      	cmp	r3, r2
 8003b26:	bfb8      	it	lt
 8003b28:	4613      	movlt	r3, r2
 8003b2a:	6033      	str	r3, [r6, #0]
 8003b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b30:	4607      	mov	r7, r0
 8003b32:	460c      	mov	r4, r1
 8003b34:	b10a      	cbz	r2, 8003b3a <_printf_common+0x26>
 8003b36:	3301      	adds	r3, #1
 8003b38:	6033      	str	r3, [r6, #0]
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	0699      	lsls	r1, r3, #26
 8003b3e:	bf42      	ittt	mi
 8003b40:	6833      	ldrmi	r3, [r6, #0]
 8003b42:	3302      	addmi	r3, #2
 8003b44:	6033      	strmi	r3, [r6, #0]
 8003b46:	6825      	ldr	r5, [r4, #0]
 8003b48:	f015 0506 	ands.w	r5, r5, #6
 8003b4c:	d106      	bne.n	8003b5c <_printf_common+0x48>
 8003b4e:	f104 0a19 	add.w	sl, r4, #25
 8003b52:	68e3      	ldr	r3, [r4, #12]
 8003b54:	6832      	ldr	r2, [r6, #0]
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	42ab      	cmp	r3, r5
 8003b5a:	dc26      	bgt.n	8003baa <_printf_common+0x96>
 8003b5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	3b00      	subs	r3, #0
 8003b64:	bf18      	it	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	0692      	lsls	r2, r2, #26
 8003b6a:	d42b      	bmi.n	8003bc4 <_printf_common+0xb0>
 8003b6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b70:	4641      	mov	r1, r8
 8003b72:	4638      	mov	r0, r7
 8003b74:	47c8      	blx	r9
 8003b76:	3001      	adds	r0, #1
 8003b78:	d01e      	beq.n	8003bb8 <_printf_common+0xa4>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	6922      	ldr	r2, [r4, #16]
 8003b7e:	f003 0306 	and.w	r3, r3, #6
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	bf02      	ittt	eq
 8003b86:	68e5      	ldreq	r5, [r4, #12]
 8003b88:	6833      	ldreq	r3, [r6, #0]
 8003b8a:	1aed      	subeq	r5, r5, r3
 8003b8c:	68a3      	ldr	r3, [r4, #8]
 8003b8e:	bf0c      	ite	eq
 8003b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b94:	2500      	movne	r5, #0
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bfc4      	itt	gt
 8003b9a:	1a9b      	subgt	r3, r3, r2
 8003b9c:	18ed      	addgt	r5, r5, r3
 8003b9e:	2600      	movs	r6, #0
 8003ba0:	341a      	adds	r4, #26
 8003ba2:	42b5      	cmp	r5, r6
 8003ba4:	d11a      	bne.n	8003bdc <_printf_common+0xc8>
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	e008      	b.n	8003bbc <_printf_common+0xa8>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4652      	mov	r2, sl
 8003bae:	4641      	mov	r1, r8
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	47c8      	blx	r9
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d103      	bne.n	8003bc0 <_printf_common+0xac>
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc0:	3501      	adds	r5, #1
 8003bc2:	e7c6      	b.n	8003b52 <_printf_common+0x3e>
 8003bc4:	18e1      	adds	r1, r4, r3
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	2030      	movs	r0, #48	@ 0x30
 8003bca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bce:	4422      	add	r2, r4
 8003bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bd8:	3302      	adds	r3, #2
 8003bda:	e7c7      	b.n	8003b6c <_printf_common+0x58>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4622      	mov	r2, r4
 8003be0:	4641      	mov	r1, r8
 8003be2:	4638      	mov	r0, r7
 8003be4:	47c8      	blx	r9
 8003be6:	3001      	adds	r0, #1
 8003be8:	d0e6      	beq.n	8003bb8 <_printf_common+0xa4>
 8003bea:	3601      	adds	r6, #1
 8003bec:	e7d9      	b.n	8003ba2 <_printf_common+0x8e>
	...

08003bf0 <_printf_i>:
 8003bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf4:	7e0f      	ldrb	r7, [r1, #24]
 8003bf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bf8:	2f78      	cmp	r7, #120	@ 0x78
 8003bfa:	4691      	mov	r9, r2
 8003bfc:	4680      	mov	r8, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	469a      	mov	sl, r3
 8003c02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c06:	d807      	bhi.n	8003c18 <_printf_i+0x28>
 8003c08:	2f62      	cmp	r7, #98	@ 0x62
 8003c0a:	d80a      	bhi.n	8003c22 <_printf_i+0x32>
 8003c0c:	2f00      	cmp	r7, #0
 8003c0e:	f000 80d2 	beq.w	8003db6 <_printf_i+0x1c6>
 8003c12:	2f58      	cmp	r7, #88	@ 0x58
 8003c14:	f000 80b9 	beq.w	8003d8a <_printf_i+0x19a>
 8003c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c20:	e03a      	b.n	8003c98 <_printf_i+0xa8>
 8003c22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c26:	2b15      	cmp	r3, #21
 8003c28:	d8f6      	bhi.n	8003c18 <_printf_i+0x28>
 8003c2a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c30 <_printf_i+0x40>)
 8003c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c30:	08003c89 	.word	0x08003c89
 8003c34:	08003c9d 	.word	0x08003c9d
 8003c38:	08003c19 	.word	0x08003c19
 8003c3c:	08003c19 	.word	0x08003c19
 8003c40:	08003c19 	.word	0x08003c19
 8003c44:	08003c19 	.word	0x08003c19
 8003c48:	08003c9d 	.word	0x08003c9d
 8003c4c:	08003c19 	.word	0x08003c19
 8003c50:	08003c19 	.word	0x08003c19
 8003c54:	08003c19 	.word	0x08003c19
 8003c58:	08003c19 	.word	0x08003c19
 8003c5c:	08003d9d 	.word	0x08003d9d
 8003c60:	08003cc7 	.word	0x08003cc7
 8003c64:	08003d57 	.word	0x08003d57
 8003c68:	08003c19 	.word	0x08003c19
 8003c6c:	08003c19 	.word	0x08003c19
 8003c70:	08003dbf 	.word	0x08003dbf
 8003c74:	08003c19 	.word	0x08003c19
 8003c78:	08003cc7 	.word	0x08003cc7
 8003c7c:	08003c19 	.word	0x08003c19
 8003c80:	08003c19 	.word	0x08003c19
 8003c84:	08003d5f 	.word	0x08003d5f
 8003c88:	6833      	ldr	r3, [r6, #0]
 8003c8a:	1d1a      	adds	r2, r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6032      	str	r2, [r6, #0]
 8003c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e09d      	b.n	8003dd8 <_printf_i+0x1e8>
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	6820      	ldr	r0, [r4, #0]
 8003ca0:	1d19      	adds	r1, r3, #4
 8003ca2:	6031      	str	r1, [r6, #0]
 8003ca4:	0606      	lsls	r6, r0, #24
 8003ca6:	d501      	bpl.n	8003cac <_printf_i+0xbc>
 8003ca8:	681d      	ldr	r5, [r3, #0]
 8003caa:	e003      	b.n	8003cb4 <_printf_i+0xc4>
 8003cac:	0645      	lsls	r5, r0, #25
 8003cae:	d5fb      	bpl.n	8003ca8 <_printf_i+0xb8>
 8003cb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cb4:	2d00      	cmp	r5, #0
 8003cb6:	da03      	bge.n	8003cc0 <_printf_i+0xd0>
 8003cb8:	232d      	movs	r3, #45	@ 0x2d
 8003cba:	426d      	negs	r5, r5
 8003cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cc0:	4859      	ldr	r0, [pc, #356]	@ (8003e28 <_printf_i+0x238>)
 8003cc2:	230a      	movs	r3, #10
 8003cc4:	e011      	b.n	8003cea <_printf_i+0xfa>
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	6833      	ldr	r3, [r6, #0]
 8003cca:	0608      	lsls	r0, r1, #24
 8003ccc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cd0:	d402      	bmi.n	8003cd8 <_printf_i+0xe8>
 8003cd2:	0649      	lsls	r1, r1, #25
 8003cd4:	bf48      	it	mi
 8003cd6:	b2ad      	uxthmi	r5, r5
 8003cd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cda:	4853      	ldr	r0, [pc, #332]	@ (8003e28 <_printf_i+0x238>)
 8003cdc:	6033      	str	r3, [r6, #0]
 8003cde:	bf14      	ite	ne
 8003ce0:	230a      	movne	r3, #10
 8003ce2:	2308      	moveq	r3, #8
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cea:	6866      	ldr	r6, [r4, #4]
 8003cec:	60a6      	str	r6, [r4, #8]
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	bfa2      	ittt	ge
 8003cf2:	6821      	ldrge	r1, [r4, #0]
 8003cf4:	f021 0104 	bicge.w	r1, r1, #4
 8003cf8:	6021      	strge	r1, [r4, #0]
 8003cfa:	b90d      	cbnz	r5, 8003d00 <_printf_i+0x110>
 8003cfc:	2e00      	cmp	r6, #0
 8003cfe:	d04b      	beq.n	8003d98 <_printf_i+0x1a8>
 8003d00:	4616      	mov	r6, r2
 8003d02:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d06:	fb03 5711 	mls	r7, r3, r1, r5
 8003d0a:	5dc7      	ldrb	r7, [r0, r7]
 8003d0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d10:	462f      	mov	r7, r5
 8003d12:	42bb      	cmp	r3, r7
 8003d14:	460d      	mov	r5, r1
 8003d16:	d9f4      	bls.n	8003d02 <_printf_i+0x112>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d10b      	bne.n	8003d34 <_printf_i+0x144>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	07df      	lsls	r7, r3, #31
 8003d20:	d508      	bpl.n	8003d34 <_printf_i+0x144>
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	6861      	ldr	r1, [r4, #4]
 8003d26:	4299      	cmp	r1, r3
 8003d28:	bfde      	ittt	le
 8003d2a:	2330      	movle	r3, #48	@ 0x30
 8003d2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d34:	1b92      	subs	r2, r2, r6
 8003d36:	6122      	str	r2, [r4, #16]
 8003d38:	f8cd a000 	str.w	sl, [sp]
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	aa03      	add	r2, sp, #12
 8003d40:	4621      	mov	r1, r4
 8003d42:	4640      	mov	r0, r8
 8003d44:	f7ff fee6 	bl	8003b14 <_printf_common>
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d14a      	bne.n	8003de2 <_printf_i+0x1f2>
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d50:	b004      	add	sp, #16
 8003d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	f043 0320 	orr.w	r3, r3, #32
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	4833      	ldr	r0, [pc, #204]	@ (8003e2c <_printf_i+0x23c>)
 8003d60:	2778      	movs	r7, #120	@ 0x78
 8003d62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	6831      	ldr	r1, [r6, #0]
 8003d6a:	061f      	lsls	r7, r3, #24
 8003d6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d70:	d402      	bmi.n	8003d78 <_printf_i+0x188>
 8003d72:	065f      	lsls	r7, r3, #25
 8003d74:	bf48      	it	mi
 8003d76:	b2ad      	uxthmi	r5, r5
 8003d78:	6031      	str	r1, [r6, #0]
 8003d7a:	07d9      	lsls	r1, r3, #31
 8003d7c:	bf44      	itt	mi
 8003d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d82:	6023      	strmi	r3, [r4, #0]
 8003d84:	b11d      	cbz	r5, 8003d8e <_printf_i+0x19e>
 8003d86:	2310      	movs	r3, #16
 8003d88:	e7ac      	b.n	8003ce4 <_printf_i+0xf4>
 8003d8a:	4827      	ldr	r0, [pc, #156]	@ (8003e28 <_printf_i+0x238>)
 8003d8c:	e7e9      	b.n	8003d62 <_printf_i+0x172>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f023 0320 	bic.w	r3, r3, #32
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	e7f6      	b.n	8003d86 <_printf_i+0x196>
 8003d98:	4616      	mov	r6, r2
 8003d9a:	e7bd      	b.n	8003d18 <_printf_i+0x128>
 8003d9c:	6833      	ldr	r3, [r6, #0]
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	6961      	ldr	r1, [r4, #20]
 8003da2:	1d18      	adds	r0, r3, #4
 8003da4:	6030      	str	r0, [r6, #0]
 8003da6:	062e      	lsls	r6, r5, #24
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	d501      	bpl.n	8003db0 <_printf_i+0x1c0>
 8003dac:	6019      	str	r1, [r3, #0]
 8003dae:	e002      	b.n	8003db6 <_printf_i+0x1c6>
 8003db0:	0668      	lsls	r0, r5, #25
 8003db2:	d5fb      	bpl.n	8003dac <_printf_i+0x1bc>
 8003db4:	8019      	strh	r1, [r3, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	6123      	str	r3, [r4, #16]
 8003dba:	4616      	mov	r6, r2
 8003dbc:	e7bc      	b.n	8003d38 <_printf_i+0x148>
 8003dbe:	6833      	ldr	r3, [r6, #0]
 8003dc0:	1d1a      	adds	r2, r3, #4
 8003dc2:	6032      	str	r2, [r6, #0]
 8003dc4:	681e      	ldr	r6, [r3, #0]
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f7fc fa08 	bl	80001e0 <memchr>
 8003dd0:	b108      	cbz	r0, 8003dd6 <_printf_i+0x1e6>
 8003dd2:	1b80      	subs	r0, r0, r6
 8003dd4:	6060      	str	r0, [r4, #4]
 8003dd6:	6863      	ldr	r3, [r4, #4]
 8003dd8:	6123      	str	r3, [r4, #16]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003de0:	e7aa      	b.n	8003d38 <_printf_i+0x148>
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	4632      	mov	r2, r6
 8003de6:	4649      	mov	r1, r9
 8003de8:	4640      	mov	r0, r8
 8003dea:	47d0      	blx	sl
 8003dec:	3001      	adds	r0, #1
 8003dee:	d0ad      	beq.n	8003d4c <_printf_i+0x15c>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	079b      	lsls	r3, r3, #30
 8003df4:	d413      	bmi.n	8003e1e <_printf_i+0x22e>
 8003df6:	68e0      	ldr	r0, [r4, #12]
 8003df8:	9b03      	ldr	r3, [sp, #12]
 8003dfa:	4298      	cmp	r0, r3
 8003dfc:	bfb8      	it	lt
 8003dfe:	4618      	movlt	r0, r3
 8003e00:	e7a6      	b.n	8003d50 <_printf_i+0x160>
 8003e02:	2301      	movs	r3, #1
 8003e04:	4632      	mov	r2, r6
 8003e06:	4649      	mov	r1, r9
 8003e08:	4640      	mov	r0, r8
 8003e0a:	47d0      	blx	sl
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d09d      	beq.n	8003d4c <_printf_i+0x15c>
 8003e10:	3501      	adds	r5, #1
 8003e12:	68e3      	ldr	r3, [r4, #12]
 8003e14:	9903      	ldr	r1, [sp, #12]
 8003e16:	1a5b      	subs	r3, r3, r1
 8003e18:	42ab      	cmp	r3, r5
 8003e1a:	dcf2      	bgt.n	8003e02 <_printf_i+0x212>
 8003e1c:	e7eb      	b.n	8003df6 <_printf_i+0x206>
 8003e1e:	2500      	movs	r5, #0
 8003e20:	f104 0619 	add.w	r6, r4, #25
 8003e24:	e7f5      	b.n	8003e12 <_printf_i+0x222>
 8003e26:	bf00      	nop
 8003e28:	08004145 	.word	0x08004145
 8003e2c:	08004156 	.word	0x08004156

08003e30 <__sflush_r>:
 8003e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e38:	0716      	lsls	r6, r2, #28
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	d454      	bmi.n	8003eea <__sflush_r+0xba>
 8003e40:	684b      	ldr	r3, [r1, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dc02      	bgt.n	8003e4c <__sflush_r+0x1c>
 8003e46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	dd48      	ble.n	8003ede <__sflush_r+0xae>
 8003e4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	d045      	beq.n	8003ede <__sflush_r+0xae>
 8003e52:	2300      	movs	r3, #0
 8003e54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e58:	682f      	ldr	r7, [r5, #0]
 8003e5a:	6a21      	ldr	r1, [r4, #32]
 8003e5c:	602b      	str	r3, [r5, #0]
 8003e5e:	d030      	beq.n	8003ec2 <__sflush_r+0x92>
 8003e60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e62:	89a3      	ldrh	r3, [r4, #12]
 8003e64:	0759      	lsls	r1, r3, #29
 8003e66:	d505      	bpl.n	8003e74 <__sflush_r+0x44>
 8003e68:	6863      	ldr	r3, [r4, #4]
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e6e:	b10b      	cbz	r3, 8003e74 <__sflush_r+0x44>
 8003e70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	2300      	movs	r3, #0
 8003e76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e78:	6a21      	ldr	r1, [r4, #32]
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b0      	blx	r6
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	d106      	bne.n	8003e92 <__sflush_r+0x62>
 8003e84:	6829      	ldr	r1, [r5, #0]
 8003e86:	291d      	cmp	r1, #29
 8003e88:	d82b      	bhi.n	8003ee2 <__sflush_r+0xb2>
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f34 <__sflush_r+0x104>)
 8003e8c:	410a      	asrs	r2, r1
 8003e8e:	07d6      	lsls	r6, r2, #31
 8003e90:	d427      	bmi.n	8003ee2 <__sflush_r+0xb2>
 8003e92:	2200      	movs	r2, #0
 8003e94:	6062      	str	r2, [r4, #4]
 8003e96:	04d9      	lsls	r1, r3, #19
 8003e98:	6922      	ldr	r2, [r4, #16]
 8003e9a:	6022      	str	r2, [r4, #0]
 8003e9c:	d504      	bpl.n	8003ea8 <__sflush_r+0x78>
 8003e9e:	1c42      	adds	r2, r0, #1
 8003ea0:	d101      	bne.n	8003ea6 <__sflush_r+0x76>
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	b903      	cbnz	r3, 8003ea8 <__sflush_r+0x78>
 8003ea6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003eaa:	602f      	str	r7, [r5, #0]
 8003eac:	b1b9      	cbz	r1, 8003ede <__sflush_r+0xae>
 8003eae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003eb2:	4299      	cmp	r1, r3
 8003eb4:	d002      	beq.n	8003ebc <__sflush_r+0x8c>
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f7ff fbf2 	bl	80036a0 <_free_r>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ec0:	e00d      	b.n	8003ede <__sflush_r+0xae>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	47b0      	blx	r6
 8003ec8:	4602      	mov	r2, r0
 8003eca:	1c50      	adds	r0, r2, #1
 8003ecc:	d1c9      	bne.n	8003e62 <__sflush_r+0x32>
 8003ece:	682b      	ldr	r3, [r5, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0c6      	beq.n	8003e62 <__sflush_r+0x32>
 8003ed4:	2b1d      	cmp	r3, #29
 8003ed6:	d001      	beq.n	8003edc <__sflush_r+0xac>
 8003ed8:	2b16      	cmp	r3, #22
 8003eda:	d11e      	bne.n	8003f1a <__sflush_r+0xea>
 8003edc:	602f      	str	r7, [r5, #0]
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e022      	b.n	8003f28 <__sflush_r+0xf8>
 8003ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	e01b      	b.n	8003f22 <__sflush_r+0xf2>
 8003eea:	690f      	ldr	r7, [r1, #16]
 8003eec:	2f00      	cmp	r7, #0
 8003eee:	d0f6      	beq.n	8003ede <__sflush_r+0xae>
 8003ef0:	0793      	lsls	r3, r2, #30
 8003ef2:	680e      	ldr	r6, [r1, #0]
 8003ef4:	bf08      	it	eq
 8003ef6:	694b      	ldreq	r3, [r1, #20]
 8003ef8:	600f      	str	r7, [r1, #0]
 8003efa:	bf18      	it	ne
 8003efc:	2300      	movne	r3, #0
 8003efe:	eba6 0807 	sub.w	r8, r6, r7
 8003f02:	608b      	str	r3, [r1, #8]
 8003f04:	f1b8 0f00 	cmp.w	r8, #0
 8003f08:	dde9      	ble.n	8003ede <__sflush_r+0xae>
 8003f0a:	6a21      	ldr	r1, [r4, #32]
 8003f0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f0e:	4643      	mov	r3, r8
 8003f10:	463a      	mov	r2, r7
 8003f12:	4628      	mov	r0, r5
 8003f14:	47b0      	blx	r6
 8003f16:	2800      	cmp	r0, #0
 8003f18:	dc08      	bgt.n	8003f2c <__sflush_r+0xfc>
 8003f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f2c:	4407      	add	r7, r0
 8003f2e:	eba8 0800 	sub.w	r8, r8, r0
 8003f32:	e7e7      	b.n	8003f04 <__sflush_r+0xd4>
 8003f34:	dfbffffe 	.word	0xdfbffffe

08003f38 <_fflush_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	690b      	ldr	r3, [r1, #16]
 8003f3c:	4605      	mov	r5, r0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	b913      	cbnz	r3, 8003f48 <_fflush_r+0x10>
 8003f42:	2500      	movs	r5, #0
 8003f44:	4628      	mov	r0, r5
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	b118      	cbz	r0, 8003f52 <_fflush_r+0x1a>
 8003f4a:	6a03      	ldr	r3, [r0, #32]
 8003f4c:	b90b      	cbnz	r3, 8003f52 <_fflush_r+0x1a>
 8003f4e:	f7ff f99f 	bl	8003290 <__sinit>
 8003f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f3      	beq.n	8003f42 <_fflush_r+0xa>
 8003f5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f5c:	07d0      	lsls	r0, r2, #31
 8003f5e:	d404      	bmi.n	8003f6a <_fflush_r+0x32>
 8003f60:	0599      	lsls	r1, r3, #22
 8003f62:	d402      	bmi.n	8003f6a <_fflush_r+0x32>
 8003f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f66:	f7ff fb8a 	bl	800367e <__retarget_lock_acquire_recursive>
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	f7ff ff5f 	bl	8003e30 <__sflush_r>
 8003f72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f74:	07da      	lsls	r2, r3, #31
 8003f76:	4605      	mov	r5, r0
 8003f78:	d4e4      	bmi.n	8003f44 <_fflush_r+0xc>
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	059b      	lsls	r3, r3, #22
 8003f7e:	d4e1      	bmi.n	8003f44 <_fflush_r+0xc>
 8003f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f82:	f7ff fb7d 	bl	8003680 <__retarget_lock_release_recursive>
 8003f86:	e7dd      	b.n	8003f44 <_fflush_r+0xc>

08003f88 <__swhatbuf_r>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f90:	2900      	cmp	r1, #0
 8003f92:	b096      	sub	sp, #88	@ 0x58
 8003f94:	4615      	mov	r5, r2
 8003f96:	461e      	mov	r6, r3
 8003f98:	da0d      	bge.n	8003fb6 <__swhatbuf_r+0x2e>
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	bf14      	ite	ne
 8003fa6:	2340      	movne	r3, #64	@ 0x40
 8003fa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003fac:	2000      	movs	r0, #0
 8003fae:	6031      	str	r1, [r6, #0]
 8003fb0:	602b      	str	r3, [r5, #0]
 8003fb2:	b016      	add	sp, #88	@ 0x58
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	466a      	mov	r2, sp
 8003fb8:	f000 f848 	bl	800404c <_fstat_r>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	dbec      	blt.n	8003f9a <__swhatbuf_r+0x12>
 8003fc0:	9901      	ldr	r1, [sp, #4]
 8003fc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003fc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003fca:	4259      	negs	r1, r3
 8003fcc:	4159      	adcs	r1, r3
 8003fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fd2:	e7eb      	b.n	8003fac <__swhatbuf_r+0x24>

08003fd4 <__smakebuf_r>:
 8003fd4:	898b      	ldrh	r3, [r1, #12]
 8003fd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fd8:	079d      	lsls	r5, r3, #30
 8003fda:	4606      	mov	r6, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	d507      	bpl.n	8003ff0 <__smakebuf_r+0x1c>
 8003fe0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	6123      	str	r3, [r4, #16]
 8003fe8:	2301      	movs	r3, #1
 8003fea:	6163      	str	r3, [r4, #20]
 8003fec:	b003      	add	sp, #12
 8003fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff0:	ab01      	add	r3, sp, #4
 8003ff2:	466a      	mov	r2, sp
 8003ff4:	f7ff ffc8 	bl	8003f88 <__swhatbuf_r>
 8003ff8:	9f00      	ldr	r7, [sp, #0]
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	4630      	mov	r0, r6
 8004000:	f7ff fbba 	bl	8003778 <_malloc_r>
 8004004:	b948      	cbnz	r0, 800401a <__smakebuf_r+0x46>
 8004006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800400a:	059a      	lsls	r2, r3, #22
 800400c:	d4ee      	bmi.n	8003fec <__smakebuf_r+0x18>
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	f043 0302 	orr.w	r3, r3, #2
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	e7e2      	b.n	8003fe0 <__smakebuf_r+0xc>
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	6020      	str	r0, [r4, #0]
 800401e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004022:	81a3      	strh	r3, [r4, #12]
 8004024:	9b01      	ldr	r3, [sp, #4]
 8004026:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800402a:	b15b      	cbz	r3, 8004044 <__smakebuf_r+0x70>
 800402c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004030:	4630      	mov	r0, r6
 8004032:	f000 f81d 	bl	8004070 <_isatty_r>
 8004036:	b128      	cbz	r0, 8004044 <__smakebuf_r+0x70>
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	431d      	orrs	r5, r3
 8004048:	81a5      	strh	r5, [r4, #12]
 800404a:	e7cf      	b.n	8003fec <__smakebuf_r+0x18>

0800404c <_fstat_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4d07      	ldr	r5, [pc, #28]	@ (800406c <_fstat_r+0x20>)
 8004050:	2300      	movs	r3, #0
 8004052:	4604      	mov	r4, r0
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	f7fc fe04 	bl	8000c66 <_fstat>
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	d102      	bne.n	8004068 <_fstat_r+0x1c>
 8004062:	682b      	ldr	r3, [r5, #0]
 8004064:	b103      	cbz	r3, 8004068 <_fstat_r+0x1c>
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	bd38      	pop	{r3, r4, r5, pc}
 800406a:	bf00      	nop
 800406c:	200002e0 	.word	0x200002e0

08004070 <_isatty_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4d06      	ldr	r5, [pc, #24]	@ (800408c <_isatty_r+0x1c>)
 8004074:	2300      	movs	r3, #0
 8004076:	4604      	mov	r4, r0
 8004078:	4608      	mov	r0, r1
 800407a:	602b      	str	r3, [r5, #0]
 800407c:	f7fc fe03 	bl	8000c86 <_isatty>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d102      	bne.n	800408a <_isatty_r+0x1a>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	b103      	cbz	r3, 800408a <_isatty_r+0x1a>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	200002e0 	.word	0x200002e0

08004090 <_sbrk_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4d06      	ldr	r5, [pc, #24]	@ (80040ac <_sbrk_r+0x1c>)
 8004094:	2300      	movs	r3, #0
 8004096:	4604      	mov	r4, r0
 8004098:	4608      	mov	r0, r1
 800409a:	602b      	str	r3, [r5, #0]
 800409c:	f7fc fe0c 	bl	8000cb8 <_sbrk>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_sbrk_r+0x1a>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_sbrk_r+0x1a>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	200002e0 	.word	0x200002e0

080040b0 <_init>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr

080040bc <_fini>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr
